function kpi_res = bmmo_parse_kpi_res_lis(kpi_rep, stats_rep)
%
% function kpi_res = bmmo_parse_kpi_res_lis(kpi_rep, stats_rep)
%
%Given the Correction quality KPIs and statistics (99.7, M3s, Max, 3s) from the LIS job report, parse the
%contents into a BMMO-NXE kpi structure
% Input:
%   kpi_rep  :  correction quality KPIs (99.7, M3s)  
%   stats_rep:  correction quality KPIs (Max, 3s) 
%
% Output:
%   kpi_res:  KPI (99.7, M3s, Max, 3s) correction quality structure as generated by
%   BMMO model
%
% Changelog
% 20200812  ANBZ Creation

% field names in job report and MATLAB
res_fields = {'ResidualOverlayMetrics','ResidualInterfield','ResidualIntrafield'};
kpi_res_fields = {'overlay','interfield','intrafield'};

% Correction quality overlay metrics (99.7, M3s)  
kpi_res.(kpi_res_fields{1}) = bmmo_parse_kpi_overlay_lis(kpi_rep(1).(res_fields{1}),kpi_rep(2).(res_fields{1}),'kpi');
% Correction quality interfield metrics (99.7, M3s)  
kpi_res.(kpi_res_fields{2}) = sub_parse_kpi_res_interfield(kpi_rep(1).(res_fields{2}),kpi_rep(2).(res_fields{2}));
% Correction quality intrafield metrics (99.7, M3s)  
kpi_res.(kpi_res_fields{3}) = sub_parse_kpi_res_intrafield(kpi_rep(1).(res_fields{3}), kpi_rep(2).(res_fields{3}));

% Correction quality overlay metrics (Max, 3s)
kpi_res1.(kpi_res_fields{1}) = bmmo_parse_kpi_overlay_lis(stats_rep(1).(res_fields{1}),stats_rep(2).(res_fields{1}),'kpi2');
% Correction quality interfield metrics (Max, 3s)
kpi_res1.(kpi_res_fields{2}) = sub_parse_pi_res_interfield(stats_rep(1).(res_fields{2}),stats_rep(2).(res_fields{2}));
% Correction quality intrafield metrics (Max, 3s)
kpi_res1.(kpi_res_fields{3}) = sub_parse_pi_res_intrafield(stats_rep(1).(res_fields{3}), stats_rep(2).(res_fields{3}));

for ifd = 1:length(kpi_res_fields)
    kpi_res.(kpi_res_fields{ifd}) = bmmo_add_missing_fields(kpi_res.(kpi_res_fields{ifd}), kpi_res1.(kpi_res_fields{ifd}));
end

% SUB FUNCTIONS
% kpi functions
function kpi_inter = sub_parse_kpi_res_interfield(kpi_res_inter1,kpi_res_inter2)

chucks = {'chk1', 'chk2'};

for ic = 1
    kpi_inter.(['ovl_grid_' chucks{ic} '_res_997_x']) = str2double(kpi_res_inter1.ExposureGrid.('Max99.7').X) * 1e-9;
    kpi_inter.(['ovl_grid_' chucks{ic} '_res_997_y']) = str2double(kpi_res_inter1.ExposureGrid.('Max99.7').Y) * 1e-9;
end

for ic = 2
    kpi_inter.(['ovl_grid_' chucks{ic} '_res_997_x']) = str2double(kpi_res_inter2.ExposureGrid.('Max99.7').X) * 1e-9;
    kpi_inter.(['ovl_grid_' chucks{ic} '_res_997_y']) = str2double(kpi_res_inter2.ExposureGrid.('Max99.7').Y) * 1e-9;
end


function kpi_intra = sub_parse_kpi_res_intrafield(kpi_res_intra1, kpi_res_intra2)

chucks = {'chk1', 'chk2'};
dims = {'x', 'y'};
dims_rep = {'X', 'Y'};

for ic = 1
    for id = 1:2
        kpi_intra.(['ovl_exp_field_HO_res_' dims{id} '_res_' chucks{ic}]) =  str2double(kpi_res_intra1.After.(dims_rep{id})) * 1e-9;
    end
end

for ic = 2
    for id = 1:2
        kpi_intra.(['ovl_exp_field_HO_res_' dims{id} '_res_' chucks{ic}]) =  str2double(kpi_res_intra2.After.(dims_rep{id})) * 1e-9; 
    end
end


% stats functions

function kpi_inter = sub_parse_pi_res_interfield(stat_res_inter1,stat_res_inter2)

chucks = {'chk1', 'chk2'};

for ic = 1
     kpi_inter.(['ovl_exp_ytx_max_wafer_' chucks{ic}]) =  str2double(stat_res_inter1.YTX.Wafer.Max) * 1e-9;
     kpi_inter.(['ovl_exp_xty_max_wafer_' chucks{ic}]) =  str2double(stat_res_inter1.XTY.Wafer.Max) * 1e-9;   
end

for ic = 2
    kpi_inter.(['ovl_exp_ytx_max_wafer_' chucks{ic}]) =  str2double(stat_res_inter2.YTX.Wafer.Max) * 1e-9;
    kpi_inter.(['ovl_exp_xty_max_wafer_' chucks{ic}]) =  str2double(stat_res_inter2.XTY.Wafer.Max) * 1e-9;   
end


function kpi_intra = sub_parse_pi_res_intrafield(stat_res_intra1, stat_res_intra2)

chucks = {'chk1', 'chk2'};
dims = {'x', 'y'};
dims_rep = {'X', 'Y'};

for ic = 1
    for id = 1:2
         kpi_intra.(['ovl_exp_field_HO_res_' dims{id} '_before_' chucks{ic}]) = str2double(stat_res_intra1.Before.(dims_rep{id})) * 1e-9;        
         kpi_intra.(['ovl_exp_field_HO_res_' dims{id} '_delta_' chucks{ic}]) =  str2double(stat_res_intra1.Delta.(dims_rep{id})) * 1e-9;   
    end
end

for ic = 2
    for id = 1:2
        kpi_intra.(['ovl_exp_field_HO_res_' dims{id} '_before_' chucks{ic}]) = str2double(stat_res_intra2.Before.(dims_rep{id})) * 1e-9;
        kpi_intra.(['ovl_exp_field_HO_res_' dims{id} '_delta_' chucks{ic}]) =  str2double(stat_res_intra2.Delta.(dims_rep{id})) * 1e-9;   
    end
end

