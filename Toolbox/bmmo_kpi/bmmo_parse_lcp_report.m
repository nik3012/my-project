function kpi_struct = bmmo_parse_lcp_report(job_report)
% function kpi_struct = bmmo_parse_lcp_report(job_report)
%
% Given an LCP/VCP job report (optionally already loaded with xml_load), parse
% the contents into a BMMO-NXE kpi structure
%
% Input:
%   job_report: full path of OTAS/LIS (LCP/VCP) job report, or parsed job_report strcture
%       generated by xml_load
%
% Output:
%   kpi_struct: KPI structure as generated by bmmo_nxe_drift_control_model
%
% 20171030 SBPR Creation
% 20200918 ANBZ Updated for LIS job report
% 20201030 LUDU Updated to parse input, uncontrolled, inline SDM and 18parNCE kpis
% 20201119 OGIE Updated to parse 33parNCE kpis for LIS

if ischar(job_report)
    job_report = xml_load(job_report);
end

% Case: LIS Job report
if strcmp(job_report.Header.DocumentType, 'ADELbmmoOverlayJobReport')
    
    % Outlier and applied KPIs
    kpi_outlier = job_report.Results.KpisPerClassList(3).KpisPerClass.InputData;
    if isfield(job_report.Results.StatisticsPerClassList(3).StatisticsPerClass, 'AppliedCorrection')
        kpi_appl_nonchuck = job_report.Results.StatisticsPerClassList(3).StatisticsPerClass.AppliedCorrection;
    end
    
    % correction KPIs and Stats
    for i = 1:length(job_report.Results.KpisPerClassList)
        kpi_corr(i)   = job_report.Results.KpisPerClassList(i).KpisPerClass.CorrectionMagnitude;
        stats_corr(i) = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.CorrectionMagnitude;
    end
    % Residue and Controlled Input, KPI and Stats
    for i= 1:2
        kpi_res(i)        = job_report.Results.KpisPerClassList(i).KpisPerClass.CorrectionQuality;
        kpi_input(i)      = job_report.Results.KpisPerClassList(i).KpisPerClass.InputData;
        stats_input(i)    = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.InputData;
        if isfield(job_report.Results.StatisticsPerClassList(i).StatisticsPerClass, 'Uncontrolled')
            stats_unctrl(i) = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.Uncontrolled;
        end
        if isfield(job_report.Results.KpisPerClassList(i).KpisPerClass, 'Uncontrolled')
            kpi_unctrl(i) = job_report.Results.KpisPerClassList(i).KpisPerClass.Uncontrolled;
        else
            kpi_unctrl = [];
        end
        if isfield(job_report.Results.StatisticsPerClassList(i).StatisticsPerClass, 'AppliedCorrection')
            kpi_appl.InlineSdm(i) = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.AppliedCorrection.InlineSdm;
        else
            kpi_appl = [];
        end
        stats_res(i) = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.CorrectionQuality;
        if isfield(job_report.Results.StatisticsPerClassList(i).StatisticsPerClass, 'Intrafield18ParNce')
            stats_18parNCE(i) = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.Intrafield18ParNce;
        else
            stats_18parNCE = [];
        end
        if isfield(job_report.Results.StatisticsPerClassList(i).StatisticsPerClass, 'Intrafield33ParNce')
            stats_33parNCE(i) = job_report.Results.StatisticsPerClassList(i).StatisticsPerClass.Intrafield33ParNce;
        else
            stats_33parNCE = [];
        end
    end
    
    % VCP functions for parsing input, corrections and residue
    kpi_struct.input = bmmo_parse_kpi_rep_input_lis(kpi_input, kpi_outlier, stats_input);
    if ~isempty(kpi_unctrl)
        kpi_struct.uncontrolled = bmmo_parse_kpi_rep_uncontrolled_lis(kpi_unctrl, stats_unctrl);
    end
    if ~isempty(kpi_appl)
        kpi_struct.applied  = bmmo_parse_kpi_rep_applied_lis(kpi_appl.InlineSdm, kpi_appl_nonchuck);
    end
    kpi_struct.correction = bmmo_parse_kpi_corr_lis(kpi_corr, stats_corr);
    kpi_struct.residue = bmmo_parse_kpi_res_lis(kpi_res, stats_res);
    if ~isempty(stats_18parNCE)        
        kpi_struct.Intra_18par_NCE = bmmo_parse_kpi_ho_NCE_lis(stats_18parNCE);
    end
    if ~isempty(stats_33parNCE)        
        kpi_struct.Intra_33par_NCE = bmmo_parse_kpi_ho_NCE_lis(stats_33parNCE);
    end 
    
% Case: OTAS Job report
else
    % OTAS functions for parsing input, corrections and residue
    kpi_struct.input               = bmmo_parse_kpi_rep_input(job_report.Results.KpiList.BaseLinerMmo.Overlay.InputData);
    kpi_struct.applied             = bmmo_parse_kpi_rep_inlinesdm(job_report.Results.KpiList.BaseLinerMmo.Overlay.InlineSdm);
    kpi_struct.uncontrolled        = bmmo_parse_kpi_rep_uncontrolled(job_report.Results.KpiList.BaseLinerMmo.Overlay.Uncontrolled);
    kpi_struct.correction          = bmmo_parse_kpi_corr(job_report.Results.KpiList.BaseLinerMmo.Overlay.CorrectionMagnitude);
    kpi_struct.residue             = bmmo_parse_kpi_res(job_report.Results.KpiList.BaseLinerMmo.Overlay.CorrectionQuality);
    if isfield(job_report.Results.KpiList.BaseLinerMmo.Overlay, 'IntraField18ParNce')
        kpi_struct.Intra_18par_NCE     = bmmo_parse_kpi_18parNCE(job_report.Results.KpiList.BaseLinerMmo.Overlay.IntraField18ParNce);
    end
end


