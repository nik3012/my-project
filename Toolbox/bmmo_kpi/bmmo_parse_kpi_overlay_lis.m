function kpi_ovl = bmmo_parse_kpi_overlay_lis(kpi_rep1, kpi_rep2, mode)
%
% function kpi_ovl = bmmo_parse_kpi_overlay_lis(kpi_rep1, kpi_rep2)
%
%Given the KPIs and statistics from the LIS job report, parse the
%contents into a BMMO-NXE kpi structure
% Input:
%   kpi_rep1:  KPIs/Stats  Chuck 1 from the job report
%   kpi_rep2:  KPIs/Stats  Chuck 2 from the job report
%   mode       : 'kpi' for parsing  - 99.7, M3s
%              : 'kpi2' for parsing - Max, 3s
%              : 'all' for parsing  - all metrics
%
% Output:
%   kpi_ovl :  KPI (99.7, M3s) structure as generated by
%   BMMO model
%
% Changelog
% 20200812  ANBZ Creation

% mapping table from kpi rep
kpi_rep_map = {'Max', ...
                'Max99.7', ...
                'M3s', ...
                'StDev3', ...
                'X', ...
                'Y'};

% mapping table from kpi out
kpi_ovl_map = {'max', ...
                '997', ...
                'm3s', ...
                '3std', ...
                'x', ...
                'y'};

kpi_chuck = { 'chk1', 'chk2'};

dim_index =  5:6;

% select metrics based on mode 
if strcmp(mode, 'kpi')
stat_index = [2 3];
elseif strcmp(mode, 'all')
stat_index = 1:4;
elseif strcmp(mode, 'kpi2')
stat_index = [1 4];  
elseif strcmp(mode, 'Max')
stat_index = 1;
end


for istat = stat_index
    for idim = dim_index
        
        for ichuck = 1
            fieldname = ['ovl_' kpi_chuck{ichuck} '_' kpi_ovl_map{istat} '_' kpi_ovl_map{idim}];
            datastr =  kpi_rep1.(kpi_rep_map{istat}).(kpi_rep_map{idim});
            kpi_ovl.(fieldname) = str2double(datastr) * 1e-9;
        end
        
        for ichuck = 2
            fieldname = ['ovl_' kpi_chuck{ichuck} '_' kpi_ovl_map{istat} '_' kpi_ovl_map{idim}];
            datastr =  kpi_rep2.(kpi_rep_map{istat}).(kpi_rep_map{idim});
            kpi_ovl.(fieldname) = str2double(datastr) * 1e-9;
        end
    end
end
