function kpi_ho = bmmo_parse_kpi_bao_rep(kpi_ho, kpi_rep_bao)
%
% function kpi_ho = bmmo_parse_kpi_bao_rep(kpi_ho, kpi_rep_bao)
%
%Given the BAO parameters from the OTAS job report, parse the
%contents into a BMMO-NXE kpi structure
% Input:
%   kpi_rep_bao:  BAO parameters from job report  
%   kpi_ho     :  KPI structure to copy the output
%
% Output:
%   kpi_ho      :  BAO parameters KPI structure structure as generated by
%   BMMO model

% mapping table from kpi rep 
%Changelog
% 20171030 SBPR Creation


kpi_rep_pars1 = {'Translation', 'Scaling'}; % pars with dim components
kpi_rep_pars2 = {...
    'SymmetricMagnification',...
    'SymmetricIntraFieldRotation',...
    'AsymmetricMagnification',...
    'AsymmetricIntraFieldRotation',...
    'Rotation',...
    'NonOrthogonality'};


kpi_rep_dim =  {'X','Y'};
kpi_rep_chk =   {'Chuck1','Chuck2'};


kpi_pars1 = {'translation', 'wafer_exp'};
kpi_pars2 = {'sym_intra_mag', ...
    'sym_intra_rot',  ...
    'asym_intra_mag', ...
    'asym_intra_rot', ...
    'wafer_rot', ...
    'wafer_non_ortho'};

kpi_dim_map = {'x', 'y'};
kpi_chk     = {'chk1','chk2'};

%for conversion to meter from nm (translation) and ppm (wafer expansion)
Units1 = [ 1e-9; 1e-6];
% for conversion to meter from ppm and urad
Units2 = [1e-6; 1e-6; 1e-6; 1e-6; 1e-6; 1e-6];



for ichk =  1:2
    for idim = 1:2
        % pars with dim
        for ipar = 1:2
            fname = ['ovl_' kpi_pars1{ipar} '_' kpi_dim_map{idim} '_' kpi_chk{ichk} '_delta'];
            val = kpi_rep_bao.(kpi_rep_pars1{ipar}).(kpi_rep_dim{idim}).(kpi_rep_chk{ichk});
            kpi_ho.(fname) = str2double(val) *  Units1(ipar);
        end
    end
    
    for ipar = 1:6
        fname = ['ovl_' kpi_pars2{ipar} '_'  kpi_chk{ichk} '_delta'];
        val = kpi_rep_bao.(kpi_rep_pars2{ipar}).(kpi_rep_chk{ichk});
        kpi_ho.(fname) = str2double(val) *  Units2(ipar);
    end
end