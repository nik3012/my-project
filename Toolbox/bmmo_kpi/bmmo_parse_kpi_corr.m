function kpi_corr = bmmo_parse_kpi_corr(kpi_rep_corr)
%
% function kpi_corr =  bmmo_parse_kpi_corr(kpi_rep_corr)
%
%Given the Correction Magnitude KPIs and statistics from the OTAS job report, parse the
%contents into a BMMO-NXE kpi structure
% Input:
%   kpi_rep_corr: Correction Magnitude KPIs & stats from job report
%
% Output:
%   kpi_corr: KPI Correction Magnitude structure as generated by bmmo_nxe_drift_control_model
%
% 20171030 SBPR Creation

kpi_fields = {'delta_filtered', 'delta_unfiltered', 'total_filtered', 'total_unfiltered'};
rep_fields = {'DeltaFiltered', 'Delta', 'TotalFiltered', 'Total'};
rep_kf_fields = {'KFactorsFiltered', 'KFactors', 'KFactorsTotalFiltered', 'KFactorsTotal'};
rep_total_fields = {...
    kpi_rep_corr.Calibration.DeltaFiltered.Overlay, ...
    kpi_rep_corr.Calibration.Delta.Overlay,...
    kpi_rep_corr.CorrectionOverlay,...
    kpi_rep_corr.CorrectionOverlayUnfiltered
};
rep_wh_fields = {'WaferHeatingIrEuvRatioFiltered', 'WaferHeatingIrEuvRatio', 'WaferHeatingIrEuvRatioTotalFiltered', 'WaferHeatingIrEuvRatioTotal'};

% do everything except 'total' and 'wh' first

for ii = 1:length(rep_fields)
    
   kpi_corr.(kpi_fields{ii}).mirror    =  bmmo_parse_kpi_mi_rep(kpi_rep_corr.Calibration.(rep_fields{ii}).MirrorMaps);
   kpi_corr.(kpi_fields{ii}).grid      = bmmo_parse_kpi_overlay(kpi_rep_corr.Calibration.(rep_fields{ii}).GridMaps);
   kpi_corr.(kpi_fields{ii}).bao       = bmmo_parse_kpi_overlay(kpi_rep_corr.Calibration.(rep_fields{ii}).Bao.Overlay);
   kpi_corr.(kpi_fields{ii}).bao       = bmmo_parse_kpi_bao_rep(kpi_corr.(kpi_fields{ii}).bao, kpi_rep_corr.Calibration.(rep_fields{ii}).Bao);
   kpi_corr.(kpi_fields{ii}).intra_raw = bmmo_parse_kpi_overlay(kpi_rep_corr.Calibration.(rep_fields{ii}).IntraFieldRawFingerprint);
   kpi_corr.(kpi_fields{ii}).k_factors = bmmo_parse_kpi_overlay(kpi_rep_corr.Monitoring.(rep_kf_fields{ii}).Overlay);
   kpi_corr.(kpi_fields{ii}).k_factors = bmmo_parse_kpi_ho_rep(kpi_corr.(kpi_fields{ii}).k_factors, kpi_rep_corr.Monitoring.(rep_kf_fields{ii}));
   kpi_corr.(kpi_fields{ii}).waferheating.ovl_exp_grid_whc = str2double(kpi_rep_corr.Calibration.(rep_wh_fields{ii}).Value);
   kpi_corr.(kpi_fields{ii}).total     = bmmo_parse_kpi_overlay(rep_total_fields{ii});
   
   if isfield(kpi_rep_corr.Calibration.(rep_fields{ii}), 'SuSd')
   kpi_corr.(kpi_fields{ii}).susd.ovl_exp_grid_chk1_ty_susd  =  str2double(kpi_rep_corr.Calibration.(rep_fields{ii}).SuSd.ExposureGrid.Translation.Y.AbsoluteDelta.Chuck1) * 1e-9;
   kpi_corr.(kpi_fields{ii}).susd.ovl_exp_grid_chk2_ty_susd  =  str2double(kpi_rep_corr.Calibration.(rep_fields{ii}).SuSd.ExposureGrid.Translation.Y.AbsoluteDelta.Chuck2) * 1e-9;
   end
end


% do monitoring
kpi_corr.monitor.susd.ovl_exp_grid_chk1_ty_susd = str2double(kpi_rep_corr.Monitoring.SuSd.ExposureGrid.Translation.Y.AbsoluteDelta.Chuck1) * 1e-9;
kpi_corr.monitor.susd.ovl_exp_grid_chk2_ty_susd = str2double(kpi_rep_corr.Monitoring.SuSd.ExposureGrid.Translation.Y.AbsoluteDelta.Chuck2) * 1e-9;

kpi_corr.monitor.intra_delta = bmmo_parse_kpi_ho_rep([], kpi_rep_corr.Monitoring.KFactorsComparison, true);



