function [input_struct, bar_struct, adelexp] = bmmo_adelexp_from_zip(zip_path, filter, bar_struct)
% function input_struct = bmmo_read_lcp_zip(zip_path, filter, bar_struct)
%
% Read a zip file created by an LCP/VCP BMMO-NXE job (recover to baseline or
% control to baseline), recreating the BMMO-NXE Matlab input structure
%
% Input: zip_path: full path of zip file
%
% Optional Input:
%   filter: flag to determine filtering type
%       0: recover to baseline
%       1: control to baseline
%       2: from LCP/VCP job report (default)
%
% Output:
%   input_struct: recreating Matlab input structure as generated by LCP/VCP
%   bar_struct: updated bar struct or []
%   sbc_out   : SBC corrections from recipe
%   job_report: LCP/VCP job report
%   invalids  : Invalidated data (may not be produced for VCP)
% 20170131 SBPR Updated to include progress bar
% 20200918 ANBZ Updated progress bar for showing end of parsing


if nargin < 2
%Using time filter from LCP job report
    filter = 2;
end

if nargin < 3
    bar_struct = [];
end

tmpdir = [tempname '_LCP_ZIP'];
mkdir(tmpdir);
cleanupTempDir = onCleanup(@()rmdir(tmpdir, 's'));

input_struct = 0;

try     
    bar_struct = bmmo_log_progress(['Unzipping ' zip_path], bar_struct);
    unzip7(zip_path, tmpdir);
    
    [input_struct, ~, ~, ~, bar_struct] = bmmo_read_lcp_output(tmpdir, tmpdir, filter, bar_struct);
    
    
     bar_struct = bmmo_log_progress(['Generating KA residual'], bar_struct);
     [mlp, options] = bmmo_process_input(input_struct);
     [~, ml_KA_act_NCE] = bmmo_KA_SBC_fingerprint(mlp, options.previous_correction.KA.grid_2de, options);
     
     bar_struct = bmmo_log_progress(['Building ADELexposureTrajectoriesReport'], bar_struct);
     adels      = bmmo_find_adels(tmpdir);
    
     adelexp = bmmoADELexpTrajectories();
     adelexp.setMl(ml_KA_act_NCE);
     adelexp.fixCETGrid();
     adelexp.updateFromAdeller(adels.adeller);
     
     adel_filename = ['ADELexposureTrajectoriesReport_' adelexp.xml_data.Header.DocumentId '.xml'];
     bar_struct = bmmo_log_progress(['Writing ' adel_filename], bar_struct);
     adelexp.write(adel_filename);
     
     bar_struct = bmmo_log_progress(['Completed.',newline], bar_struct);

catch read_err
   disp(read_err);
   rethrow(read_err);
end