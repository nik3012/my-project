function [dx, dy] = bmmo_interp2_dxdydz(mesh_in, ilayout, olayout, options)
% function [dx, dy] = bmmo_interp2_dxdydz(mesh_in, ilayout, olayout, options)
%
% Wrapper for interp2, allowing custom guassian interpolation to be called
% with same interface
%
% Input
%   mesh_in: input dx and dy mesh structure as generated by sort2d (function to
%       interpolate)
%   ilayout: input layout structure as generated by sort2d (sample points)
%   olayout: output layout structure as generated by sort2d (query points)
%   options: resample_options as defined in bmmo_default_options_structure
%
% Output:
%   dx: double vector, interpolated values of mesh_in.dx function
%   dy: double vector, interpolated values of mesh_in.dy function

if strcmp(options.interp_type, 'gauss')
    [DXout, DYout] = bmmo_gauss_interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, mesh_in.dx, mesh_in.dy, olayout.meshgrid.x, olayout.meshgrid.y, options.gauss_radius);
else
    DXout = interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, mesh_in.dx, olayout.meshgrid.x, olayout.meshgrid.y,options.interp_type);
    DYout = interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, mesh_in.dy, olayout.meshgrid.x, olayout.meshgrid.y,options.interp_type);
end

% reshape outputs
dx = zeros(olayout.n,1);
dy = dx;

lidx = olayout.idx > 0;

dx(olayout.idx(lidx)) = DXout(lidx);
dy(olayout.idx(lidx)) = DYout(lidx);
