function bmmo_generate_parlist
% function bmmo_generate_parlist
% 
% Generate a ovl parameter list for BMMO/Bl3
%
% Output:
%  parlist: structure with one field per parameter, with the same
%           name as the parameter

plist = ovl_metro_parameters('10par', 'rswfr', 'rwy', 'allk20', 'rx', 'allk35');

% add 'rxwfr'
rswfr_idx = find(strcmp({plist.static.name}, 'rswfr'));
pnew = plist.static(rswfr_idx);
pnew.name = 'rxwfr';
pnew.args{3} = [0];
pnew.args{4} = [0 0 0 0 0 0];
plist.static(end+1) = pnew;

f = fopen('bmmo_parlist.m', 'w');

% print the comment header

fprintf(f, 'function parlist = bmmo_parlist\n');
fprintf(f, '%% function parlist = bmmo_parlist\n');
fprintf(f, '%%\n%% Generate a parameter list for BMMO-NXE\n');
fprintf(f, '%%\n%% This function is autogenerated by the function bmmo_generate_parlist\n');
fprintf(f, '%%\n%% Input: none\n');
fprintf(f, '%%\n%% Output: parlist: structure with one field per parameter\n');
fprintf(f, '%%\n%% %s Last generation time\n%%\n\n', date);

% print the contents of the function

fprintf(f, '%%                      |     dx exponents    |      dy exponents\n'); 
fprintf(f, '%%                      dx xf yf xc yc xw yw dy xf yf xc yc xw yw\n');
for ipar = 1:length(plist.static)
   fprintf(f, 'parlist.%s.args \t= [', plist.static(ipar).name);
   fprintf(f, '%d  ', [plist.static(ipar).args{:}]);
   fprintf(f, '];\n');
end

for ipar = 1:length(plist.static)
   switch(plist.static(ipar).name) 
       case 'tx'
           fprintf(f, 'parlist.%s.dxfun = @sub_onesfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_zerosfun;\n', plist.static(ipar).name);
       case 'ty'
           fprintf(f, 'parlist.%s.dxfun = @sub_zerosfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_onesfun;\n', plist.static(ipar).name);
       case 'rs'
           fprintf(f, 'parlist.%s.dxfun = @sub_minyffun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_xffun;\n', plist.static(ipar).name);
       case 'ra'
           fprintf(f, 'parlist.%s.dxfun = @sub_minyffun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_minxffun;\n', plist.static(ipar).name);
       case 'ms'
           fprintf(f, 'parlist.%s.dxfun = @sub_xffun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_yffun;\n', plist.static(ipar).name);
       case 'ma'
           fprintf(f, 'parlist.%s.dxfun = @sub_xffun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_minyffun;\n', plist.static(ipar).name);
       case 'rws'
           fprintf(f, 'parlist.%s.dxfun = @sub_minycfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_xcfun;\n', plist.static(ipar).name);
       case 'rwa'
           fprintf(f, 'parlist.%s.dxfun = @sub_minycfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_minxcfun;\n', plist.static(ipar).name);
       case 'mws'
           fprintf(f, 'parlist.%s.dxfun = @sub_xcfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_ycfun;\n', plist.static(ipar).name);
       case 'mwa'
           fprintf(f, 'parlist.%s.dxfun = @sub_xcfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_minycfun;\n', plist.static(ipar).name);
       otherwise
           fprintf(f, 'parlist.%s.dxfun = @sub_dxfun;\n', plist.static(ipar).name);
           fprintf(f, 'parlist.%s.dyfun = @sub_dyfun;\n', plist.static(ipar).name);
   end
end
   
% add some aliases
fprintf(f, 'parlist.k1 = parlist.tx;\n');
fprintf(f, 'parlist.k2 = parlist.ty;\n');
fprintf(f, 'parlist.k3 = parlist.mx;\n');
fprintf(f, 'parlist.k4 = parlist.my;\n');
fprintf(f, 'parlist.k6 = parlist.ry;\n');

fprintf(f, 'parlist.d2 = parlist.k7;\n');
fprintf(f, 'parlist.d2x = parlist.k7;\n');
fprintf(f, 'parlist.trzx = parlist.k9;\n');
fprintf(f, 'parlist.trzy = parlist.k10;\n');
fprintf(f, 'parlist.bowxf = parlist.k11;\n');
fprintf(f, 'parlist.bowyf = parlist.k12;\n');
fprintf(f, 'parlist.d2y = parlist.k12;\n');
fprintf(f, 'parlist.d3 = parlist.k13;\n');
fprintf(f, 'parlist.d3x = parlist.k13;\n');
fprintf(f, 'parlist.mag3y = parlist.k14;\n');
fprintf(f, 'parlist.accx = parlist.k15;\n');
fprintf(f, 'parlist.accy = parlist.k16;\n');
fprintf(f, 'parlist.cshpx = parlist.k17;\n');
fprintf(f, 'parlist.cshpy = parlist.k18;\n');
fprintf(f, 'parlist.flw3x = parlist.k19;\n');
fprintf(f, 'parlist.flw3y = parlist.k20;\n');

% add the evaluation functions
fprintf(f, '\n\nfunction v = sub_dxfun(wd, args)\n\n');
fprintf(f, 'v = args(1) .* wd.xf.^args(2) .* wd.yf.^args(3) .* wd.xc.^args(4) .* wd.yc.^args(5) .* wd.xw.^args(6) .* wd.yw.^args(7);\n'); 

fprintf(f, '\n\nfunction v = sub_dyfun(wd, args)\n\n');
fprintf(f, 'v = args(8) .* wd.xf.^args(9) .* wd.yf.^args(10) .* wd.xc.^args(11) .* wd.yc.^args(12) .* wd.xw.^args(13) .* wd.yw.^args(14);\n'); 

% quicker functions for simpler parameters
fprintf(f, '\n\nfunction v = sub_zerosfun(wd, args)\n\n');
fprintf(f, 'v = zeros(size(wd.xf));\n'); 

fprintf(f, '\n\nfunction v = sub_onesfun(wd, args)\n\n');
fprintf(f, 'v = ones(size(wd.xf));\n'); 

fprintf(f, '\n\nfunction v = sub_xffun(wd, args)\n\n');
fprintf(f, 'v = wd.xf;\n'); 

fprintf(f, '\n\nfunction v = sub_yffun(wd, args)\n\n');
fprintf(f, 'v = wd.yf;\n'); 

fprintf(f, '\n\nfunction v = sub_minxffun(wd, args)\n\n');
fprintf(f, 'v = -wd.xf;\n'); 

fprintf(f, '\n\nfunction v = sub_minyffun(wd, args)\n\n');
fprintf(f, 'v = -wd.yf;\n'); 

fprintf(f, '\n\nfunction v = sub_xcfun(wd, args)\n\n');
fprintf(f, 'v = wd.xc;\n'); 

fprintf(f, '\n\nfunction v = sub_ycfun(wd, args)\n\n');
fprintf(f, 'v = wd.yc;\n'); 

fprintf(f, '\n\nfunction v = sub_minxcfun(wd, args)\n\n');
fprintf(f, 'v = -wd.xc;\n'); 

fprintf(f, '\n\nfunction v = sub_minycfun(wd, args)\n\n');
fprintf(f, 'v = -wd.yc;\n'); 


fclose(f);


