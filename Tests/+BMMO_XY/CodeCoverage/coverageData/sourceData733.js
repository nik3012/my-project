var sourceData733 = {"FileContents":["function [isSame, cnt_OK, cnt_NOK] = bmmo_cmp_struct(strct1, strct2, precision, show_details, show_NOKs)\r","% function [isSame, cnt_OK, cnt_NOK] = bmmo_cmp_struct(strct1, strct2, precision, show_details, show_NOKs)\r","%\r","% This function compares every sub-struct and value as per given tol\r","%\r","% Input:\r","% in1, in2: sub-stuct inputs to assert\r","%\r","% Optional inputs:\r","% tol: tolerance, if not given then set to 5e-11\r","% show_details: List all assertion details if set to 1 (default is 0)\r","% show_NOKs: List only NOKs from assertion if set to 1 (default is 0)\r","%\r","\r","if nargin < 3\r","    precision = 5e-13;\r","end\r","\r","if nargin < 4\r","    show_details = 0;\r","end\r","\r","if nargin < 5\r","    show_NOKs = 1;\r","end\r","\r","[isSame, cnt_OK, cnt_NOK] = sub_cmp_struct(strct1, strct2, precision, true, 0, 0, inputname(1), show_details, show_NOKs);\r","\r","str_out = {'NOK found', 'All OK'};\r","\r","bmmo_fprintf(show_details, '%s (%d OKs; %d NOKs)\\n', str_out{double(isSame)+1}, cnt_OK, cnt_NOK);\r","\r","\r","function [isSame, cnt_OK, cnt_NOK] = sub_cmp_struct(s1, s2, precision, same_in, ok_in, nok_in, varname, show_details, show_NOKs)\r","\r","isSame = same_in;\r","cnt_OK = ok_in;\r","cnt_NOK = nok_in;\r","\r","switch class(s1)\r","  case 'struct' % if input is a struct\r","    \r","    struct_name = varname; % top-level struct\r","    \r","    dims1 = numel(s1);\r","    dims2 = numel(s2);\r","    nStruct = min(dims1,dims2);\r","    \r","    for iStruct = 1:nStruct % for all structs\r","        if (nStruct>1)  % add iterator (index) in struct name\r","            curr_name = sprintf('%s(%d)', struct_name, iStruct);\r","        else\r","            curr_name = struct_name;\r","        end\r","\r","        field_cell1 = fieldnames(s1); % list of field names (strct1)\r","        if isstruct(s2)\r","            field_cell2 = fieldnames(s2); % list of field names (strct2)\r","        else\r","            field_cell2 = {};\r","        end\r","\r","        % determine common fields\r","        common_fields = intersect(field_cell1, field_cell2);\r","        for ii = 1:numel(common_fields) % for all common fields\r","            field_to_compare = common_fields{ii};\r","            compare1 = s1(iStruct).(field_to_compare);\r","            compare2 = s2(iStruct).(field_to_compare);\r","            compare_name = [curr_name '.' field_to_compare];             \r","            [isSame, cnt_OK, cnt_NOK] = sub_cmp_struct(compare1, compare2, precision, isSame,  cnt_OK, cnt_NOK, compare_name, show_details, show_NOKs);\r","        end\r","\r","        % determine unique fields in strct1\r","        unique_s1_fields = setdiff(field_cell1, common_fields);\r","        for ii = 1:numel(unique_s1_fields)\r","            unique_field = unique_s1_fields{ii};\r","            compare_name = [curr_name '.' unique_field];\r","            bmmo_fprintf(show_details, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', 'field missing -->', compare_name);\r","            isSame = false;\r","            cnt_NOK = cnt_NOK + 1;\r","        end\r","\r","        % determine unique fields in strct2\r","        unique_s2_fields = setdiff(field_cell2, common_fields);\r","        for ii = 1:numel(unique_s2_fields)\r","            unique_field = unique_s2_fields{ii};\r","            compare_name = [curr_name '.' unique_field];\r","            bmmo_fprintf(show_details, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', '<-- field missing', compare_name);\r","            isSame = false;\r","            cnt_NOK = cnt_NOK + 1;\r","        end\r","    end % iStruct\r","    \r","    if (dims1 > nStruct) % indices in strct1, but not in strct2\r","        isSame = false; \r","        for iStruct = nStruct+1:dims1\r","            curr_name = sprintf('%s(%d)', struct_name, iStruct);\r","            bmmo_fprintf(show_details, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', 'struct missing -->', curr_name);\r","            cnt_NOK = cnt_NOK + 1;\r","        end\r","    end\r","    \r","    if (dims2 > nStruct) % indices in strct2, but not in strct1\r","        isSame = false; \r","        for iStruct = nStruct+1:dims2\r","            curr_name = sprintf('%s(%d)', struct_name, iStruct);\r","            bmmo_fprintf(show_details, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', '<-- struct missing', curr_name);\r","            cnt_NOK = cnt_NOK + 1;\r","        end\r","    end\r","\r","\r","  case 'cell' % if input is a cell\r","    \r","    if iscell(s2)  \r","        dims1 = size(s1);\r","        dims2 = size(s2);\r","\r","        common_dims  = min(prod(dims1), prod(dims2));\r","\r","        flat_s1 = reshape(s1, [], 1);\r","        flat_s2 = reshape(s2, [], 1);\r","\r","        % compare values in common\r","        for ii = 1:common_dims\r","            curr_name = sprintf('%s{%d}', varname, ii);\r","            [isSame, cnt_OK, cnt_NOK] = sub_cmp_struct(flat_s1{ii}, flat_s2{ii}, precision, isSame,  cnt_OK, cnt_NOK, curr_name, show_details, show_NOKs);\r","        end\r","\r","        if ~isequal(dims1, dims2)\r","            isSame = false;\r","            cnt_NOK = cnt_NOK + 1;\r","            bmmo_fprintf(show_details, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', 'unequal cell dims', varname);\r","        end\r","        \r","    else\r","        isSame = false;\r","        cnt_NOK = cnt_NOK + 1;\r","        bmmo_fprintf(show_details, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', 'not a cell array', varname);\r","    end\r","\r","  otherwise % input not a struct or cell\r","\r","    curr_name = varname;\r","    \r","    if show_NOKs\r","        tst_same = bmmo_cmp_NOK_data(s1, s2, precision, curr_name, show_NOKs); % compare only NOK data and write to fid (local buffer to prevent typecast to logical)\r","    else\r","        tst_same = bmmo_cmp_data(s1, s2, precision, curr_name, show_details); % compare all data and write to fid (local buffer to prevent typecast to logical)\r","    end\r","\r","    isSame = isSame & tst_same;\r","    if tst_same\r","        cnt_OK = cnt_OK + 1;\r","    else\r","        cnt_NOK = cnt_NOK + 1;\r","    end\r","   \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[15,19,23,27,29,31,36,37,38,40,41,113,142,144,146,147,152,153,154],"UnhitLineNumbers":[16,20,24,43,45,46,47,49,50,51,52,53,56,57,58,59,60,64,65,66,67,68,69,70,74,75,76,77,78,79,80,84,85,86,87,88,89,90,94,95,96,97,98,99,103,104,105,106,107,108,115,116,117,119,121,122,125,126,127,130,131,132,133,136,137,138,139,148,149,155,156],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,4,0,4,0,0,0,0,4,4,4,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,4,0,0,0,0,4,4,4,0,0,0,0,0,0]}}