var sourceData474 = {"FileContents":["function bmmo_assert_KPI_equal(kpi_struct1, kpi_struct2, out_file, tol, show_NOKs)\r","% function bmmo_assert_KPI_equal(kpi_struct1, kpi_struct2, out_file, tol, show_NOKs)\r","%\r","% Assert MATLAB and LIS job report KPIs as per the given spec (depending on\r","% decimals and units)\r","%\r","% Inputs:\r","% kpi_struct1: out.report.KPI (MATLAB output) or LIS/OTAS job report KPIs\r","% kpi_struct2: out.report.KPI (MATLAB output)or LIS/OTAS job report KPIs\r","%\r","% Optional input:\r","% outfile: filename to output the assertion results,\r","% eg: 'output.txt' or provide outfile = stdout for printing to command line\r","%\r","% tol: tolerance for assertion of KPIs(only KPIs with nm units),default: 5e-13\r","% show_NOKs: List only NOKs from assertion if set to 1, default is 0\r","%\r","%20201207 SBPR Creation\r","%20210107 ANBZ Updated for BL 3 KPIs and other missing KPIs\r","\r","prev_state = warning('query', 'backtrace');\r","warning('backtrace', 'off');\r","\r","%default title\r","title = 'kpi_struct 1 vs kpi_struct 2';\r","\r","if nargin < 3\r","    outfile = stdout;\r","else\r","    if ischar(out_file)\r","        outfile = fopen(out_file, 'w');\r","        if contains(out_file, 'MATLABvsLIS')\r","            title = 'MATLAB vs LIS';\r","        end\r","    else\r","        outfile = out_file;\r","    end\r","end\r","\r","if nargin < 4\r","    tol = 5e-13;\r","end\r","\r","\r","if nargin < 5\r","    show_NOKs = 0;\r","end\r","\r","% determine configuration\r","conf =  sub_determine_config(kpi_struct1);\r","conf2 = sub_determine_config(kpi_struct2);\r","conf.KA_correction_enabled    = conf.KA_correction_enabled   && conf2.KA_correction_enabled;\r","conf.susd_correction_enabled  = conf.susd_correction_enabled && conf2.susd_correction_enabled;\r","conf.ERO_present              = conf.ERO_present && conf2.ERO_present;\r","\r","fprintf(outfile,['KPIs: ', title,'\\n\\n']);\r","\r","% Input Data KPIs\r","try\r","    sub_assert_input_KPI(kpi_struct1.input, kpi_struct2.input, outfile, conf,  tol, show_NOKs);\r","catch\r","    sub_warning('Error in assertion of Input KPIs, skipping to next assertion', outfile);\r","end\r","\r","% Uncontrolled KPIs\r","try\r","    sub_assert_uncontrolled_KPI(kpi_struct1.uncontrolled, kpi_struct2.uncontrolled, outfile, conf, tol, show_NOKs)\r","catch\r","    sub_warning('Error in assertion of Uncontrolled input KPIs, skipping to next assertion', outfile);\r","end\r","\r","\r","% Applied correction PIs\r","try\r","    sub_assert_applied_corr_KPI(kpi_struct1.applied, kpi_struct2.applied, outfile, tol, show_NOKs)\r","catch\r","    sub_warning('Error in assertion of Applied correction KPIs, skipping to next assertion', outfile);\r","end\r","\r","\r","% Correction & Delta monitoring KPIs\r","try\r","    sub_assert_correction_KPI(kpi_struct1.correction, kpi_struct2.correction, outfile, conf, tol, show_NOKs)\r","catch\r","    sub_warning('Error in assertion of Correction Magnitude & Monitoring KPIs, skipping to next assertion', outfile);\r","end\r","\r","\r","try\r","    sub_assert_residue_KPI(kpi_struct1, kpi_struct2, outfile, conf, tol, show_NOKs)\r","catch\r","    sub_warning('Error in assertion of Correction Quality KPIs', outfile);\r","end\r","\r","fclose('all');\r","warning(prev_state);\r","\r","end\r","\r","\r","\r","%SUB FUNCTIONS\r","function conf = sub_determine_config(kpi_struct)\r","\r","if isfield(kpi_struct.correction.delta_unfiltered, 'grid')\r","    conf.KA_correction_enabled = 1;\r","else\r","    conf.KA_correction_enabled = 0;\r","end\r","\r","if isfield(kpi_struct.correction.delta_unfiltered, 'susd')\r","    conf.susd_correction_enabled = 1;\r","else\r","    conf.susd_correction_enabled = 0;\r","end\r","\r","if isfield(kpi_struct, 'Intra_33par_NCE')\r","    conf.intraf_actuation_order  = 5;\r","    conf.intraf_fieldname = 'intra_33_par';\r","conf.intraf_nce_fieldname = 'Intra_33par_NCE';\r","else\r","    conf.intraf_actuation_order  = 3;\r","    conf.intraf_fieldname = 'intra_18_par';\r","conf.intraf_nce_fieldname = 'Intra_18par_NCE';\r","end\r","\r","if isfield(kpi_struct.input, 'input_clamp')\r","    conf.ERO_present = 1;\r","else \r","    conf.ERO_present = 0;\r","end\r","end\r","\r","\r","function sub_warning(message, outfile)\r","\r","if outfile == 1 %stdout case\r","    warning(message)\r","else % filename char case\r","    warning(message)\r","    fprintf(outfile, ['WARNING:', message,'\\n']);\r","end\r","end\r","\r","\r","function sub_assertion(MATLAB, LIS, outfile, delta, show_NOKs)\r","\r","try\r","    bmmo_assert_equal(MATLAB, LIS, delta, outfile, show_NOKs);\r","catch ME\r","    if strcmp(ME.identifier,'MATLAB:assertion:failed')\r","        sub_warning( 'Assertion Failed! Check the NOKs.', outfile);\r","    else\r","        rethrow(ME)\r","    end\r","end\r","\r","end\r","\r","\r","function sub_assert_input_KPI(kpi_model, kpi_LIS, outfile, conf, tol, show_NOKs)\r","\r","if conf.ERO_present\r","    f = {'overlay', 'input_clamp' 'outlier_coverage', 'valid', 'w2w'}; %Input fields\r","else\r","    f = {'overlay','outlier_coverage', 'valid', 'w2w'}; %Input fields\r","end\r","\r","fprintf(outfile, ' \\n');\r","fprintf(outfile, '\\n');\r","fprintf(outfile, 'Input Data\\n');\r","\r","for i= 1:length(f)\r","    \r","    if strcmp(f{i}, 'outlier_coverage')\r","        fprintf(outfile, '\\n');\r","        fprintf(outfile, [f{i},' (Delta expected to be less than : 5e-3)\\n']);\r","        sub_assertion(kpi_model.(f{i}), kpi_LIS.(f{i}), outfile, 5e-3, show_NOKs)\r","        \r","    elseif strcmp(f{i}, 'valids')\r","        fprintf(outfile, '\\n');\r","        fprintf(outfile, [f{i},' (Delta expected to be 0)\\n']);\r","        sub_assertion(kpi_model.(f{i}), kpi_LIS.(f{i}), outfile, 5e-24, show_NOKs)\r","        \r","    else\r","        fprintf(outfile, '\\n');\r","        fprintf(outfile, [f{i},' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","        sub_assertion(kpi_model.(f{i}), kpi_LIS.(f{i}), outfile, tol, show_NOKs)\r","    end\r","end\r","\r","end\r","\r","\r","function sub_assert_uncontrolled_KPI(kpi_model, kpi_LIS, outfile, conf, tol, show_NOKs)\r","\r","if conf.ERO_present\r","    f = {'overlay', 'input_clamp', 'intrafield'};\r","else\r","    f = {'overlay', 'intrafield'};\r","end\r","\r","fprintf(outfile, ' \\n\\n\\n');\r","fprintf(outfile, 'Uncontrolled\\n');\r","\r","for i = 1:length(f)\r","    \r","    if strcmp(f{i}, 'intrafield')\r","        [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS]...\r","            = sub_select_Kfac(kpi_model.(f{i}), kpi_LIS.(f{i}));\r","        fprintf(outfile, '\\n');\r","        \r","        fprintf(outfile, ['Intrafield Metrics',' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","        sub_assertion(kpi3_model, kpi3_LIS, outfile, tol, show_NOKs);\r","        \r","        fprintf(outfile, ' \\n');\r","        fprintf(outfile, ['K factors (k7 to k12)',' (Delta expected to be less than : 5e-9)\\n']);\r","        sub_assertion(kpi1_model, kpi1_LIS, outfile, 5e-9, show_NOKs)\r","        \r","        fprintf(outfile, ' \\n');\r","        fprintf(outfile, ['K factors (k13 to k20)',' (Delta expected to be less than : 5e-7)\\n']);\r","        sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-7, show_NOKs)\r","        \r","        if conf.intraf_actuation_order == 5  %5th order actuation\r","            [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS]...\r","                = sub_select_Kfac2(kpi_model.(f{i}), kpi_LIS.(f{i}));\r","            fprintf(outfile, ' \\n');\r","            \r","            fprintf(outfile, [ 'K factors (k22, k24, k25, k26, k27, k29)',...\r","                ' (Delta expected to be less than : 5e-5)\\n']);\r","            sub_assertion(kpi1_model, kpi1_LIS, outfile, 5e-5, show_NOKs)\r","            \r","            fprintf(outfile, ' \\n');\r","            fprintf(outfile,[ 'K factors (k32, k34, k36, k37, k39, k41)',...\r","                ' (Delta expected to be less than : 5e-3)\\n']);\r","            sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-3, show_NOKs)\r","            \r","            fprintf(outfile, ' \\n');\r","            fprintf(outfile,[  'K factors (k46, k48, k51)',...\r","                ' (Delta expected to be less than : 5e-1)\\n']);\r","            sub_assertion(kpi3_model, kpi3_LIS, outfile, 5e-1, show_NOKs)\r","        end\r","    else\r","        fprintf(outfile, ' \\n');\r","        fprintf(outfile, [f{i},' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","        sub_assertion(kpi_model.(f{i}), kpi_LIS.(f{i}), outfile, tol, show_NOKs) \r","    end\r","end\r","\r","end\r","\r","\r","function sub_assert_applied_corr_KPI(kpi_model, kpi_LIS, outfile, tol, show_NOKs)\r","\r","f = 'waferheating';\r","fprintf(outfile, ' \\n\\n\\n');\r","fprintf(outfile,'Applied correction\\n');\r","\r","fprintf(outfile, [f,' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","sub_assertion(kpi_model.(f), kpi_LIS.(f), outfile, tol, show_NOKs)\r","\r","if isfield(kpi_model, 'InlineSDM')\r","    fprintf(outfile, ' \\n');\r","    fprintf(outfile, ['InlineSDM',' (Delta expected to be 0)\\n']);\r","    sub_assertion(kpi_model.InlineSDM, kpi_LIS.InlineSDM, outfile, 5e-24, show_NOKs)\r","    \r","else\r","    sub_warning('No Inline SDM KPIs found in MATLAB KPI struct, use sbcrep to include them', outfile)\r","end\r","\r","end\r","\r","\r","function sub_assert_correction_KPI(kpi_model, kpi_LIS, outfile, conf, tol, show_NOKs)\r","\r","corr_fields = {'delta_filtered', 'total_filtered','delta_unfiltered', 'total_unfiltered'};\r","fc          = {'waferheating','mirror','bao','intra_raw',conf.intraf_fieldname,'k_factors','total'};%correction fields\r","\r","% switch based on SUSD and KA\r","if conf.susd_correction_enabled\r","    fc          = {'waferheating','susd','mirror','bao','intra_raw',conf.intraf_fieldname,'k_factors','total'};%correction fields\r","    \r","    if conf.KA_correction_enabled\r","        fc      = {'waferheating','susd','mirror','grid','bao','intra_raw',conf.intraf_fieldname,'k_factors','total'};%correction fields\r","    end\r","end\r","\r","if conf.KA_correction_enabled\r","    fc          = {'waferheating','mirror','grid','bao','intra_raw',conf.intraf_fieldname,'k_factors','total'};%correction fields\r","    \r","    if conf.susd_correction_enabled\r","        fc      = {'waferheating','susd','mirror','grid','bao','intra_raw',conf.intraf_fieldname,'k_factors','total'};%correction fields\r","    end\r","end\r","\r","fprintf(outfile, '\\n\\n\\n');\r","fprintf(outfile, 'Correction Magnitude\\n');\r","\r","\r","for ifield=1:length(corr_fields)\r","    \r","    for ii =  1:length(fc)\r","        \r","        if strcmp(fc{ii},'waferheating')\r","            fprintf(outfile, '\\n');\r","            fprintf(outfile, [corr_fields{ifield}, '\\n' , fc{ii},...\r","                ' (Delta expected to be less than : 5e-4)\\n']);\r","            sub_assertion(kpi_model.(corr_fields{ifield}).(fc{ii}),...\r","                kpi_LIS.(corr_fields{ifield}).(fc{ii}), outfile, 5e-4, show_NOKs)\r","            \r","        elseif strcmp(fc{ii},'bao')\r","            \r","            [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS] = ...\r","                sub_select_BAO(kpi_model.(corr_fields{ifield}).(fc{ii}),kpi_LIS.(corr_fields{ifield}).(fc{ii}));\r","            fprintf(outfile, '\\n');\r","            \r","            fprintf(outfile, [corr_fields{ifield}, '\\n' ,...\r","                'BAO metrics and Translation',' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","            sub_assertion(kpi1_model, kpi1_LIS, outfile, tol, show_NOKs);\r","            \r","            fprintf(outfile, '\\n');\r","            fprintf(outfile, [corr_fields{ifield}, '\\n' ,...\r","                'BAO Parameters except Translation',' (Delta expected to be less than : 5e-10)\\n']);\r","            sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-10, show_NOKs);\r","            \r","        elseif strcmp(fc{ii},conf.intraf_fieldname)\r","            if isfield(kpi_model.(corr_fields{ifield}),conf.intraf_fieldname)...\r","                    && isfield(kpi_LIS.(corr_fields{ifield}),conf.intraf_fieldname)\r","                fprintf(outfile, '\\n');\r","                fprintf(outfile, [corr_fields{ifield}, '\\n' , fc{ii},...\r","                    ' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","                sub_assertion(kpi_model.(corr_fields{ifield}).(fc{ii}),...\r","                    kpi_LIS.(corr_fields{ifield}).(fc{ii}), outfile, tol, show_NOKs)\r","            else\r","                sub_warning('18par/33par correction metrics missing from kpi_struct1', outfile)\r","            end\r","            \r","            \r","        elseif strcmp(fc{ii}, 'k_factors')\r","            [kpi1_model, kpi1_LIS,kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS] =...\r","                sub_select_Kfac(kpi_model.(corr_fields{ifield}).(fc{ii}),kpi_LIS.(corr_fields{ifield}).(fc{ii}));\r","            fprintf(outfile, '\\n');\r","            \r","            fprintf(outfile, [corr_fields{ifield}, '\\n' , 'K factor Metrics',...\r","                ' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","            sub_assertion(kpi3_model, kpi3_LIS, outfile, tol, show_NOKs)\r","            \r","            fprintf(outfile, '\\n');\r","            fprintf(outfile, [corr_fields{ifield}, '\\n' , 'K factors (k7 to k12)',...\r","                ' (Delta expected to be less than : 5e-9)\\n']);\r","            sub_assertion(kpi1_model, kpi1_LIS, outfile, 5e-9, show_NOKs);\r","            \r","            fprintf(outfile, '\\n');\r","            fprintf(outfile, [corr_fields{ifield}, '\\n' , 'K factors (k13 to k20)',...\r","                ' (Delta expected to be less than : 5e-7)\\n']);\r","            sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-7, show_NOKs);\r","            \r","            if conf.intraf_actuation_order == 5  %5th order acutation\r","                [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS] =...\r","                    sub_select_Kfac2(kpi_model.(corr_fields{ifield}).(fc{ii}),kpi_LIS.(corr_fields{ifield}).(fc{ii}));\r","                fprintf(outfile, '\\n');\r","                fprintf(outfile,[corr_fields{ifield}, ' ' ,...\r","                    'K factors (k22, k24, k25, k26, k27, k29)',...\r","                    ' (Delta expected to be less than : 5e-5)\\n']);\r","                sub_assertion(kpi1_model, kpi1_LIS, outfile, 5e-5, show_NOKs)\r","                \r","                fprintf(outfile, '\\n');\r","                fprintf(outfile,[corr_fields{ifield}, ' ' ,...\r","                    'K factors (k32, k34, k36, k37, k39, k41)',...\r","                    ' (Delta expected to be less than : 5e-3)\\n']);\r","                sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-3, show_NOKs)\r","                \r","                fprintf(outfile, '\\n');\r","                fprintf(outfile,[corr_fields{ifield}, ' ' ,...\r","                    'K factors (k46, k48, k51)',' (Delta expected to be less than : 5e-1)\\n']);\r","                sub_assertion(kpi3_model, kpi3_LIS, outfile, 5e-1, show_NOKs)\r","            end\r","            \r","        else\r","            fprintf(outfile, '\\n');\r","            fprintf(outfile, [corr_fields{ifield}, '\\n' , fc{ii},...\r","                ' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","            sub_assertion(kpi_model.(corr_fields{ifield}).(fc{ii}),...\r","                kpi_LIS.(corr_fields{ifield}).(fc{ii}), outfile, tol, show_NOKs)\r","        end\r","    end\r","    \r","    if  conf.ERO_present && strcmp(corr_fields{ifield}, 'total_filtered')\r","        fprintf(outfile, '\\n');\r","        fprintf(outfile, [corr_fields{ifield}, '\\n' , 'Modelled clamp',...\r","            ' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","        sub_assertion(kpi_model.(corr_fields{ifield}).clamp,...\r","            kpi_LIS.(corr_fields{ifield}).clamp, outfile, tol, show_NOKs)\r","    end\r","end\r","\r","% Delta monitoring general KPIs\r","fprintf(outfile, '\\n\\n\\n');\r","fprintf(outfile, 'Delta Monitoring General\\n');\r","\r","\r","[kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS, ~, ~] = sub_select_Kfac(kpi_model.monitor.intra_delta, kpi_LIS.monitor.intra_delta);\r","fprintf(outfile, '\\n');\r","\r","fprintf(outfile, [corr_fields{ifield}, '\\n' , 'SUSD Translation Y',' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","sub_assertion(kpi_model.monitor.susd, kpi_LIS.monitor.susd, outfile, tol, show_NOKs)\r","\r","fprintf(outfile, '\\n');\r","fprintf(outfile, [corr_fields{ifield}, '\\n' , 'K factors (k7 to k12)',' (Delta expected to be less than : 5e-9)\\n']);\r","sub_assertion(kpi1_model, kpi1_LIS, outfile, 5e-9, show_NOKs)\r","\r","fprintf(outfile, '\\n');\r","fprintf(outfile, [corr_fields{ifield}, '\\n' , 'K factors (k13 to k20)',' (Delta expected to be less than : 5e-7)\\n']);\r","sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-7, show_NOKs)\r","\r","if conf.intraf_actuation_order == 5  %5th order acutation\r","    [kpi1_model, kpi1_LIS,kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS] = sub_select_Kfac2(kpi_model.monitor.intra_delta, kpi_LIS.monitor.intra_delta);\r","    fprintf(outfile, '\\n');\r","    fprintf(outfile,[corr_fields{ifield}, ' ' , 'K factors (k22, k24, k25, k26, k27, k29)',' (Delta expected to be less than : 5e-5)\\n']);\r","    sub_assertion(kpi1_model, kpi1_LIS, outfile, 5e-5, show_NOKs)\r","    \r","    fprintf(outfile, '\\n');\r","    fprintf(outfile,[corr_fields{ifield}, ' ' , 'K factors (k32, k34, k36, k37, k39, k41)',' (Delta expected to be less than : 5e-3)\\n']);\r","    sub_assertion(kpi2_model, kpi2_LIS, outfile, 5e-3, show_NOKs)\r","    \r","    fprintf(outfile, '\\n');\r","    fprintf(outfile,[corr_fields{ifield}, ' ' , 'K factors (k46, k48, k51)',' (Delta expected to be less than : 5e-1)\\n']);\r","    sub_assertion(kpi3_model, kpi3_LIS, outfile, 5e-1, show_NOKs)\r","end\r","\r","end\r","\r","\r","function sub_assert_residue_KPI(kpi_struct1, kpi_struct2, outfile, conf, tol, show_NOKs)\r","\r"," % Correction Quality KPIs\r","kpi_LIS = kpi_struct2.residue;\r","kpi_model = kpi_struct1.residue;\r","f ={'overlay','interfield','intrafield'}; %residue fields\r","fprintf(outfile, '\\n\\n\\n');\r","fprintf(outfile, 'Correction Quality\\n');\r","for ifield=1:length(f)\r","    fprintf(outfile, '\\n');\r","    fprintf(outfile, [f{ifield},' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","    sub_assertion(kpi_model.(f{ifield}), kpi_LIS.(f{ifield}), outfile, tol, show_NOKs);\r","end\r","\r","% Intraf 18par/33par NCE KPIs\r","kpi_LIS = kpi_struct2.(conf.intraf_nce_fieldname);\r","kpi_model = kpi_struct1.(conf.intraf_nce_fieldname);\r","f = fieldnames(kpi_LIS);\r","fprintf(outfile, '\\n');\r","fprintf(outfile, [conf.intraf_nce_fieldname,'\\n']);\r","for ifield=1:length(f)\r","    fprintf(outfile, '\\n');\r","    fprintf(outfile, [f{ifield},' (Delta expected to be less than : ' ,num2str(tol), ')\\n']);\r","    sub_assertion(kpi_model.(f{ifield}), kpi_LIS.(f{ifield}), outfile, tol, show_NOKs);\r","end\r","\r","end\r","\r","\r","function [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS] = sub_select_BAO(kpi_model, kpi_LIS)\r","\r","Bao_find ={'3std','997','m3s','max','translation'};\r","\r","fd =fieldnames(kpi_model);\r","a = contains(fd, Bao_find);\r","new_fd =fd(a);\r","\r","for ifield=1:length(new_fd)\r","    kpi1_model.(new_fd{ifield}) = kpi_model.(new_fd{ifield});\r","    kpi1_LIS.(new_fd{ifield}) = kpi_LIS.(new_fd{ifield});\r","end\r","\r","kpi2_model      = rmfield(kpi_model,new_fd);\r","kpi2_LIS        = rmfield(kpi_LIS,new_fd);\r","end\r","\r","\r","function  [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS] = sub_select_Kfac(kpi_model, kpi_LIS)\r","\r","K_factors_find1 ={ 'k7','k8','k9','k10','k11','k12'};\r","K_factors_find2 ={ 'k13','k14','k15','k16','k17','k18','k19','k20'};\r","\r","fd =fieldnames(kpi_model);\r","a = contains(fd,  K_factors_find1);\r","b = contains(fd,  K_factors_find2);\r","c = contains(fd, 'ovl_k');\r","new_fd1 = fd(a);\r","new_fd2 = fd(b);\r","new_fd3 = fd(c);\r","\r","for i=1:length(new_fd1)\r","    kpi1_model.(new_fd1{i}) = kpi_model.(new_fd1{i});\r","    kpi1_LIS.(new_fd1{i}) = kpi_LIS.(new_fd1{i});\r","end\r","\r","for i=1:length(new_fd2)\r","    kpi2_model.(new_fd2{i}) = kpi_model.(new_fd2{i});\r","    kpi2_LIS.(new_fd2{i}) = kpi_LIS.(new_fd2{i});\r","end\r","\r","kpi3_model =  rmfield(kpi_model,new_fd3);\r","kpi3_LIS   =  rmfield(kpi_LIS,new_fd3);\r","end\r","\r","\r","function  [kpi1_model, kpi1_LIS, kpi2_model, kpi2_LIS, kpi3_model, kpi3_LIS] = sub_select_Kfac2(kpi_model, kpi_LIS)\r","\r","K_factors_find1 ={ 'k22','k24','k25','k26','k27','k29'};\r","K_factors_find2 ={ 'k32','k34','k36','k37','k39','k41'};\r","K_factors_find3 ={ 'k46','k48','k51'};\r","\r","fd =fieldnames(kpi_model);\r","a = contains(fd,  K_factors_find1);\r","b = contains(fd,  K_factors_find2);\r","c = contains(fd,  K_factors_find3);\r","new_fd1 = fd(a);\r","new_fd2 = fd(b);\r","new_fd3 = fd(c);\r","\r","for i=1:length(new_fd1)\r","    kpi1_model.(new_fd1{i}) = kpi_model.(new_fd1{i});\r","    kpi1_LIS.(new_fd1{i}) = kpi_LIS.(new_fd1{i});\r","end\r","\r","for i=1:length(new_fd2)\r","    kpi2_model.(new_fd2{i}) = kpi_model.(new_fd2{i});\r","    kpi2_LIS.(new_fd2{i}) = kpi_LIS.(new_fd2{i});\r","end\r","\r","for i=1:length(new_fd3)\r","    kpi3_model.(new_fd3{i}) = kpi_model.(new_fd3{i});\r","    kpi3_LIS.(new_fd3{i}) = kpi_LIS.(new_fd3{i});\r","end\r","\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[21,22,25,27,28,29,30,31,32,33,35,36,40,41,45,46,50,51,52,53,54,56,59,60,61,62,66,67,68,69,74,75,76,77,82,83,84,85,89,90,91,92,95,96,105,106,107,108,111,112,113,114,117,118,119,120,121,122,123,124,127,128,129,130,137,138,139,140,141,148,149,150,151,152,153,154,163,164,165,166,169,170,171,173,175,176,177,178,180,181,182,183,185,186,187,188,197,198,199,200,203,204,206,208,209,210,211,213,214,216,217,218,220,221,222,224,225,226,227,229,231,233,234,236,238,239,241,243,244,245,246,255,256,257,259,260,262,263,264,265,267,268,276,277,280,281,283,284,288,289,291,292,296,297,300,302,304,305,306,308,309,311,313,314,315,317,318,319,321,322,324,326,327,328,329,330,331,332,333,334,335,339,340,341,342,344,345,346,348,349,351,353,354,356,358,359,360,361,362,365,367,368,371,373,374,376,379,380,381,382,383,384,388,389,390,391,392,393,398,399,402,403,405,406,408,409,410,412,413,414,416,417,418,419,420,422,423,424,426,427,428,437,438,439,440,441,442,443,444,445,449,450,451,452,453,454,455,456,457,465,467,468,469,471,472,473,476,477,483,484,486,487,488,489,490,491,492,494,495,496,499,500,501,504,505,511,512,513,515,516,517,518,519,520,521,523,524,525,528,529,530,533,534,535],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}