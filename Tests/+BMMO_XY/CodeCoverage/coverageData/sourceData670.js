var sourceData670 = {"FileContents":["function test_suite = test_bmmo_interp2_dxdydz\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","% first testset: interpolate 8x8 input grid to 4x4\r","function test_bmmo_interp2_case1 %#ok<DEFNU>\r","% make an input layout\r","ilsize = 8;\r","[ilayout.meshgrid.x, ilayout.meshgrid.y] = meshgrid(1:ilsize, 1:ilsize);\r","ilayout.idx = 1:(ilsize*ilsize);\r","ilayout.idx = reshape(ilayout.idx, [ilsize, ilsize]);\r","% make an output layout\r","olsize = 4;\r","olayout.n = olsize * olsize;\r","[olayout.meshgrid.x, olayout.meshgrid.y] = meshgrid(1.5:2:7.5, 1.5:2:7.5);\r","olayout.idx = 1:olayout.n;\r","olayout.idx = reshape(olayout.idx, [olsize, olsize]);\r","% make an input mesh\r","% see illustration in test_bmmo_gauss_interp_r13\r","inx = ones(4);\r","inx(2:3, 2:3) = 2;\r","inx = repmat(inx, 2, 2);\r","input_mesh.dx = inx;\r","input_mesh.dy = inx;\r","% make the options structure\r","options.gauss_radius = 0.03;\r","options.interp_type = 'linear';\r","[dx, dy] = bmmo_interp2_dxdydz(input_mesh, ilayout, olayout, options);\r","% test the output\r","assert(isequal(dx, dy), 'isequal(dx, dy)');\r","dxl = interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, input_mesh.dx, olayout.meshgrid.x, olayout.meshgrid.y, 'linear');\r","linindex = (1:olayout.n)';\r","dxl = dxl(linindex);\r","assert(isequal(dx, dxl), 'isequal(dx, dxl)');\r","% second testset: interpolate to non-square grid with zeros in layout index\r","function test_bmmo_interp2_case2 %#ok<DEFNU>\r","% Input grid:\r","%       1.5   3.5   5.5\r","% 1      0     1     0\r","% 2.5    1     2     1\r","% 4      2     4     2\r","% 5.5    1     2     1\r","% 7      0     1     0\r","xs = 1.5:2:5.5;\r","ys = 1:1.5:7;\r","[ilayout.meshgrid.x, ilayout.meshgrid.y] = meshgrid(xs, ys);\r","inx = ones(size(ilayout.meshgrid.x));\r","inx(1,:) = [0,1,0];\r","inx(2,:) = [1,2,1];\r","inx(3,:) = [2,4,2];\r","inx(4,:) = [1,2,1];\r","inx(5,:) = [0,1,0];\r","input_mesh.dx = inx;\r","input_mesh.dy = inx;\r","% Output map:\r","%    1   2   3   4   5   6\r","% 1  .   .   5  13   .   .\r","% 2  .   .   6  14   .   .\r","% 3  .   .   7  15   .   .\r","% 4  1   3   8  16  21  23\r","% 5  2   4   9  17  22  24\r","% 6  .   .  10  18   .   .\r","% 7  .   .  11  19   .   .\r","% 8  .   .  12  20   .   .\r","olayout.n = 24;\r","[olayout.meshgrid.x, olayout.meshgrid.y] = meshgrid(1:6, 1:8);\r","olayout.idx = zeros(size(olayout.meshgrid.x));\r","olayout.idx(4,:) = [1 3 8 16 21 23];\r","olayout.idx(5,:) = [2 4 9 17 22 24];\r","olayout.idx(:,3) = (5:12)';\r","olayout.idx(:,4) = (13:20)';\r","% make the options structure\r","options.gauss_radius = 0.03;\r","options.interp_type = 'linear';\r","[dx, dy] = bmmo_interp2_dxdydz(input_mesh, ilayout, olayout, options);\r","% check that the output is the right length\r","assert(length(dx) == olayout.n, 'length(dx) == olayout.n');\r","% make a 6*8 grid of the output, compare with the output of interp2\r","tmpidx = olayout.idx;\r","tlidx = olayout.idx > 0;\r","tmpidx(~tlidx) = 1;\r","dxtmp = dx(tmpidx);\r","dxtmp(~tlidx) = NaN;\r","dxo = interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, input_mesh.dx, olayout.meshgrid.x, olayout.meshgrid.y, 'linear');\r","assert(isequalwithequalnans(dxo(tlidx), dxtmp(tlidx)), 'isequalwithequalnans(dxo(tlidx), dxtmp(tlidx))')"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[2,3,4,5,6,11,12,13,14,16,17,18,19,20,23,24,25,26,27,29,30,31,33,34,35,36,37,47,48,49,50,51,52,53,54,55,56,57,68,69,70,71,72,73,74,76,77,78,80,82,83,84,85,86,87,88],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}