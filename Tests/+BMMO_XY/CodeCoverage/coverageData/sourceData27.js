var sourceData27 = {"FileContents":["function mlo = bmmo_SUSD_SBC_fingerprint(mli, fingerprint, options)\r","% function mlo = bmmo_SUSD_SBC_fingerprint(mli, fingerprint, options)\r","%\r","% This function returns an ml structure corresponding to the input SBC\r","% SUSD fingerprint\r","% \r","% Input:\r","%  mli: input ml structure\r","%  fingerprint: SUSD fingerprint (1x1 struct array)\r","%  options: option structure containing:\r","%         Scan_direction during exposure\r","%         chuck_usage.chuck_id_used\r","%         chuck_usage.chuck_id\r","% \r","% Output:\r","%  mlo: output ml structure containing the SUSD fingerprint in the same layout as mli\r","%\r","% For details of the model and definitions of in/out interfaces, refer to\r","% D000810611 EDS BMMO NXE drift control model\r","\r","mlo = ovl_combine_linear(mli, 0);\r","SU_INDEX = 2;\r","\r","for ichuck = options.chuck_usage.chuck_id_used\r","    % for each wafer on this chuck, add the SUSD fingerprint\r","    wafers_this_chuck = find(options.chuck_usage.chuck_id == ichuck);\r","    wafers_this_chuck = reshape(wafers_this_chuck, 1, []); % make horizontal for R13 compatibility\r","    for iwafer = wafers_this_chuck\r","        for ilayer = 1:length(mli.layer)\r","            ml_susd = bmmo_SUSD_fingerprint(ovl_get_subset(mlo, ilayer, iwafer), options.Scan_direction(:, ilayer), fingerprint(ichuck*SU_INDEX).TranslationY);\r","            mlo.layer(ilayer).wr(iwafer).dx = ml_susd.layer.wr.dx;\r","            mlo.layer(ilayer).wr(iwafer).dy = ml_susd.layer.wr.dy;\r","        end\r","    end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[21,22,24,26,27,28,29,30,31,32],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,643,643,0,643,0,1254,1254,1254,3306,3306,3306,3306,0,0,0,0]}}