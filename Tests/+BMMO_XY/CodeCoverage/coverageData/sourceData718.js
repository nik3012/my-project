var sourceData718 = {"FileContents":["classdef testHocModelDefault < matlab.unittest.TestCase\r","    \r","    properties\r","        sut\r","        configuration\r","    end\r","    \r","    methods (TestClassSetup)\r","        function setup(tc)\r","            tc.configuration = bl3_3600D_model_configuration();\r","            tc.sut = bmmo_HocModelDefault(tc.configuration);\r","        end\r","    end\r","    \r","    methods (Test)\r","        function testCreation(tc)\r","            tc.sut;\r","        end\r","        \r","        function testRunWithoutError(tc)\r","            tc.sut.run();\r","        end\r","        \r","        function testConstructorMlDisto(tc)\r","            mlDisto = tc.generateRandomMlDisto();\r","            tc.configuration = bmmo_3600D_model_configuration();\r","            tc.sut = bmmo_HocModelDefault(tc.configuration, mlDisto);\r","            bmmo_assert_equal(tc.sut.mlDistoIn, mlDisto)\r","        end\r","        \r","        function testConstructorMlDistoMlWafer(tc)\r","            mlDisto = tc.generateRandomMlDisto();\r","            mlWafer = tc.generateRandomMlWafer();\r","            \r","            tc.configuration = bmmo_3600D_model_configuration();\r","            tc.sut = bmmo_HocModelDefault(...\r","                tc.configuration, mlDisto, mlWafer);\r","            \r","            bmmo_assert_equal(tc.sut.mlDistoIn, mlDisto)\r","            bmmo_assert_equal(tc.sut.mlWaferIn, mlWafer)\r","        end\r","        \r","        function testConstructorMlDistoMlWaferChuckId(tc)\r","            mlDisto = tc.generateRandomMlDisto();\r","            mlWafer = tc.generateRandomMlWafer();\r","            chuckId = [2, 1];\r","            \r","            tc.configuration = bmmo_3600D_model_configuration();\r","            tc.sut = bmmo_HocModelDefault(...\r","                tc.configuration, mlDisto, mlWafer, chuckId);\r","            \r","            bmmo_assert_equal(tc.sut.mlDistoIn, mlDisto)\r","            bmmo_assert_equal(tc.sut.mlWaferIn, mlWafer)\r","            bmmo_assert_equal(tc.sut.chuckId, chuckId)\r","        end\r","        \r","        function testDefaultConfigOutput(tc)\r","            tc.compareModelOutputToOldModel();\r","        end\r","        \r","        function testThirdOrderOutput(tc)\r","            tc.configuration = bmmo_3350B_model_configuration();\r","            tc.sut = bmmo_HocModelDefault(tc.configuration);\r","            \r","            sdmModel.filter      = 'none';\r","            sdmModel.actuation   = '3400B';\r","            sdmModel.poly2spline = 0;\r","            sdmModel.playback    = 0;\r","                \r","            tc.compareModelOutputToOldModel(sdmModel);\r","        end\r","        \r","        function testFifthOrderOutput(tc)\r","            tc.configuration = bmmo_3400C_model_configuration();\r","            tc.sut = bmmo_HocModelDefault(tc.configuration);\r","            \r","            sdmModel.filter      = 'none';\r","            sdmModel.actuation   = '3400C';\r","            sdmModel.poly2spline = 0;\r","            sdmModel.playback    = 0;\r","            \r","            tc.compareModelOutputToOldModel(sdmModel);\r","        end\r","    end\r","    \r","    methods\r","        function compareModelOutputToOldModel(tc, sdmModel)\r","            if nargin < 2\r","                sdmModel.filter      = 'spline';\r","                sdmModel.actuation   = '3600D';\r","                sdmModel.poly2spline = 0;\r","                sdmModel.playback    = 0;\r","            end\r","            mlDisto = tc.generateRandomMlDisto();\r","            tc.sut.mlDistoIn = mlDisto;\r","            tc.sut.calcReport();\r","            mlHocResSrrNew = subUpdateMlFormat(tc.sut.report.mlHocResSrr);\r","            mlHocResNew    = subUpdateMlFormat(tc.sut.report.mlHocRes);\r","            mlHocCorrNew   = subUpdateMlFormat(tc.sut.report.mlHocCorr);\r","            mlHocFadNew  = subUpdateMlFormat(tc.sut.report.mlHocFad);\r","            output = tc.runOldHocModel(mlDisto, sdmModel);\r","            \r","            for iChuck = 1:2\r","                bmmo_assert_equal(ovl_get_wafers(mlHocResNew, iChuck),...\r","                    output.mlHocRes(iChuck))\r","                bmmo_assert_equal(ovl_get_wafers(mlHocResSrrNew, iChuck), ...\r","                    output.mlHocResSrr(iChuck))\r","                bmmo_assert_equal(ovl_get_wafers(mlHocCorrNew, iChuck), ...\r","                    output.mlHocCorr(iChuck))\r","                bmmo_assert_equal(ovl_get_wafers(mlHocFadNew, iChuck), ...\r","                    output.mlHocFad(iChuck))\r","            end\r","        end\r","    end\r","    \r","    methods (Static)\r","        function mlDisto = generateRandomMlDisto\r","            mliTemplate = ovl_average_fields(ovl_create_dummy(...\r","                '13x19', 'nlayer', 1, 'nwafer', 2));\r","            options = bl3_default_options_structure;\r","            mlDisto = bmmo_generate_INTRAF(mliTemplate, options);\r","        end\r","        \r","        function mlWafer = generateRandomMlWafer\r","            mliTemplate = ...\r","                ovl_create_dummy('13x19', 'nlayer', 1, 'nwafer', 2);\r","            options = bl3_default_options_structure;\r","            mlWafer = bmmo_generate_INTRAF(mliTemplate, options);\r","        end\r","        \r","        function outputMls = runOldHocModel(mlDisto, sdmModel)\r","            mlAvgField = ovl_average(mlDisto);\r","            mlAvgScanInt = ovl_scan_integrate(mlAvgField);\r","            mlHocInput = ovl_sub(mlDisto, mlAvgScanInt);\r","            \r","            for iChuck = 1:2\r","                [mlr, mlc, mlf, mlsrr] = ...\r","                    HOCModel_new(ovl_get_wafers(mlHocInput, iChuck), sdmModel);\r","                \r","                outputMls.mlHocRes(iChuck)    = subUpdateMlFormat(mlr);\r","                outputMls.mlHocResSrr(iChuck) = subUpdateMlFormat(mlsrr);\r","                outputMls.mlHocCorr(iChuck)   = subUpdateMlFormat(mlc);\r","                outputMls.mlHocFad(iChuck)    = subUpdateMlFormat(mlf);\r","            end\r","        end\r","    end\r","end\r","\r","\r","function mlo = subUpdateMlFormat(mli)\r","mlo = subUpdateTlgName(mli);\r","\r","if isfield(mlo.layer.wr, 'dz')\r","    mlo.layer.wr = rmfield(mlo.layer.wr, 'dz');\r","end\r","if isfield(mlo, 'info')\r","    mlo = rmfield(mlo, 'info');\r","end\r","end\r","\r","function mlo = subUpdateTlgName(mli)\r","tlgname = 'Created from CetExpMulti object';\r","mlo = mli;\r","mlo.tlgname = tlgname;\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[10,11,17,21,25,26,27,28,32,33,35,36,37,39,40,44,45,46,48,49,50,52,53,54,58,62,63,65,66,67,68,70,74,75,77,78,79,80,82,88,89,90,91,92,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,118,120,121,125,126,127,128,132,133,134,136,137,138,140,141,142,143,151,153,154,156,157,162,163,164],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}