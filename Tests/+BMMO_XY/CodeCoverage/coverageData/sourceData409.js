var sourceData409 = {"FileContents":["function [mlo, timestamp] = bmmo_convert_mmo_tlg(tlg, exp_tlg, adelwhc, nosub)\r","% function mlo = bmmo_convert_mmo_tlg(tlg, exp_tlg, mdl)\r","%\r","% Convert ATP-MMO testlog to bmmo input structure, optionally adding exposure info (from exposure testlog) and \r","% WH K-factors (from ADELwaferHeatingCorrectionsReport)\r","%\r","% Input:\r","%   tlg: full path of WEC-corrected ATP-MMO testlog\r","%\r","% Optional:\r","%   exp_tlg: full path of exposure testlog (if not provided, field exposure\r","%       order will be taken from the field order in tlg, which is not\r","%       necessarily accurate\r","%   mdl: full path of MDL containing WH k-factors. If not provided, a zero\r","%       WH fingerprint will be provided\r","%\r","% Output: mlo: testlog converted to valid bmmo-nxe input format\r","%\r","% 20160916 SBPR Creation\r","% 20191022 SELR Read in scan direction and chuck usage from exp_tlg,\r","%               several fixes\r","\r","if nargin < 3\r","    read_adelwhc = false;\r","else\r","    read_adelwhc = true;\r","end\r","\r","if nargin < 2\r","    read_exp = false;\r","else\r","    read_exp = true;\r","end\r","\r","if nargin < 4\r","    nosub = false;\r","end\r","\r","disp('Reading raw testlog');\r","% First read the testlog\r","ml_raw = ovl_read_testlog(tlg, 'info');\r","\r","try\r","    ml_raw = ovl_apply_rec(ml_raw);\r","catch\r","    warning('Could not perform REC, please do so manually if necessary')\r","end\r","mlt = rmfield(ml_raw, 'info');\r","\r","% Convert to generic BMMO-NXE input format\r","% NB this assumes default chuck order\r","mlo = bmmo_convert_generic_ml(mlt);\r","\r","% If provided, read the exposure testlog\r","if read_exp\r","    disp('Reading exposure testlog');\r","    ml_exp = ovl_read_testlog(exp_tlg, 'info');\r","    %[expinfo, expose_order] = bmmo_expinfo_from_tlg(ml_exp);\r","    mlo.expinfo = ml_exp.expinfo(2);\r","    mlo = ovl_get_fields(mlo, mlo.expinfo.map_fieldtoexp);\r","    mlo.expinfo.field_size = ml_exp.info.expo.lot.fieldsize{:};\r","    mlo.info.report_data.Scan_direction = mlo.expinfo.v;\r","    mlo.info.F.chuck_id = ml_exp.info.S.chuck_id;\r","    chucks_used = length(unique(mlo.info.F.chuck_id));\r","    if chucks_used == 2\r","        mlo.info.F.chuck_operation = 'USE_BOTH_CHUCK';\r","    elseif chucks_used < 2\r","        mlo.info.F.chuck_operation = 'ONE_CHUCK';\r","    end\r","end\r","\r","% Convert the exposure testlog to expinfo\r","if read_adelwhc\r","    disp('Reading WH data from ADELwaferHeatingCorrectionsReport');\r","    % If provided, read the WH K-factors from the ADELwhc file\r","    % convert to BMMO-NXE input format\r","    mlo = bmmo_kt_process_adelwhc_input(mlo, adelwhc);\r","\r","end\r","\r","formatstring = 'eee, dd MMM yyyy HH:mm:ss';\r","if ~read_exp\r","    if isfield(ml_raw.info, 'S')\r","        timestamp = datetime(ml_raw.info.S.date(1:length(formatstring)), 'InputFormat', formatstring);\r","    else\r","        timestamp = datetime(ml_raw.info.M.date(1:length(formatstring)), 'InputFormat', formatstring);\r","    end\r","else\r","    timestamp = datetime(ml_exp.info.S.date(1:length(formatstring)), 'InputFormat', formatstring);\r","end\r","\r","if ~nosub\r","    % convert to single-layer s2f\r","    mlo = ovl_sub_layers(mlo);   \r","    % single layer, so need full combined model\r","    mlo.configurable_options.combined_model_contents = {'MIX', 'MIY', 'INTRAF', 'INTERF', 'KA'};\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[23,24,25,26,29,30,31,32,35,36,39,41,43,44,45,46,48,52,55,56,57,59,60,61,62,63,64,65,66,67,68,73,74,77,81,82,83,84,85,86,88,89,92,94,96],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}