var sourceData515 = {"FileContents":["function ml = bmmo_kt_process_adeller_input(mli, adeller)\r","% function ml = bmmo_kt_process_adeller_input(mli, adeller)\r","%\r","% Given an ml structure, return the structure with added fields parsed from\r","% the given ADELler, as required by the BMMO-NXE drift control model\r","%\r","% Input\r","%   mli: standard input structure \r","%   adeller: full path of ADELler xml file\r","%\r","% Output\r","%   ml: input structure with added fields\r","%       ml.expinfo\r","%       ml.raw.expinfo\r","%       ml.info.report_data.FIWA_translation\r","%       ml.info.report_data.scan_direction\r","%       ml.info.F.machine_id\r","%       ml.info.F.chuck_id\r","%       ml.info.F.wafer_accepted\r","%       ml.info.F.exp_energy\r","%       ml.info.F.layer_id\r","%       ml.info.F.chuck_operation\r","%       ml.info.F.recipe\r","%       ml.info.F.image_size\r","%       ml.info.M.machine_type\r","%       ml.info.M.machine_id\r","%\r","% 20160411 SBPR Creation\r","\r","% initialise output\r","ml = mli;\r","\r","NM = 1e-9;\r","\r","% read adeller\r","if ischar(adeller)\r","    ler = xml_load(adeller);\r","else\r","    ler = adeller;\r","end\r","    \r","[expinfo, Scan_direction] = bmmo_kt_expinfo_from_ler(ler);\r","\r","[ml.expinfo, ml.info.report_data.Scan_direction] = bmmo_kt_expinfo_subset(ml, expinfo, Scan_direction);\r","\r","if isfield(ml, 'raw')\r","    ml.raw.expinfo = bmmo_kt_expinfo_subset(ml.raw, expinfo, Scan_direction);\r","end\r","\r","% Read FIWA translation \r","wafer_results = [ler.Results.WaferResultList.elt];\r","wa_results = [wafer_results.WaferAlignmentResult];\r","wa_results = [wa_results.Translation];\r","\r","ml.info.report_data.FIWA_translation.x = str2double({wa_results.X}) * NM;\r","ml.info.report_data.FIWA_translation.y = str2double({wa_results.Y}) * NM;\r","\r","% Read wafer accepted array \r","wa_accepted = {wafer_results.WaferResult};\r","map = strcmp(wa_accepted, 'Accepted');\r","for ia = 1:length(map)\r","   if(map(ia))\r","       wa_accepted{ia} = 'TRUE';\r","   else\r","       wa_accepted{ia} = 'FALSE';\r","   end\r","end\r","ml.info.F.wafer_accepted = wa_accepted;\r","\r","% Read chuck info array\r","ch_id = {wafer_results.ChuckId};\r","chuck_id = cell(1,length(ch_id));\r","for ic = 1:length(ch_id)\r","   if strcmp(ch_id{ic}, 'Waferstage chuck ID 1')\r","       chuck_id{ic} = 'CHUCK_ID_1';\r","   elseif strcmp(ch_id{ic}, 'Waferstage chuck ID 2')\r","       chuck_id{ic} = 'CHUCK_ID_2';\r","   end\r","end\r","ml.info.F.chuck_id = chuck_id;\r","\r","% Read exp_energy from exposure 1 wafer 1\r","ml.info.F.exp_energy = str2double(wafer_results(1).ImageResultList(1).elt.ExposureResultList(1).elt.EnergyTotal); \r","\r","ml.info.F.layer_id = ler.Input.LotSettings.LayerId;\r","\r","% Read chuck operation\r","ml.info.F.chuck_operation = 'USE_BOTH_CHUCK';\r","if strncmp(ler.Input.WaferSettings.WaferGenericSettings.ChuckDedicationMethod, 'Single', 6)\r","    ml.info.F.chuck_operation = 'USE_ONE_CHUCK';\r","end\r","\r","ml.info.F.recipe = ler.Input.LotSettings.ExposureRecipeId;\r","\r","MM = 1e-3;\r","ml.info.F.image_size.x = str2double(ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(1).elt.ImageSize.X) * MM;\r","ml.info.F.image_size.y = str2double(ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(1).elt.ImageSize.Y) * MM;\r","if isfield(ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(1).elt, 'ImageShift')\r","    ml.info.F.image_shift.x = str2double(ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(1).elt.ImageShift.X)* MM;\r","    ml.info.F.image_shift.y = str2double(ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(1).elt.ImageShift.Y)* MM;\r","end\r","\r","% Read machine data\r","ml.info.F.machine_id                = ler.Header.MachineID;\r","ml.info.M.machine_id                = ler.Header.MachineID;\r","ml.info.M.machine_type              = ler.Header.MachineType;\r","ml.info.F.machine_type              = ler.Header.MachineType;\r","\r","tret =  str2double({ler.Results.LotImageResultList(1).elt.ImageReticleResult.TransmissionFactorUsed}) ./ 100.0;\r","ml.info.report_data.Tret = mean(tret);\r",""],"CoverageData":{"CoveredLineNumbers":[31,33,36,37,42,44,46,51,52,53,55,56,59,60,61,62,63,68,71,72,73,74,75,76,77,80,83,85,88,89,93,95,96,97,98,99,100,104,105,106,107,109,110],"UnhitLineNumbers":[38,39,47,64,65,90],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,0,4,4,0,0,0,0,4,0,4,0,4,0,0,0,0,4,4,4,0,4,4,0,0,4,4,4,16,16,0,0,0,0,4,0,0,4,4,4,16,8,8,8,0,0,4,0,0,4,0,4,0,0,4,4,0,0,0,4,0,4,4,4,4,3,3,0,0,0,4,4,4,4,0,4,4,0]}}