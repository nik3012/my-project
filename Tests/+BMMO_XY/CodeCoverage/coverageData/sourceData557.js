var sourceData557 = {"FileContents":["function adel_struct = bmmo_find_adels(dir_name, adels_to_find, adel_fields)\r","% function adel_struct = bmmo_find_adels(dir_name)\r","%\r","% Find the a list of ADEL files in (unzipped) LCP/VCP output dir\r","%\r","% Input\r","%   dir_name: full path of directory containing ADEL files from LCP/VCP\r","%           BMMO-NXE job output\r","%\r","% Output\r","%   adel_struct: Structure containing the following fields (all strings):\r","%       adelmet: ADELmetrology file path\r","%       adeller: lot exposure report\r","%       adelsbcrep: sbc report\r","%       adelwhc: wh correction report\r","%       adelrec: REC file\r","%       adellcp: LCP/VCP job report\r","%       adelinv: invalidated data report\r","%       adelmcl: Multi-cycle lot report\r","%       adelwdm: waferdatamap file\r","%\r","% 20170131 SBPR updated for BOOST; made more generic\r","% 20190724 SELR option to specify ADEL to look for from input\r","% 20200917 ANBZ Updated for VCP, where MCL and Invalids ADEL\r","% files can be absent and Job report has a different filename\r","% 20201030 LUDU search for ADELwdm and add to struct\r","% 20201217 ANBZ search for ADELwfrgridNCE and add to struct\r","% 20210208 LUDU search for ADELsbcrepProtected and add to struct\r","\r","% Initialize invalids and MCL\r","adel_struct.adelinv        = [];\r","adel_struct.adelmcl        = [];\r","adel_struct.adelexp        = [];\r","adel_struct.adelwfrgridNCE = [];\r","\r","% Get ADEL file names from directory\r","dir_list = dir(dir_name);\r","allfiles = {dir_list.name};\r","\r","if nargin < 2\r","    % ADEL filenames to find\r","    adels_to_find = {'ADELmetrology', 'ADELler', 'ADELsbcOverlayDriftControlNxerep', ...\r","        'ADELwaferHeatingCorrectionsReport', 'ADELreticleErrorCorrection', 'ADELlpcJobReportBaseLinerMmoNxe'};\r","    % Fields in output structure (must match one-to-one with adels_to_find)\r","    adel_fields = {'adelmet', 'adeller', 'adelsbcrep', 'adelwhc', 'adelrec', 'adellcp'};\r","    \r","    % determine if its LIS (VCP) Job report\r","    if any(contains(allfiles, 'ADELbmmoOverlayJobReport'))\r","        adels_to_find{1,end} = 'ADELbmmoOverlayJobReport';\r","        disp('Parsing LIS ADELs:')\r","    else\r","        disp('Parsing OTAS ADELs:')\r","    end\r","    \r","    % check if ADELsubstrateInvalidatedData is present\r","    if any(contains(allfiles, 'ADELsubstrateInvalidatedData'))\r","        adels_to_find{1,end+1} = 'ADELsubstrateInvalidatedData';\r","        adel_fields{1,end+1} = 'adelinv';\r","    end\r","    % check if ADELmultiCycleLotControlrep is present\r","    if any(contains(allfiles, 'ADELmultiCycleLotControlrep'))\r","        adels_to_find{1,end+1} = 'ADELmultiCycleLotControlrep';\r","        adel_fields{1,end+1} = 'adelmcl';\r","    end\r","    % check if ADELexposeTrajectoriesReport is present\r","    if any(contains(allfiles, 'ADELexposureTrajectoriesReport'))\r","        adels_to_find{1,end+1} = 'ADELexposureTrajectoriesReport';\r","        adel_fields{1,end+1} = 'adelexp';\r","    end\r","        % check if ADELwaferGridResidualReport is present\r","    if any(contains(allfiles, 'ADELwaferGridResidualReport'))\r","        adels_to_find{1,end+1} = 'ADELwaferGridResidualReport';\r","        adel_fields{1,end+1} = 'adelwfrgridNCE';\r","    end\r","    % check if ADELwaferDataMap is present\r","    if any(contains(allfiles, 'ADELwaferDataMap'))\r","        adels_to_find{1,end+1} = 'ADELwaferDataMap';\r","        adel_fields{1,end+1} = 'adelwdm';\r","    end\r","    % check if ADELsbcOverlayDriftControlNxerepProtected is present\r","    if any(contains(allfiles, 'ADELsbcOverlayDriftControlNxerepProtected'))\r","        fd = find(contains(adels_to_find, 'ADELsbcOverlayDriftControlNxerep'));\r","        adels_to_find{1,fd} = 'ADELsbcOverlayDriftControlNxerepProtected';\r","    end\r","end\r","\r","\r","% consider xml files only\r","allfiles = allfiles(~isnan(cell2num(strfind(allfiles, '.xml'))));\r","% take only the current job report\r","jobrep_ids = find(contains(allfiles, 'ADELbmmoOverlayJobReport'));\r","if length(jobrep_ids) > 1\r","    allfiles =  sub_rmv_previous_jobrep(dir_name, allfiles, jobrep_ids);\r","end\r","% find if all the necessary ADEL files are present and copy the filepath\r","for ii = 1:length(adels_to_find)\r","    index = strncmp(adels_to_find{ii}, allfiles, length(adels_to_find{ii}));\r","    assert(length(find(index)) == 1, 'Error: unique %s not found in directory %s', adels_to_find{ii}, dir_name);\r","    adel_struct.(adel_fields{ii}) = [dir_name filesep allfiles{index}];\r","end\r","\r","\r","%% SUB FUNCTIONS\r","\r","function allfiles_out =  sub_rmv_previous_jobrep(dir_name, allfiles, jobrep_ids)\r","allfiles_out = allfiles;\r","\r","for i = 1:length(jobrep_ids)\r","     jobrep = xml_load([dir_name filesep allfiles_out{jobrep_ids(i)}]);\r","     creation_time(i) = bmmo_parse_adel_timestamp(jobrep.Header.CreateTime);\r","end\r","\r"," [~,min_id] = min(creation_time);\r","allfiles_out(jobrep_ids(min_id)) = [];\r","\r",""],"CoverageData":{"CoveredLineNumbers":[31,32,33,34,37,38,40,42,45,48,49,50,51,52,56,57,58,61,62,63,66,71,76,77,78,81,89,91,92,96,97,98,99],"UnhitLineNumbers":[67,68,72,73,82,83,93,106,108,109,110,113,114],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,4,4,0,4,0,4,0,0,4,0,0,4,2,2,2,2,0,0,0,4,2,2,0,0,4,2,2,0,0,4,0,0,0,0,4,0,0,0,0,4,4,4,0,0,4,0,0,0,0,0,0,0,4,0,4,4,0,0,0,4,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}