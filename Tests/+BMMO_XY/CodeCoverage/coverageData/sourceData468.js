var sourceData468 = {"FileContents":["classdef bmmo_SelfCorrectTsActuation < handle\r","    %% bmmo_SelfCorrectTsActuation  BMMO NXE & BL3 TS actuation based Self- Correction model.\r","    %\r","    % bmmo_SelfCorrectTsActuation Properties:\r","    % bmmoInputs           - BMMO/BL3 inputs as parsed by bmmo_read_lcp_zip\r","    % jobConfig            - BMMO/BL3 OTAS/LIS job configuration as given\r","    %                        in bmmoInputs.info.configuration_data\r","    % tsActuationConfig    - bmmo_Configuration object\r","    %                       (eg:bl3_3600D_configuration)\r","    % timeFilter           - Option to enable or disable time filter.\r","    %                        Acceptable values include the following:\r","    %                        {'DEFAULT', 'DISABLED' 'ENABLED'}.By default the\r","    %                        value 'DISABLED' is set, which disbles the\r","    %                        time filter for all bmmoInputs. The value 'DEFAULT'\r","    %                        uses the time filter config available in\r","    %                        bmmoInputs. The value 'ENABLED' will enable time filter for\r","    %                        all the bmmoInputs.\r","    % selfCorrectOutput     - Self-correction outputs containing decorrected input,\r","    %                        SBC correction, KPIs, WDMs, InvalidatedData\r","    %                        and other meta data\r","    \r","    \r","    properties (SetAccess = private)\r","        bmmoInputs struct\r","        selfCorrectOutput struct\r","    end\r","    \r","    properties (SetObservable)\r","        jobConfig struct\r","        tsActuationConfig function_handle\r","        timeFilter {mustBeValidFilter} = 'DISABLED'\r","    end\r","    \r","    properties (Hidden)\r","        lisWdm\r","        lisKpis\r","        sbcOutput\r","        invalidData\r","    end\r","    \r","    \r","    properties (Hidden)\r","        decorrectOptions\r","        inputStruct\r","        mlInputStruct\r","        inputStructDecorrected\r","        decorrectedMl\r","        selfCorrectOptions\r","        interfieldModelResidual\r","        interfieldTsResidual\r","    end\r","    \r","    properties (Constant, Hidden)\r","        validTimeFilter = {'DEFAULT', 'DISABLED' 'ENABLED'}\r","        defaultPlatform = 'LIS'\r","    end\r","    \r","    methods\r","        function obj = bmmo_SelfCorrectTsActuation(bmmoInputs, jobConfig,...\r","                tsActuationConfig)\r","            % bmmo_SelfCorrectTsActuation constructs object\r","            %\r","            % Usage\r","            %\r","            %   obj = bmmo_SelfCorrectTsActuation(bmmoInputs)\r","            %       Constructs the object and estimates jobConfig and\r","            %       tsActuationConfig using the first input of bmmoInputs.\r","            %        The other inputs can also be set at a later time\r","            %\r","            %   obj = bmmo_SelfCorrectTsActuation(bmmoInputs, jobConfig)\r","            %       Constructs the object using bmmoInputs and jobConfig.\r","            %       tsActuationConfig is estimated using the first input within\r","            %       the bmmoInputs struct\r","            %\r","            %   obj = bmmo_SelfCorrectTsActuation(bmmoInputs, jobConfig,...\r","            %   tsActuationConfig)\r","            %       Constructs the object using bmmoInputs, jobConfig and\r","            %       tsActuationConfig.\r","            %\r","            % Inputs:\r","            %\r","            % bmmoInputs          - BMMO/BL3 inputs as parsed by bmmo_read_lcp_zip\r","            % jobConfig           - BMMO/BL3 OTAS/LIS job configuration as given\r","            %                       in bmmoInputs.info.configuration_data\r","            % tsActuationConfig   - bmmo_Configuration object\r","            %                      (eg:bl3_3600D_configuration)\r","            % Outputs (relevant)\r","            % selfCorrectOutput   - Self-correction outputs containing decorrected input,\r","    %                               SBC correction, KPIs, WDMs, InvalidatedData\r","    %                               and other meta data\r","            \r","            obj.bmmoInputs = bmmoInputs;\r","            \r","            switch nargin\r","                case 3\r","                    obj.jobConfig = jobConfig;\r","                    obj.tsActuationConfig = tsActuationConfig;\r","                case 2\r","                    obj.jobConfig = jobConfig;\r","                    getTsConfigFromFirstInput(obj)\r","                case 1\r","                    getJobConfigFromFirstInput(obj)\r","                    getTsConfigFromFirstInput(obj)\r","                otherwise\r","            end\r","        end\r","        \r","        \r","        function run(obj)\r","            \r","            for jobNum = 1: length(obj.bmmoInputs)\r","                obj.inputStruct = obj.bmmoInputs(jobNum);\r","                obj.inputStruct.info.configuration_data.platform = obj.defaultPlatform;\r","                getSelfCorrectModelOptions(obj)\r","                getDecorrectedInput(obj)\r","                updateSelfCorrectInputConfiguration(obj)\r","                runDriftControlModel(obj)\r","                getInterfieldModelResidual(obj)\r","                generateInterfieldTsResidual(obj)\r","                \r","                obj.selfCorrectOutput(jobNum).bmmoInputsDecorrected = obj.inputStructDecorrected;\r","                obj.selfCorrectOutput(jobNum).sbcs = obj.sbcOutput;\r","                obj.selfCorrectOutput(jobNum).kpis = obj.lisKpis;\r","                obj.selfCorrectOutput(jobNum).wdms.uncontrolledInput = obj.decorrectedMl;\r","                obj.selfCorrectOutput(jobNum).wdms.interfieldModelResidual = obj.interfieldModelResidual;\r","                obj.selfCorrectOutput(jobNum).wdms.interfieldTsResidual = obj.interfieldTsResidual;\r","                obj.selfCorrectOutput(jobNum).chuckUsage = obj.selfCorrectOptions.chuck_usage;\r","                obj.selfCorrectOutput(jobNum).nLayers = obj.selfCorrectOptions.no_layer_to_use;\r","                obj.selfCorrectOutput(jobNum).invalidatedData = obj.invalidData;\r","            end\r","            generateRawIntrafieldFingerprint(obj)\r","        end\r","        \r","        \r","        function getSelfCorrectModelOptions(obj)\r","            \r","            [obj.mlInputStruct, obj.decorrectOptions] = bmmo_process_input(obj.inputStruct);\r","            obj.decorrectOptions.intraf_actuation.fnhandle = @bmmo_INTRAF_inline_SDM_fingerprint;\r","            \r","            switch obj.decorrectOptions.bl3_model\r","                case true\r","                    obj.decorrectOptions.KA_actuation.fnhandle = @bmmo_KA_HOC_fingerprint;\r","                    obj.decorrectOptions.KA_actuation.type = obj.getKaFpActuationFromIntraf...\r","                        (obj.decorrectOptions.inline_sdm_config.fnhandle);\r","                case false\r","                    obj.decorrectOptions.KA_actuation.fnhandle = @bmmo_KA_LOC_CET_fingerprint;\r","                    obj.decorrectOptions.KA_actuation.type = obj.getKaFpActuationFromIntraf...\r","                        (obj.decorrectOptions.inline_sdm_config.fnhandle);\r","            end\r","            \r","            obj.selfCorrectOptions = obj.decorrectOptions;\r","            obj.selfCorrectOptions.inline_sdm_config.fnhandle = obj.tsActuationConfig;\r","            switch obj.jobConfig.bl3_model\r","                case true\r","                    obj.selfCorrectOptions.KA_actuation.fnhandle = @bmmo_KA_HOC_fingerprint;\r","                    obj.selfCorrectOptions.KA_actuation.type = obj.getKaFpActuationFromIntraf...\r","                        (obj.tsActuationConfig);\r","                case false\r","                    obj.selfCorrectOptions.KA_actuation.fnhandle = @bmmo_KA_LOC_CET_fingerprint;\r","                    obj.selfCorrectOptions.KA_actuation.type = obj.getKaFpActuationFromIntraf...\r","                        (obj.tsActuationConfig);\r","            end\r","        end\r","        \r","        \r","        function getDecorrectedInput(obj)\r","            \r","            mlDummy = ovl_create_dummy(obj.mlInputStruct, 'edge', obj.decorrectOptions.wafer_radius_in_mm);\r","            prevSbc = obj.inputStruct.info.previous_correction;\r","            decorrectionFps = bmmo_apply_SBC_core(mlDummy,...\r","                prevSbc, 1, obj.decorrectOptions);\r","            obj.decorrectedMl = ovl_sub(obj.mlInputStruct,...\r","                decorrectionFps.TotalSBCcorrection);\r","            obj.inputStructDecorrected = bmmo_map_to_smf(obj.decorrectedMl, obj.inputStruct);\r","            \r","            switch obj.jobConfig.bl3_model\r","                case true\r","                    zeroSbc = bmmo_default_output_structure(bl3_default_options_structure);\r","                    obj.inputStructDecorrected.info.previous_correction = zeroSbc.corr;\r","                    obj.inputStructDecorrected = bmmo_input_to_bl3(obj.inputStructDecorrected);\r","                case false\r","                    zeroSbc = bmmo_default_output_structure(bmmo_default_options_structure);\r","                    obj.inputStructDecorrected.info.previous_correction = zeroSbc.corr;\r","                    obj.inputStructDecorrected.info.report_data.inline_sdm_residual = zeroSbc.corr.ffp;\r","            end\r","        end\r","        \r","        \r","        function updateSelfCorrectInputConfiguration(obj)\r","            obj.inputStructDecorrected.info.configuration_data = obj.jobConfig;\r","            updateTimeFilterState(obj)\r","        end\r","        \r","        \r","        function runDriftControlModel(obj)\r","            [out, wdm] = bmmo_nxe_drift_control_model...\r","                (obj.inputStructDecorrected);\r","            obj.lisKpis = out.report.KPI;\r","            obj.sbcOutput = rmfield(out.corr, 'Configurations');\r","            \r","            for index = 1:length(out.invalid.invalidated_data)\r","                for imark = 1:length(out.invalid.invalidated_data(index).mark)\r","                    obj.invalidData(index).x(imark,:) = ...\r","                        out.invalid.invalidated_data(index).mark(imark).x;\r","                    obj.invalidData(index).y(imark,:) = ...\r","                        out.invalid.invalidated_data(index).mark(imark).y;\r","                end\r","            end\r","            obj.lisWdm = wdm;\r","        end\r","        \r","        \r","        function getInterfieldModelResidual(obj)\r","            totalSbcCorrection = ovl_get_wafers(obj.lisWdm.total_filtered.TotalSBCcorrection(1), []);\r","            for ichk = 1:length(obj.lisWdm.total_filtered.TotalSBCcorrection)\r","                totalSbcCorrection = ovl_combine_wafers(totalSbcCorrection,...\r","                    obj.lisWdm.total_filtered.TotalSBCcorrection(ichk));\r","            end\r","            totalSbcCorrectionsPerWafer = ovl_get_wafers(totalSbcCorrection, obj.selfCorrectOptions.chuck_usage.chuck_id);\r","            ffp = obj.sbcOutput.ffp;\r","            intrafFpsPerWafer = bmmo_INTRAF_par_fingerprint(totalSbcCorrectionsPerWafer, ffp, obj.selfCorrectOptions);\r","            interfieldModelFpsPerWafer = ovl_sub(totalSbcCorrectionsPerWafer, intrafFpsPerWafer);\r","            interfieldModelResidualWithIntraf = ...\r","                ovl_add(obj.decorrectedMl, interfieldModelFpsPerWafer);\r","            intrafTotal = ovl_average_fields(ovl_average(ovl_get_fields(interfieldModelResidualWithIntraf, obj.selfCorrectOptions.fid_intrafield)));\r","            obj.interfieldModelResidual = ovl_sub_field(interfieldModelResidualWithIntraf, intrafTotal);\r","        end\r","        \r","        \r","        function generateInterfieldTsResidual(obj)\r","            mlDummy = ovl_create_dummy(obj.mlInputStruct, 'edge', obj.selfCorrectOptions.wafer_radius_in_mm);\r","            fpStruct = bmmo_apply_SBC_core(mlDummy, obj.sbcOutput, 1, obj.selfCorrectOptions);\r","            tsInterfield = ovl_sub(fpStruct.TotalSBCcorrection, fpStruct.INTRAF);\r","            interfieldTsResidualWithIntraf = ...\r","                ovl_add(obj.decorrectedMl, tsInterfield);\r","            intrafTotal = ovl_average_fields(ovl_average(ovl_get_fields(interfieldTsResidualWithIntraf, obj.selfCorrectOptions.fid_intrafield)));\r","            obj.interfieldTsResidual = ovl_sub_field(interfieldTsResidualWithIntraf, intrafTotal);\r","            \r","        end\r","        \r","        \r","        function generateRawIntrafieldFingerprint(obj)\r","            for jobNum = 1:length(obj.bmmoInputs)\r","                obj.selfCorrectOutput(jobNum).wdms.rawIntrafieldFp = ...\r","                    bmmo_ffp_to_ml_simple(obj.selfCorrectOutput(jobNum).sbcs.ffp);\r","            end\r","        end\r","    end\r","    \r","    \r","    methods % listeners, setters & getters\r","        \r","        function updateTimeFilterState(obj)\r","            switch obj.timeFilter\r","                case 'DEFAULT'\r","                    % do nothing\r","                case 'DISABLED'\r","                    obj.inputStructDecorrected.info.report_data.time_filtering_enabled = 0;\r","                case 'ENABLED'% TODO: support adaptive filter case, disabled for now.\r","                    obj.inputStructDecorrected.info.report_data.time_filtering_enabled = 1;\r","                    obj.inputStructDecorrected.info.report_data.adaptive_time_filter_enabled = 0;\r","            end\r","        end\r","        \r","        \r","        function getTsConfigFromFirstInput(obj)\r","            config = bmmo_get_inline_sdm_configuration(obj.bmmoInputs(1));\r","            obj.tsActuationConfig = config.fnhandle;\r","        end\r","        \r","        \r","        function getJobConfigFromFirstInput(obj)\r","            obj.jobConfig = obj.bmmoInputs(1).info.configuration_data;\r","            if ~isfield(obj.jobConfig, 'bl3_model')\r","                obj.jobConfig.bl3_model = 0;\r","            end\r","        end\r","    end\r","    \r","    \r","    methods (Static)\r","        function KaFpActuation = getKaFpActuationFromIntraf(IntrafFpActuation)\r","            configuration = feval(IntrafFpActuation);\r","            hocActuation = configuration.getConfigurationObject('CetModel');\r","            KaFpActuation = hocActuation.cetModel;\r","        end\r","    end\r","    \r","    \r","end %classdef\r","\r","function mustBeValidFilter(timeFilter)\r","mustBeMember(timeFilter, bmmo_RerunTsActuation.validTimeFilter)\r","end % mustBeValidFilter\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[92,94,95,96,97,98,99,100,101,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,137,138,140,141,142,143,144,145,146,147,148,151,152,153,154,155,156,157,158,159,160,161,168,169,170,171,172,173,174,176,177,178,179,180,181,182,183,184,190,191,196,197,198,199,201,202,203,204,205,206,209,214,215,216,217,219,220,221,222,223,224,225,226,231,232,233,234,235,236,237,243,244,245,254,255,257,258,259,260,261,267,268,273,274,275,283,284,285,293],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}