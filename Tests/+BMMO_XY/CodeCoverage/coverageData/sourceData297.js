var sourceData297 = {"FileContents":["classdef testBmmoInterpNans < BMMO_XY.tools.testSuite\r","\r","    methods(Test)\r","        \r","        %% test with all-nan input (should return a zero matrix)\r","        function Case1(obj)\r","            % Given\r","            M = zeros(10) * nan;\r","            Z = zeros(10);\r","            X = (1:10)';\r","            Y = X;\r","            \r","            % When\r","            out = bmmo_interp_nans(M, X, Y);\r","            \r","            % Then\r","            obj.verifyTrue(isequal(out, Z));\r","            \r","            %% test with no nans in the input (should return an identical matrix)\r","            % Given\r","            M = ones(10);                                   \r","            \r","            % When\r","            out = bmmo_interp_nans(M, X, Y);\r","            \r","            % Then\r","            obj.verifyTrue(isequal(out, M));\r","        end\r","        \r","        %% test a 3x3 ones matrix with a single NaN in the centre\r","        function Case2(obj)\r","            % Given\r","            M = ones(3);\r","            M(2,2) = NaN;\r","            X = (1:3)';                                     % updown neighbourhood, uniform weight\r","            Y = X;\r","            \r","            % When\r","            out = bmmo_interp_nans(M, X, Y);\r","            \r","            % Then\r","            obj.verifyTrue(out(2,2) == 1);\r","            \r","            %%\r","            % Given\r","            X = [1,7,8]';                                   % updown neighbourhood, unequal weights\r","            Y = [5,8,20]';\r","            \r","            % When\r","            out = bmmo_interp_nans(M, X, Y);\r","            \r","            % Then\r","            obj.verifyTrue(out(2,2) == 1);\r","            \r","            %%\r","            % When\r","            out = bmmo_interp_nans(M, X, Y, 'diagonal');    % diagonal neighbourhood, unequal weights\r","            \r","            % Then\r","            obj.verifyTrue(out(2,2) == 1);\r","        end\r","        \r","        %% test a 3x3 Matrix with larger values on the diagonals\r","        function Case3(obj)\r","            % Given\r","            M = [100 1 100; 1 NaN 1; 100 1 100];\r","            X = (1:3)';\r","            Y = X;\r","            \r","            % When\r","            out_u = bmmo_interp_nans(M, X, Y);              % the diagonal interpolation should reflect these larger values\r","            out_d = bmmo_interp_nans(M, X, Y, 'diagonal');\r","            \r","            % Then\r","            obj.verifyTrue(out_d(2,2) > out_u(2,2));\r","            \r","            %%\r","            % Given\r","            Y = (0:50:100)';                                % change the weights so that diagonals are relatively remote\r","            \r","            % When\r","            out_d2 = bmmo_interp_nans(M, X, Y, 'diagonal');\r","            \r","            % Then\r","            obj.verifyTrue(out_d2(2,2) < out_d(2,2));\r","        end\r","        \r","        %% test a large matrix with mostly NaNs\r","        function Case4(obj)\r","            % Given\r","            M = zeros(99) * NaN;                            % Make sure there are no NaNs left in the matrix updown neighbourhood, uniform weight\r","            M(50,50) = 1;\r","            M(1,1) = 0;\r","            M(1,99) = 0;\r","            M(99,1) = 0;\r","            M(99,99) = 0;\r","            X = (1:99)';\r","            Y = X;\r","            \r","            % When\r","            out = bmmo_interp_nans(M, X, Y);\r","            \r","            % Then\r","            obj.verifyTrue(~any(any(isnan(out))));   \r","            \r","            %%\r","            % When\r","            out = bmmo_interp_nans(M, X, Y, 'diagonal', 1); % diagonal neighbourhood, step, uniform weight\r","            \r","            % Then\r","            obj.verifyTrue(~any(any(isnan(out))));\r","        end\r","        \r","        %% check max loop input\r","        function Case5(obj)\r","            % Given\r","            M = ones(3);\r","            M(2,2) = NaN;\r","            X = (1:3)';                                     % updown neighbourhood, uniform weight\r","            Y = X;\r","            \r","            % When\r","            out = bmmo_interp_nans(M, X, Y, 'diagonal', 1, 1000);\r","            out2 = bmmo_interp_nans(M, X, Y, 'diagonal', 1, 0);   \r","            \r","            % Then\r","            obj.verifyTrue(out(2,2) == 1);\r","            obj.verifyTrue(out2(2,2) == 1);\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,14,17,21,24,27,33,34,35,36,39,42,46,47,50,53,57,60,66,67,68,71,72,75,79,82,85,91,92,93,94,95,96,97,98,101,104,108,111,117,118,119,120,123,124,127,128],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0]}}