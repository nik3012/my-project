var sourceData350 = {"FileContents":["classdef bmmo_HocModelDefault < bmmo_HocModel\r","    %% bmmo_HocModelDefault BMMO & BL3 NXE HOC model.\r","    %\r","    % This class calculates the KPIs correction & residuals for the HOC\r","    % part of the inline SDM model. For details on the model see the\r","    % EDS (D000347979)\r","    %\r","    % bmmo_HocModelDefault Properties:\r","    %   mlDistoIn             - SBC ffp in ml format\r","    %   mlWaferIn             - Wafers to applly HOC correction on\r","    %   chuckId               - Chuck Id of wafers in mlWaferIn\r","    %   actuationOutput       - Structure containing correction and residual\r","    %   report                - Structure with reporitng KPIs & residuals\r","    %   mlHocInput            - Input to HOC model for reporting, calculated from mlDistoIn\r","    %   mlHocInputFiltered    - Correctable of mlHocInput after applying HOC filter\r","    %   mlHocInputAct         - Input to HOC model for actuation, calculated from mlDistoIn\r","    %   mlHocInputFilteredAct - Correctable of mlHocInputAct after applying HOC filter\r","    %   cetFieldSize          - Size of CET grid field [x y]\r","    %   imageShift            - Image shift on wafer level [x y]\r","    %   imageResol            - Image resolution (nmarks) in x and y direction\r","    %   adelLer               - filepath of Adeller, updates default y values of\r","    %                           cetFieldSize & imageShift if provided\r","    \r","    %\r","    % bmmo_HocModelDefault Methods:\r","    %   calcReport    - Calculate HOC report\r","    %   calcActuation - Calculate HOC correction\r","    %   run           - Calculate HOC report & correction\r","    %\r","    % See also:\r","    %   bmmo_HocModel\r","    \r","    properties\r","        % SBC ffp in ml format\r","        mlDistoIn = ovl_average_fields(ovl_create_dummy(...\r","            '13x19', 'nlayer', 1, 'nwafer', 2));\r","        % Wafers to applly HOC correction on\r","        mlWaferIn = bmmo_process_input(bmmo_default_input);\r","        chuckId % Chuck Id of wafers in mlWaferIn\r","        adelLer char\r","        cetFieldSize = [25.44 33]*1e-3\r","        imageShift = [0 0]\r","        imageResol = [13 19]\r","    end\r","    \r","    properties (SetAccess = private)\r","        actuationOutput % Structure containing correction and residual\r","        report % Structure with reporting KPIs & residuals\r","    end\r","    \r","    properties (Dependent)\r","        % Input to HOC model, calculated from mlDistoIn\r","        mlHocInput struct\r","        % Correctable of mlHocInput after applying HOC filter\r","        mlHocInputFiltered struct\r","        % Actuation used a different grid than reporting on TS\r","        mlDistoInAct struct\r","        % Input to HOC model for actuation, calculated from mlDistoIn\r","        mlHocInputAct struct\r","        % Correctable of mlHocInputAct after applying HOC filter\r","        mlHocInputFilteredAct struct\r","    end\r","    \r","    properties (Access = private)\r","        hocPoly2splineReport\r","        hocPlaybackReport\r","        hocFilter\r","        hocActuation\r","        hocPoly2spline\r","        hocPlayback\r","        mlHocGrid33 = ovl_average_fields(ovl_create_dummy(...\r","            'marklayout', [25.44 33 13 19], 'nlayer', 1, 'nwafer', 2));\r","    end\r","    \r","    properties (Access = private, Dependent)\r","        mlChuckTemplate struct\r","    end\r","    \r","    methods\r","        function obj = bmmo_HocModelDefault(configuration, mlDistoIn, ...\r","                mlWaferIn, chuckId)\r","            % bmmo_HocModelDefault constructs object\r","            %\r","            % Usage\r","            %\r","            %   obj = bmmo_InlineSdmModelDefault(configuration)\r","            %       Constructs the object, the inputs mlDisto & mlWafer can\r","            %       be set at a later time\r","            %\r","            %   obj = bmmo_InlineSdmModelDefault(configuration, mlDisto)\r","            %       Constructs the object with the mlDisto input. The\r","            %       report can be immediately generated from the object.\r","            %\r","            %   obj = bmmo_InlineSdmModelDefault(configuration, mlDisto, ...\r","            %           mlWafer)\r","            %       Constructs the object with both inputs. The\r","            %       correction & report can then be immediately generated\r","            %       from the object.\r","            %   obj = bmmo_InlineSdmModelDefault(configuration, mlDisto, ...\r","            %           mlWafer, chuckId)\r","            %       Constructs the object with both inputs. The\r","            %       correction & report can then be immediately generated\r","            %       from the object. Use the chuckId input if chuckId is\r","            %       different from default\r","            %\r","            % Inputs\r","            %\r","            %   configuration   bmmo_Configuration object\r","            %   mlDisto         ml structure with 2 wafers & 1 field per wafer\r","            %          SBC ffp in ml format\r","            %          Default: all-zeros\r","            %   mlWaferIn       valid ml structure\r","            %          Wafers to apply the inline SDM correction on\r","            %          Default: bmmo_process_input(bmmo_default_input)\r","            %   chuckId         1x(mlWaferIn.nwafer) double\r","            %          Default: [1, 2, 1, 2, 1, 2]\r","            %\r","            % Outputs\r","            %\r","            %   obj    created object\r","            %\r","            \r","            obj.hocFilter = ...\r","                configuration.getConfigurationObject('HocFilter');\r","            obj.hocActuation = ...\r","                configuration.getConfigurationObject('CetModel');\r","            obj.hocPoly2spline = ...\r","                configuration.getConfigurationObject('HocPoly2Spline');\r","            obj.hocPlayback = ...\r","                configuration.getConfigurationObject('HocPlayback');\r","            obj.hocPoly2splineReport = ...\r","                bmmo_HocPoly2SplineDisabled.getInstance();\r","            obj.hocPlaybackReport = ...\r","                bmmo_HocPlaybackDisabled(configuration);\r","            getChuckId(obj);\r","            \r","            switch nargin\r","                case 4\r","                    obj.mlWaferIn = mlWaferIn;\r","                    obj.chuckId = chuckId;\r","                    obj.mlDistoIn = mlDistoIn;\r","                case 3\r","                    obj.mlWaferIn = mlWaferIn;\r","                    obj.mlDistoIn = mlDistoIn;\r","                case 2\r","                    obj.mlDistoIn = mlDistoIn;\r","                otherwise\r","            end\r","            \r","        end\r","        \r","        function run(obj)\r","            % bmmo_HocModelDefault method run\r","            %\r","            % Usage\r","            %\r","            %   obj.run()\r","            %       Run the Hoc model and populate all the\r","            %       properties with model outputs\r","            obj.calcActuation();\r","            obj.calcReport();\r","        end\r","        \r","        function calcActuation(obj)\r","            % bmmo_HocModelDefault method calcActuation\r","            %\r","            % Usage\r","            %\r","            %   obj.calcActuation()\r","            %       Calculates corrections and residuals and saves it in\r","            %       the actuationOutput property\r","            mlChuckIn = obj.mlChuckTemplate;\r","            mlChuckInXpa =  ovl_create_dummy(mlChuckIn,'marklayout', 'BF-FOXY3-DYNA-13X19');\r","            mlHocChuckInput = ovl_distribute_field(obj.mlHocInputFilteredAct, ...\r","                mlChuckInXpa); % HocDisto on CET layout\r","            [obj.actuationOutput.mlHocChuckResSrr, cs] = ...\r","                obj.hocActuation.actuationResidue(mlHocChuckInput);\r","            cs = obj.hocPoly2spline.getOptions(cs);\r","            [~, mlHocCorr , ~] = ...\r","                obj.hocPlayback.playbackTrajectories(mlChuckIn, cs);\r","            % Perwafer correction & residue in measurement layout\r","            mlHocWaferCorr = ovl_get_wafers(mlHocCorr, obj.chuckId);\r","            obj.actuationOutput.mlHocChuckCorr = ...\r","                ovl_combine_linear(mlHocWaferCorr, 1, obj.mlWaferIn, 0);\r","            obj.actuationOutput.mlWaferResidual = ovl_add(obj.mlWaferIn, mlHocWaferCorr);\r","            \r","        end\r","        \r","        function calcReport(obj)\r","            % bmmo_HocModelDefault method calcReport\r","            %\r","            % Usage\r","            %\r","            %   obj.calcReport()\r","            %       Calculates the HOC model report structure\r","            [obj.report.mlHocResSrr, cs] = ...\r","                obj.hocActuation.actuationResidue(obj.mlHocInputFiltered);\r","            cs = obj.hocPoly2splineReport.getOptions(cs);\r","            [obj.report.mlHocRes, obj.report.mlHocCorr, obj.report.mlHocFad] = ...\r","                obj.hocPlaybackReport.playbackTrajectories(obj.mlHocInput, cs);\r","            \r","            for ic =  1:obj.report.mlHocCorr.nwafer\r","                obj.report.Kpi.maxHOCCorr(ic).dx = ...\r","                    max((abs(obj.report.mlHocCorr.layer.wr(ic).dx)));\r","                obj.report.Kpi.maxHOCCorr(ic).dy = ...\r","                    max((abs(obj.report.mlHocCorr.layer.wr(ic).dy)));\r","                \r","                obj.report.Kpi.maxHOCRes(ic).dx = ...\r","                    max((abs(obj.report.mlHocRes.layer.wr(ic).dx)));\r","                obj.report.Kpi.maxHOCRes(ic).dy = ...\r","                    max((abs(obj.report.mlHocRes.layer.wr(ic).dy)));\r","                \r","                obj.report.Kpi.FadingMSD(ic).dx = ...\r","                    max((abs(obj.report.mlHocFad.layer.wr(ic).dx)));\r","                obj.report.Kpi.FadingMSD(ic).dy = ...\r","                    max((abs(obj.report.mlHocFad.layer.wr(ic).dy)));\r","            end\r","        end\r","    end\r","    \r","    methods(Access = private)\r","        function getChuckId(obj)\r","            chuckOrder = [1, 2];\r","            obj.chuckId = [];\r","            for i = 1: round(obj.mlWaferIn.nwafer/2)\r","                obj.chuckId = [obj.chuckId chuckOrder];\r","            end\r","            \r","            if ~iseven(obj.mlWaferIn.nwafer)\r","                obj.chuckId(end) = [];\r","            end\r","        end\r","        \r","        function getImageInfo(obj)\r","            MM = 1e-3;\r","            ler = xml_load(obj.adelLer);\r","            imageSettings = ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(1).elt;\r","            obj.cetFieldSize(2)  = str2double(imageSettings.ImageSize.Y) * MM;\r","            obj.imageShift(2)  = str2double(imageSettings.ImageShift.Y) * MM;\r","        end\r","    end\r","    \r","    methods % setters & getters\r","        function set.mlWaferIn(obj, val)\r","            obj.mlWaferIn = val;\r","            getChuckId(obj)\r","        end\r","        \r","        function set.mlDistoIn(obj, val)\r","            obj.mlDistoIn = val;\r","        end\r","        \r","        function set.adelLer(obj, val)\r","            obj.adelLer = val;\r","            getImageInfo(obj)\r","        end\r","        \r","        function val = get.mlDistoInAct(obj)\r","            val = obj.mlDistoIn;\r","            if ~isa(obj.hocFilter, 'bmmo_HocFilterSpline')%32.4 for spline\r","                val.wd.yf = obj.mlHocGrid33.wd.yf;\r","                val.wd.yw = obj.mlHocGrid33.wd.yw;\r","            end\r","        end\r","        \r","        function val = get.mlHocInput(obj)\r","            mlAvgField = ovl_average(obj.mlDistoIn);\r","            val = ovl_sub(obj.mlDistoIn, ovl_scan_integrate(mlAvgField));\r","        end\r","        \r","        function val = get.mlHocInputAct(obj)\r","            mlAvgField = ovl_average(obj.mlDistoInAct);\r","            val = ovl_sub(obj.mlDistoInAct, ovl_scan_integrate(mlAvgField));\r","        end\r","        \r","        function val = get.mlHocInputFiltered(obj)\r","            val = obj.hocFilter.filterDistortion(obj.mlHocInput);\r","        end\r","        \r","        function val = get.mlHocInputFilteredAct(obj)\r","            if ~isa(obj.hocFilter, 'bmmo_HocFilter33Par')\r","                filteredInput = obj.hocFilter.filterDistortion(obj.mlHocInputAct);\r","                val = getResampledActInput(obj, filteredInput);\r","            else\r","                resampledInput = getResampledActInput(obj, obj.mlHocInputAct);\r","                val = obj.hocFilter.filterDistortion(resampledInput);\r","            end\r","        end\r","        \r","        function val = getResampledActInput(obj, mlActInput)\r","            field_geo.W = obj.cetFieldSize(1);\r","            field_geo.H = obj.cetFieldSize(2);\r","            field_geo.x_resol = obj.imageResol(1);\r","            field_geo.y_resol = obj.imageResol(2);\r","            image_y_shift = obj.imageShift(2);\r","            val = bmmo_y_resample(mlActInput, field_geo, image_y_shift);\r","        end\r","        \r","        function val = get.mlChuckTemplate(obj)\r","            val = ovl_create_dummy(obj.mlWaferIn, 'nwafer', 2);\r","        end\r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,160,161,172,173,174,175,176,177,178,179,180,182,183,184,185,196,197,198,199,200,202,203,204,205,206,208,209,210,211,213,214,215,216,223,224,225,226,229,230,235,236,237,238,239,245,246,250,254,255,259,260,261,262,267,268,272,273,277,281,282,283,284,285,286,291,292,293,294,295,296,300],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}