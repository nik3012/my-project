var sourceData647 = {"FileContents":["function test_suite = test_bmmo_filter_options\r","\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","\r","% test 1: all zeros\r","function test_bmmo_filter_options_default\r","\r","input_struct = bmmo_default_input;\r","options = bmmo_default_options_structure;\r","[~, test_options] = bmmo_process_input(input_struct);\r","\r","sub_assert_filter_equal(options.filter, test_options.filter);\r","\r","% test 2: some values replaced\r","function test_bmmo_filter_options_partial\r","\r","input_struct = bmmo_default_input;\r","input_struct.info.configuration_data.filter.T1 = 11.5;\r","input_struct.info.configuration_data.filter.coeff_BAO = 0.7;\r","input_struct.info.report_data.T_current_expose = 5;\r","input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","input_struct.info.report_data.time_filtering_enabled = 1;\r","\r","options = bmmo_default_options_structure;\r","options.filter.T_current_expose = 5;\r","options.filter.coefficients.BAO = 0.7;\r","\r","% other coefficients have default values\r","options.filter.coefficients.WH = 0.4;\r","options.filter.coefficients.MI = 0.3;\r","options.filter.coefficients.KA = 0.3;\r","options.filter.coefficients.INTRAF = 0.4;\r","options.filter.coefficients.SUSD = 0.4;\r","\r","options.filter.T1 = 11.5;\r","\r","[~, test_options] = bmmo_process_input(input_struct);\r","\r","sub_assert_filter_equal(options.filter, test_options.filter);\r","\r","% test 3 : all values in interface replaced\r","function test_bmmo_filter_options_complete\r","\r","input_struct = bmmo_turn_off_l2(bmmo_default_input);\r","input_struct.info.configuration_data.susd_correction_enabled = 1;\r","input_struct.info.configuration_data.filter.T1 = 3.5;\r","input_struct.info.configuration_data.filter.T2 = 13.5;\r","input_struct.info.configuration_data.filter.coeff_BAO = 0.44;\r","input_struct.info.configuration_data.filter.coeff_MI = 0.55;\r","input_struct.info.configuration_data.filter.coeff_WH = 0.66;\r","input_struct.info.configuration_data.filter.coeff_ffp = 0.77;\r","input_struct.info.configuration_data.filter.coeff_KA = 0.88;\r","input_struct.info.configuration_data.filter.coeff_SUSD = 0.99;\r","input_struct.info.report_data.T_current_expose = 99;\r","input_struct.info.report_data.T_previous_expose = 97;\r","input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","input_struct.info.report_data.time_filtering_enabled = 1;\r","\r","options = bmmo_default_options_structure;\r","options.filter.T_current_expose = 99;\r","options.filter.T_previous_expose = 97;\r","options.filter.coefficients.BAO = 0.44;\r","options.filter.coefficients.MI = 0.55;\r","options.filter.coefficients.WH = 0.66;\r","options.filter.coefficients.INTRAF = 0.77;\r","options.filter.coefficients.KA = 0.88;\r","options.filter.coefficients.SUSD = 0.99;\r","options.filter.T1 = 3.5;\r","options.filter.T2 = 13.5;\r","\r","[~, test_options] = bmmo_process_input(input_struct);\r","sub_assert_filter_equal(options.filter, test_options.filter);\r","\r","% test 4: verify that filter is all 1 in recover to baseline scenario,\r","% regardless of the number of wafers or time since last expose\r","function test_bmmo_filter_recover\r","\r","input = bmmo_default_input;\r","input.info.configuration_data.susd_correction_enabled = 1;\r","input_2w = bmmo_get_wafers(input, [1 2]);\r","input_4w = bmmo_get_wafers(input, [1 2 3 4]);\r","input_6w = input;\r","input_short = input_6w;\r","input_short.info.report_data.T_current_expose = 97;\r","input_short.info.report_data.T_previous_expose = 88;\r","\r","\r","[~, options_2w] = bmmo_process_input(input_2w);\r","[~, options_4w] = bmmo_process_input(input_4w);\r","[~, options_6w] = bmmo_process_input(input_6w);\r","[~, options_short] = bmmo_process_input(input_short);\r","\r","sub_assert_filter_equal(options_2w.filter, options_4w.filter);\r","sub_assert_filter_equal(options_4w.filter, options_6w.filter);\r","options_short.filter.T_current_expose = options_6w.filter.T_current_expose;\r","options_short.filter.T_previous_expose = options_6w.filter.T_previous_expose;\r","sub_assert_filter_equal(options_short.filter, options_6w.filter);\r","\r","% test 5: verify that dynamic filter is engaged in control to baseline\r","% scenario\r","function test_bmmo_filter_control\r","\r","input_6w = bmmo_default_input;\r","input_6w.info.report_data.time_filtering_enabled = 1;\r","input_6w.info.report_data.adaptive_time_filter_enabled = 1;\r","input_2w = bmmo_get_wafers(input_6w, [1 2]);\r","input_4w = bmmo_get_wafers(input_6w, [1 2 3 4]);\r","\r","input_short = input_6w;\r","input_short.info.report_data.T_current_expose = 97;\r","input_short.info.report_data.T_previous_expose = 88;\r","\r","[~, options_2w] = bmmo_process_input(input_2w);\r","[~, options_4w] = bmmo_process_input(input_4w);\r","[~, options_6w] = bmmo_process_input(input_6w);\r","[~, options_short] = bmmo_process_input(input_short);\r","\r","sub_assert_filter_lt(options_2w.filter, options_4w.filter);\r","sub_assert_filter_lt(options_4w.filter, options_6w.filter);\r","sub_assert_filter_lt(options_6w.filter, options_short.filter);\r","\r","\r","function test_bmmo_filter_options_invalid\r","\r","input_struct = bmmo_default_input;\r","input_struct.info.configuration_data.filter.T1 = 15.5;\r","input_struct.info.configuration_data.filter.T2 = 13.5;\r","input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","input_struct.info.report_data.time_filtering_enabled = 1;\r","\r","try\r","    bmmo_process_input(input_struct);\r","    error('Test case failed!');\r","catch err\r","    assertEqual(err.message, 'Incorrect dynamic filter definition: T1 > T2');\r","end\r","\r","input_struct = bmmo_default_input;\r","input_struct.info.report_data.T_previous_expose = 15.5;\r","input_struct.info.report_data.T_current_expose = 13.5;\r","input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","input_struct.info.report_data.time_filtering_enabled = 1;\r","\r","try\r","    bmmo_process_input(input_struct);\r","    error('Test case failed!');\r","catch err\r","    assertEqual(err.message, 'Incorrect dynamic filter definition: previous exposure later than current');\r","end\r","\r","\r","function test_bmmo_susd_filter_input_no_control\r","\r","input = bmmo_default_input;\r","input.info.configuration_data.filter.coeff_SUSD = 0.66;\r","[~, test_options] = bmmo_process_input(input);\r","\r","sub_assert_filter_equal(test_options.filter.coefficients  , bmmo_get_empty_filter);\r","\r","\r","function sub_assert_filter_equal(filter1, filter2)\r","\r","filter1.function = 0;\r","filter2.function = 0;\r","bmmo_assert_equal(filter1, filter2);\r","\r","\r","function sub_assert_filter_lt(filter1, filter2)\r","\r","fn = fieldnames(filter1.coefficients);\r","fn2 = fieldnames(filter2.coefficients);\r","assert(isequal(fn, fn2));\r","\r","for kk = 1:length(fn)\r","   assert(filter1.coefficients.(fn{kk}) <  filter2.coefficients.(fn{kk}));\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[3,4,5,6,7,13,14,15,17,22,23,24,25,26,27,29,30,31,34,35,36,37,38,40,42,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,76,77,83,84,85,86,87,88,89,90,93,94,95,96,98,99,100,101,102,108,109,110,111,112,114,115,116,118,119,120,121,123,124,125,130,131,132,133,134,136,137,138,139,140,143,144,145,146,147,149,150,151,152,153,159,160,161,163,168,169,170,175,176,177,179,180],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}