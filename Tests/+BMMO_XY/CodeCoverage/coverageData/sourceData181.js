var sourceData181 = {"FileContents":["function results_out = bmmo_sub_model_MIKA(results_in, options)\r","% function results_out = bmmo_sub_model_MIKA(results_in, options)\r","%\r","% The MIKA sub-model (MI+KA combo model).\r","%\r","% Input:\r","%   results_in: structure containing at least the following fields:\r","%               interfield_residual: 1 * max_chuck structure array of chuck-averaged\r","%               overlay structures. This is the input to the MI sub-model.\r","%   options:    options structure\r","%\r","% Output:\r","%   results_out: structure containing intermediate models\r","%   This function modifies the following fields:\r","%           MI.res: 1*max_chuck array of ml structures; residual per\r","%               chuck id after fitting mirror model.\r","%           MI.Calib_MI: 1 * max chuck array of MI calibrations\r","%           interfield_residual: equal to MI.res\r","%           KA.res: 1*max_chuck array of ml structures; residual per\r","%               chuck id after fitting mirror model.\r","%           KA.Calib_KA: 1 * max chuck array of KA-grid calibrations.\r","%           BAO.before_MIKA: BAO content removed before MIKA-modelling, for\r","%               ebug purpose only.\r","%           BAO.BAO_in_MIKA: BAO content of MIKA-combo model for crosstalk\r","%               estimation, for debug purpose only.\r","\r","results_out = results_in;\r","model = 'MIKA';\r","\r","% Remove average field\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    % initialize input (per-chuck residual of WH model)\r","    mi_input(chuck_id) = results_out.interfield_residual(chuck_id);\r","    % remove average field\r","    mi_input(chuck_id) = bmmo_remove_average_field(mi_input(chuck_id), options);\r","    % Remove BAO (KZAK, 2019-03-19), BAO is modelled over 7x7 layout\r","    [mi_input(chuck_id), results_out.BAO.before_MIKA(chuck_id)] = bmmo_model_BAO(mi_input(chuck_id), options);\r","end\r","\r","% Reduce SDM fields to 7x7, edges are dense. Shall the edges be the same: 7x7?\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    out_ml_new(chuck_id) = bmmo_convert_layout2_7(mi_input(chuck_id),'x', options.fid_intrafield);\r","    out_ml_new(chuck_id) = bmmo_convert_layout2_7(out_ml_new(chuck_id),'y', options.fid_intrafield);\r","end\r","\r","mi_input = out_ml_new;\r","\r","% Construct FPS for MI+KA, KA-fps contains only terms from 2nd order\r","[fps, C] = bmmo_construct_FPS(mi_input, options, model);\r","\r","% Scale the input and MI+KA fingerprints\r","mli = mi_input;\r","\r","% Run the MI+KA combined model\r","[fit_coeffs, fitted_fps] = bmmo_combined_model(mli, fps, options, C);\r","\r","% calculate MI part as sum of MIX and MIY\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    fitted_fps.MI(chuck_id) = ovl_add(fitted_fps.MIX(chuck_id), fitted_fps.MIY(chuck_id));\r","end\r","\r","% MI+KA map consistency, convert and update\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    \r","    [~, results_out.MI.Calib_MI(chuck_id)]= bmmo_generate_mirrors(mli(chuck_id), fit_coeffs.MIX{chuck_id},fit_coeffs.MIY{chuck_id}, options);\r","    \r","    % find the linear terms in the resulting maps when interpolated to 7x7\r","    % layout and remove it from MI\r","    fp_tmp = bmmo_mirror_fingerprint(bmmo_get_layout(fitted_fps.MI(chuck_id), options.reduced_reticle_layout, options), results_out.MI.Calib_MI(chuck_id), options);\r","    fp_tmp = ovl_combine_linear(fp_tmp, 1, mi_input(chuck_id), 0);\r","    [~, pars] = bmmo_fit_model(fp_tmp, options, 'tx', 'rxwfr', 'ty', 'rwy');\r","    \r","    % Remove linear terms from mirror maps, and create \"final\" correction\r","    [results_out.MI.Calib_MI(chuck_id).x_mirr, results_out.MI.Calib_MI(chuck_id).y_mirr] = bmmo_model_map_parms(results_out.MI.Calib_MI(chuck_id).x_mirr, results_out.MI.Calib_MI(chuck_id).y_mirr, options, pars);\r","    \r","    % Apply exposure side mirror maps to measure side\r","    if options.invert_MI_wsm_sign\r","        results_out.MI.Calib_MI_wsm(chuck_id).x_mirr.dx = -1 * results_out.MI.Calib_MI(chuck_id).x_mirr.dx;\r","        results_out.MI.Calib_MI_wsm(chuck_id).y_mirr.dy = -1 * results_out.MI.Calib_MI(chuck_id).y_mirr.dy;\r","    else\r","        results_out.MI.Calib_MI_wsm(chuck_id) = results_out.MI.Calib_MI(chuck_id);\r","    end    \r","    \r","    % Calculate mirror fingerprint (for debugging purposes)\r","    results_out.MI.fp(chuck_id) = bmmo_mirror_fingerprint(fitted_fps.MI(chuck_id), results_out.MI.Calib_MI(chuck_id), options);\r","    \r","    % Calculate mirror residual (for KPI, without average field)\r","    results_out.MI.res(chuck_id) = ovl_sub(mi_input(chuck_id), results_out.MI.fp(chuck_id));\r","\r","    [~, results_out.KA.Calib_KA(chuck_id), results_out.KA.fp(chuck_id)] = bmmo_generate_grid(mli(chuck_id), fit_coeffs.KA_POLY{chuck_id}, options);\r","    \r","    % Apply exposure side KA grid to measure side\r","    if options.KA_measure_enabled\r","        results_out.KA.Calib_KA_meas(chuck_id) = bmmo_KA_grid_expose_to_meas(results_out.KA.Calib_KA(chuck_id), options);\r","    end\r","    \r","    \r","    % FF BAO Correction for MI and KA (for M-side)\r","    [results_out.BAO.ff_6par_MI(chuck_id), results_out.BAO.ff_6par_KA(chuck_id)] = bmmo_ff_bao_correction(results_out.MI.Calib_MI_wsm(chuck_id), results_out.KA.Calib_KA_meas(chuck_id), options);\r","    results_out.BAO.ff_6par(chuck_id) = bmmo_add_BAOs(results_out.BAO.ff_6par_MI(chuck_id), results_out.BAO.ff_6par_KA(chuck_id));\r","    \r","    \r","    % Re-calculate KA-residue from initial input, debug only info\r","    results_out.KA.res(chuck_id) = ovl_sub(mi_input(chuck_id), results_out.KA.fp(chuck_id));\r","    \r","    % Model MI+KA\r","    % MI+KA fingerprint (for debugging purposes, without average field)\r","    results_out.MIKA.fp(chuck_id) = ovl_add(results_out.MI.fp(chuck_id), results_out.KA.fp(chuck_id));\r","    % Calculate MIKA-residue from initial input (without average field)\r","    results_out.MIKA.res(chuck_id) = ovl_sub(mi_input(chuck_id), results_out.MIKA.fp(chuck_id));\r","    \r","    % Find BAO in MIKA FP, to estimate KA-BAO crosstalk,\r","    [~, results_out.BAO.BAO_in_MIKA(chuck_id)] = bmmo_model_BAO(ovl_combine_linear(results_out.MIKA.fp(chuck_id), -1), options);\r","    \r","    results_out.interfield_residual(chuck_id) = ovl_sub(results_out.interfield_residual(chuck_id), results_out.MIKA.fp(chuck_id));\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[27,28,31,33,35,37,41,42,43,46,49,52,55,58,59,63,65,69,70,71,74,77,78,79,85,88,90,93,94,99,100,104,108,110,113,115],"UnhitLineNumbers":[80,81],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,6,0,12,0,12,0,12,0,0,0,6,12,12,0,0,6,0,0,6,0,0,6,0,0,6,0,0,6,12,0,0,0,6,0,12,0,0,0,12,12,12,0,0,12,0,0,12,12,12,0,0,0,0,0,12,0,0,12,0,12,0,0,12,12,0,0,0,0,12,12,0,0,0,12,0,0,0,12,0,12,0,0,12,0,12,0,0]}}