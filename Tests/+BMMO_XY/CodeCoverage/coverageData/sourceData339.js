var sourceData339 = {"FileContents":["classdef testBmmoValidateInput < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% verify function with valid input struct (one mark many fields)\r","        function Case1(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            \r","            % When\r","            bmmo_validate_input(ml);\r","            \r","            % Then\r","            bmmo_validate_input(bmmo_add_random_noise(ml, 'mark'));           \r","        end\r","        \r","        %% verify error is thrown for invalid input (wrong field names)\r","        function Case2(obj)\r","            % Given\r","            ml_wrong_shallow = bmmo_default_input;\r","            \r","            % When\r","            ml_wrong_shallow = rmfield(ml_wrong_shallow, 'nmark');\r","            noerror = false;\r","            \r","            % Then\r","            obj.verifyError(@() bmmo_validate_input(ml_wrong_shallow), \"\")\r","            if noerror\r","                error('test failed');\r","            end\r","        end\r","        \r","        %% verify error is thrown for invalid input (wrong field names)\r","        function Case3(obj)\r","            % Given\r","            ml_wrong_deep = bmmo_default_input;\r","            \r","            % When\r","            ml_wrong_deep.info.M.chuck_id = [1 2 1 2 1 2];\r","            noerror = false;    \r","            \r","            % Then\r","            obj.verifyError(@() bmmo_validate_input(ml_wrong_deep), \"\")\r","            if noerror\r","                error('test failed');\r","            end            \r","        end\r","        \r","        %% verify error is thrown for invalid input (duplicates)\r","        function Case4(obj)\r","            % Given\r","            ml_wrong_i = bmmo_default_input;\r","            \r","            % When\r","            newfields = ovl_get_fields(ml_wrong_i, 1:4);\r","            ml_wrong_i = ovl_combine_fields(ml_wrong_i, newfields);\r","            noerror = false;\r","            \r","            % Then\r","            obj.verifyError(@() bmmo_validate_input(ml_wrong_i), \"\")            \r","            if noerror\r","                error('test failed');\r","            end            \r","        end\r","        \r","        %% verify error is thrown for invalid input (inconsistent)\r","        function Case5(obj)\r","            % Given\r","            ml_wrong_i = bmmo_default_input;\r","            \r","            % When\r","            ml_wrong_i.nmark = 34;\r","            ml_wrong_i.nfield = 244;\r","            noerror = false;\r","            \r","            % Then\r","            obj.verifyError(@() bmmo_validate_input(ml_wrong_i), \"\")            \r","            if noerror\r","                error('test failed');\r","            end\r","        end\r","        \r","        %% verify that configurable_options are ignored and verify error is thrown for invalid input (wrong field names)\r","        function Case6(obj)\r","            % Given\r","            ml_config = bmmo_default_input;\r","            \r","            % When\r","            ml_config.configurable_options = 1;\r","            \r","            % Then\r","            bmmo_validate_input(ml_config);\r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[8,11,14,20,23,24,27,28,36,39,40,43,44,52,55,56,57,60,61,69,72,73,74,77,78,86,89,92],"UnhitLineNumbers":[29,45,62,79],"HitCount":[0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0]}}