var sourceData780 = {"FileContents":["function SUT = createSUT(obj, functionString)\r","% function SUT = createSUT(functionString, tempDir)\r","%\r","% This function creates a struct containing function handles to all the\r","% function definitions contained in the file associated with\r","% \"functionString\".\r","\r","\r","import BMMO_XY.tools.*\r","\r","%% Define the file names\r","fullFileName = which(functionString);\r","\r","[~, fileName, fileExt] = fileparts(fullFileName);\r","\r","SUTfileName = [obj.testTempDir filesep fileName '_SUT' fileExt];\r","\r","%% Read the function file\r","filehandle = fopen(fullFileName, 'r');\r","if filehandle == -1\r","    error(getErrorId('openFile'), 'could not open file: %s', fullFileName);\r","end\r","lines = {};\r","try\r","    while ~feof(filehandle)\r","        lines = [lines; {fgetl(filehandle)}];               \r","    end\r","catch ME\r","    fclose(filehandle);\r","    rethrow(ME)\r","end\r","fclose(filehandle);\r","\r","%% Append the top function that will return the function handles\r","lines = [{['function functionHandles = ' fileName '_SUT()']}; ...\r","         { 'functionHandles = localfunctions();'}; ...\r","         { 'end'}; ...\r","         { ''}; ...\r","         lines];\r","\r","%% Write the SUT .m file\r","filehandle = fopen(SUTfileName, 'w');\r","if filehandle == -1\r","    error(getErrorId('openSUTfile'), 'could not open file: %s', SUTfileName);\r","end\r","try\r","    for index = 1 : length(lines)\r","        fprintf(filehandle, '%s\\n', lines{index});\r","    end\r","catch ME\r","    fclose(filehandle);\r","    rethrow(ME)\r","end\r","fclose(filehandle);\r","\r","%% Create the SUT struct\r","functionHandles = feval([fileName '_SUT']);\r","for index = 1 : length(functionHandles)\r","    SUT.(func2str(functionHandles{index})) = functionHandles{index};\r","end\r","\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[12,14,16,19,20,21,23,24,25,26,28,29,30,32,35,39,42,43,44,46,47,48,50,51,52,54,57,58,59],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}