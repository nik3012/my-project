var sourceData44 = {"FileContents":["function mlo = bmmo_average_chuck(mli, options)\r","% function mlo = bmmo_average_chuck(mli, options)\r","%\r","% Given a ml structure with M wafers, or an M * N overlay matrix,\r","% return the average overlay values per chuck\r","%\r","% Input: \r","%   mli: either a structure, or an M * N matrix of overlay values\r","%   options: structure containing the field chuck_info\r","%\r","% Output:\r","%   mlo: either a 1 * 2 struct array, or 2 * N matrix of overlay\r","%        values averaged per chuck. If the input is provided as an ml \r","%        structure then mlo(1) and mlo(2) represent the wafers averaged for\r","%        chuck 1 and chuck 2, respectively   \r","\r","MAX_CHUCK = 2;\r","\r","% ensure options.chuck_usage.chuck_id is horizontal (for compatibility with\r","% unit tests)\r","options.chuck_usage.chuck_id = reshape(options.chuck_usage.chuck_id, 1, []);\r","options.chuck_usage.chuck_id_used = reshape(options.chuck_usage.chuck_id_used, 1, []);\r","\r","if isstruct(mli)\r","    % generate the input matrix from the mli structure; consists of\r","    % concatenated dx,dy data from the input wafers\r","    in_matrix = [horzcat(mli.layer.wr.dx); horzcat(mli.layer.wr.dy)];\r","    mlo = ovl_create_dummy(ovl_get_wafers(mli, 1));\r","    mlo = repmat(mlo, 1, MAX_CHUCK);\r","else\r","    in_matrix = mli;\r","end\r","\r","out_matrix = zeros(size(in_matrix, 1), MAX_CHUCK);\r","\r","% get the average per chuck\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    wafer_on_this_chuck = find(options.chuck_usage.chuck_id == chuck_id);\r","\r","    mean_input = (in_matrix(:, wafer_on_this_chuck)); \r","    out_matrix(:, chuck_id) = (nanmean_r12(mean_input,2)); \r","end\r","\r","if isstruct(mli)     \r","    for chuck_id = options.chuck_usage.chuck_id_used\r","       tmp = ovl_get_wafers(mli, 1);\r","       lenx = length(tmp.layer.wr.dx);\r","       tmp.layer.wr.dx = out_matrix(1:lenx, chuck_id);\r","       tmp.layer.wr.dy = out_matrix((lenx+1):end, chuck_id);\r","       mlo(chuck_id) = tmp;\r","    end\r","else\r","    mlo = out_matrix;\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[17,21,22,24,27,28,29,30,31,34,37,38,40,41,44,45,46,47,48,49,50,52,53],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2127,0,0,0,2127,2127,0,2127,0,0,2124,2124,2124,3,3,0,0,2127,0,0,2127,4146,0,4146,4146,0,0,2127,2124,4141,4141,4141,4141,4141,0,3,3,0,0]}}