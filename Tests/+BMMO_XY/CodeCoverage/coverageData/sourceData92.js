var sourceData92 = {"FileContents":["function [coefficients, fps_fit, ml_res] = bmmo_fit_fingerprints(ml_ch, fps, options, C)\r","% function [coefficients, fps_fit, ml_res] = bmmo_fit_fingerprints(ml_ch, fps, options, C)\r","%\r","% This function fits the input struct to fps and returns the fit\r","% coefficients, residue after fitting and fitted fingerprints.\r","%\r","% Input :\r","% ml_ch: input structure, averaged per chuck\r","% fps : Fingerprints as a 1 * n cell array containing different mls each describing\r","% a fingerprint fps{1} = ml_fp1; fps{2} = ml_fp2; etc.\r","% options: BMMO/BL3 options structure\r","% C: Constraints matrix\r","% Note that ml_ch and fps should have the same layout.\r","%\r","% Output :\r","% coefficients : fit coefficients per chuck (2 * n cell array)\r","% fps_fit : fitted fingerprints per chuck (2 * n cell array)\r","% ml_res: residual, per chuck\r","%\r","% For details of the model and definitions of in/out interfaces, refer to\r","% D000810611 EDS BMMO NXE drift control model\r","%\r","% Construct the design matrix from the FPS. The structure for two chucks is\r","% as follows:\r","%\r","%       W +++++++++++++++++++++++\r","%       H +          +          +\r","%       F +          +          +\r","%       P +  OTHER   +          +\r","%         +          +  ZEROS   +\r","%       C + FPS (CH1)+          +\r","%       H +          +          +\r","%       1 +          +          +\r","%       ------------------------+\r","%       W +          +          +\r","%       H +          +          +\r","%       F +          +  OTHER   +\r","%       P +  ZEROS   +          +\r","%         +          + FPS (CH2)+\r","%       C +          +          +\r","%       H +          +          +\r","%       2 +++++++++++++++++++++++\r","%\r","% For one chuck,\r","%\r","%         ++++++++++++\r","%         +          +\r","%         +          +\r","%       W +  OTHER   +\r","%       H +          +\r","%       F +   FPS    +\r","%       P +          +\r","%         +          +\r","%         ++++++++++++\r","\r","fn = fieldnames(fps);\r","num_fps = length(fn);\r","% for KA sub model grid to test out fine\r","if size(fps,2) == 1\r","    fps(2).KA = [];\r","end\r","if options.chuck_usage.nr_chuck_used == 2\r","    for i = 1:num_fps\r","        if ~length(fps(2).(fn{i})) > 0\r","            fps(2).(fn{i})= fps(1).(fn{i});\r","        end\r","    end\r","    fps_c1 = fps_to_mat(fps(1),fn);\r","    ml_c = sub_make_columns(ml_ch(1));\r","    \r","    C_full = zeros(0, size(fps_c1,2)*options.chuck_usage.nr_chuck_used);\r","    \r","elseif  options.chuck_usage.chuck_id_used == 2\r","    for i = 1:num_fps\r","        if ~length(fps(2).(fn{i}))>0         \r","            fps(2).(fn{i})= fps(1).(fn{i});\r","        end\r","    end\r","end\r","\r","% design matrix\r","if options.chuck_usage.nr_chuck_used == 1\r","    chuck_id = options.chuck_usage.chuck_id_used;\r","    fps_c1 = fps_to_mat(fps(chuck_id),fn);\r","    ml_c = sub_make_columns(ml_ch(chuck_id));\r","    fps_DM = fps_c1;\r","    C_full = zeros(0, size(fps_c1,2)*options.chuck_usage.nr_chuck_used);\r","elseif ~isfield(fps, 'WH')\r","    fps_c2 = fps_to_mat(fps(2),fn);\r","    fps_DM = [fps_c1 zeros(size(fps_c2));zeros(size(fps_c2)) fps_c2];\r","    ml_c = [ml_c ;sub_make_columns(ml_ch(2))];\r","elseif isfield(fps, 'WH')\r","    fps_c2=fps_to_mat(fps(2),fn);\r","    fpsWH_c2 = fps_c2(:,1);\r","    fps_c2(:,1) = [];\r","    fps_DM = [fps_c1 zeros(size(fps_c2)); fpsWH_c2 zeros(size(fps_c2)) fps_c2];\r","    ml_c = [ml_c ;sub_make_columns(ml_ch(2))];\r","    C_full = C_full(:,1:end-1);\r","end\r","\r","mes_DM = size(fps_DM,1);\r","\r","% no. of columns  of each fps\r","fps_col=zeros(1,num_fps);\r","for i = 1:num_fps\r","    fps_col(i)= size(fps(1).(fn{i}), 2);\r","end\r","\r","if options.chuck_usage.nr_chuck_used == 1\r","    chuckid=options.chuck_usage.chuck_id_used;\r","    fps_index(chuckid)= indexing_fps(fn,fps_col);\r","    C_full = C_full_fun(C,C_full,fn,fps_index,chuckid); \r","end\r","\r","if options.chuck_usage.nr_chuck_used == 2\r","    fps_index= indexing_fps(fn,fps_col);\r","    fps_index_temp = structfun(@(x) x + size(fps_c2,2), fps_index, 'UniformOutput', false);\r","    fps_index(2) = fps_index_temp;\r","    if isfield(fps, 'WH')\r","        fps_index(2).WH = 1;\r","    end \r","    C_full = C_full_fun(C,C_full,fn,fps_index,[1,2]);\r","end\r","\r","% remove NaNs, else pinv --> error\r","rem1 = isnan(ml_c);\r","rem2 = any(isnan(fps_DM), 2); % true for any row which contains a NaN\r","rem = rem1 | rem2;\r","ml_c(rem) = [];\r","fps_DM(rem,:) = [];\r","\r","T=null(C_full);\r","\r","if isempty(C)\r","    temp = pinv(fps_DM);     % (pseudo)inverse of matrix\r","    coeff = temp * ml_c;    % get coefficients\r","else\r","    %   p = T t = T (M T)^(-p) v\r","    temp = pinv(fps_DM*T);\r","    coeff = T*temp*ml_c;\r","end\r","\r","% fill output per chuck (ml_res- if requested)\r","if(nargout > 2)\r","    ml_res = ml_ch; %intializing\r","    fp = fps_DM * coeff;\r","    res = ml_c - fp;\r","    resdata = zeros(mes_DM, 1) * NaN;\r","    resdata(~rem) = res;\r","    \r","    if options.chuck_usage.nr_chuck_used == 1\r","        chuck_id = options.chuck_usage.chuck_id_used;\r","        ml_res(chuck_id).layer.wr.dx = resdata(1:(mes_DM/2));\r","        ml_res(chuck_id).layer.wr.dy = resdata(((mes_DM/2)+1):mes_DM);\r","    elseif  options.chuck_usage.nr_chuck_used == 2\r","        Ni = 1;\r","        for chuck_id = 1:2      \r","            ml_res(chuck_id).layer.wr.dx = resdata(Ni:(mes_DM/4) + Ni-1);\r","            ml_res(chuck_id).layer.wr.dy = resdata((((mes_DM/4) + Ni):mes_DM/2 + Ni-1));\r","            Ni = mes_DM/2+1;\r","        end\r","    end\r","end\r","\r","% fill output per chuck (coefficients and fps_fit)\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    for i = 1:length(fn)\r","        coefficients.(fn{i})(chuck_id) = {coeff(fps_index(chuck_id).(fn{i}))};\r","        fps_fit.(fn{i})(chuck_id) = sub_make_ml(ml_ch(chuck_id), fps(chuck_id).(fn{i}), coefficients.(fn{i})(chuck_id));\r","    end\r","end\r","\r","\r","%sub functions\r","function mat= fps_to_mat(fps_struct,fn)\r","mat=[];\r","for i = 1:length(fn)    \r","    mat=[mat fps_struct.(fn{i})];\r","end\r","\r","\r","function o = sub_make_columns(mli)\r","o = [mli.layer.wr.dx ; mli.layer.wr.dy];\r","\r","\r","function mlo = sub_make_ml(mlt, fps, coeff)\r","mlo = mlt;\r","fps_col = fps*coeff{:};\r","dx_last = length(fps_col)/2;\r","mlo.layer.wr.dx = fps_col(1:dx_last);\r","mlo.layer.wr.dy = fps_col((dx_last + 1):end);\r","\r","\r","function fps_index=indexing_fps(fn,fps_col)\r","current_index=1;\r","for i = 1:length(fn)\r","    new_index = current_index  + fps_col(i) - 1;\r","    fps_index.(fn{i}) = current_index:new_index;\r","    current_index = new_index + 1;\r","end\r","\r","\r","function C_full = C_full_fun(C,C_full,fn,fps_index,ii)\r","for nr_chuck= ii\r","    for i = 1:length(fn)\r","        if isfield(C, fn{i})\r","            C_full(end + (1:size(C.(fn{i}), 1)), fps_index(nr_chuck).(fn{i})) = C.(fn{i});\r","        end\r","    end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[56,57,59,60,62,63,64,65,68,69,71,73,74,75,76,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,104,105,106,109,110,111,112,115,116,117,118,119,120,122,126,127,128,129,130,132,134,135,136,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,166,167,168,169,176,177,178,183,187,188,189,190,191,195,196,197,198,199,204,205,206],"UnhitLineNumbers":[137,139,140,207],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1116,1116,0,1116,32,0,1116,297,673,226,0,0,297,297,0,297,0,819,393,2703,1572,0,0,0,0,0,1116,819,819,819,819,819,297,148,148,148,149,149,149,149,149,149,149,0,0,1116,0,0,1116,1116,6310,0,0,1116,819,819,819,0,0,1116,297,297,297,297,149,0,297,0,0,0,1116,1116,1116,1116,1116,0,1116,0,1116,1116,1116,0,0,0,0,0,0,0,1116,1116,1116,1116,1116,1116,0,1116,819,819,819,297,297,297,594,594,594,0,0,0,0,0,1116,1413,6983,6983,0,0,0,0,0,0,1413,1413,6983,0,0,0,0,1413,0,0,0,6983,6983,6983,6983,6983,0,0,0,1116,1116,6310,6310,6310,0,0,0,0,1116,1413,6983,0,0,0,0,0]}}