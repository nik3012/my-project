var sourceData463 = {"FileContents":["function assert_equal_wdm_OTAS_LIS(OTAS, VCP, WDM, print_type, plot_type)\r","\r","% Function for VCP validation: delta, no. of valids, plots of delta\r","% OTAS and VCP.\r","\r","%\r","\r","% IINPUTS\r","%OTAS : OTAS input\r","\r","%VCP : VCP model input\r","\r","\r","\r","%OPTIONAL INPUTS\r","% print_type = 1, shows the delta for each chuck/wafer\r","% print_type = 2, shows the delta and number of valid points for each chuck/wafer\r","% plot_type = 1, Plots the delta ovl plots for each chuck/wafer\r","% plot_type = 2, Plots the OTAS,VCP and delta ovl plots for each chuck/wafer\r","\r","threshold = 5e-13;\r","\r","\r","\r","if nargin < 5\r","    plot_type = 0;\r","    \r","else\r","    openppt('new')\r","end\r","\r","if nargin < 4\r","    print_type =0;\r","    \r","end\r","\r","if nargin < 3\r","    WDM = 'all';\r","    \r","end\r","\r","\r","f1 = fieldnames(OTAS);\r","f2  = fieldnames(VCP);\r","corr = {'total_unfiltered','total_filtered'};\r","\r","\r","\r","if contains(WDM, 'all')\r","    str2 = {'Wafer_Heating', 'Mirror_exposure','KA_exposure_grid','bao','correction_overlay','Intrafield_nce_18par'};\r","    str1 = {'WH', 'MI','KA','BAO','TotalSBCcorrection','Intrafield_18parNCE'};\r","    str3 = {'uncontrolled_meas', 'susd_correction','applied_inline_sdm', 'controlled', 'sbc_residual_outliers_removed', 'raw_intrafield'};\r","    str4 = {'uncontrolled_overlay', 'total_filtered_susd', 'previous_actuated_inlineSDM', 'controlled_overlay', 'residual_overlay', 'total_filtered_Intrafield_raw'};\r","    \r","else\r","    str2 = {'Wafer_Heating', 'Mirror_exposure','KA_exposure_grid','bao','correction_overlay','Intrafield_nce_18par'};\r","    str1 = {'WH', 'MI','KA','BAO','TotalSBCcorrection','Intrafield_18parNCE'};\r","    str3 = {'uncontrolled_meas', 'susd_correction','applied_inline_sdm', 'controlled', 'sbc_residual_outliers_removed', 'raw_intrafield'};\r","    str4 = {'uncontrolled_overlay', 'total_filtered_susd', 'previous_actuated_inlineSDM', 'controlled_overlay', 'residual_overlay', 'total_filtered_Intrafield_raw'};\r","    index = contains(str1,WDM);\r","    str2 = str2(index);\r","    str1 = str1(index);   \r","end\r","\r","\r","\r","    OTAS1 = OTAS;\r","    for ichk = 1:2\r","        \r","        OTAS.total_unfiltered_Intrafield_18parNCE(ichk) = ovl_average_fields(OTAS1.total_unfiltered_Intrafield_18parNCE(ichk));\r","        OTAS.total_filtered_Intrafield_18parNCE(ichk)   = ovl_average_fields(OTAS1.total_filtered_Intrafield_18parNCE(ichk));\r","       \r","        VCP.total_filtered_Intrafield_raw(ichk)   = ovl_average_fields(VCP.total_filtered_Intrafield_raw(ichk));\r","        VCP.total_filtered_Intrafield_nce_18par(ichk)   = ovl_average_fields(VCP.total_filtered_Intrafield_nce_18par(ichk));\r","        VCP.total_unfiltered_Intrafield_nce_18par(ichk) = ovl_average_fields(VCP.total_unfiltered_Intrafield_nce_18par(ichk));\r","        \r","        VCP.previous_actuated_inlineSDM(ichk) = ovl_average_fields(VCP.previous_actuated_inlineSDM(ichk));\r","        \r","        % correct for RINT microshift\r","        options.x_shift = [0,-2.600000000000000e-04;0,-2.600000000000000e-04];\r","        %[yc yf; yc yf]\r","        options.y_shift = [0,-4.000000000000000e-05;0,-4.000000000000000e-05];\r","        if isfield(OTAS,'susd_correction')\r","         OTAS.susd_correction(ichk) = bmmo_shift_fields(OTAS.susd_correction(ichk) , options.x_shift, options.y_shift);\r","        end\r","         OTAS.controlled(ichk) = bmmo_shift_fields(OTAS.controlled(ichk) , options.x_shift, options.y_shift);\r","         OTAS.sbc_residual_outliers_removed(ichk) = bmmo_shift_fields(OTAS.sbc_residual_outliers_removed(ichk) , options.x_shift, options.y_shift);\r","         \r","    end\r","\r","\r","\r","\r","for iii=1:length(str1)\r","    \r","    if any(contains(f1,str1{iii})) && any(contains(f2,str2{iii}))\r","        \r","        for ii = 1:length(corr)\r","            mli1 = OTAS.([corr{ii} '_' str1{iii}]);\r","            mli2 = VCP.([corr{ii} '_' str2{iii}]);\r","            plot_name = [(corr{ii}) ' ' (str1{iii})];\r","            \r","            if mli2(1).nfield == 1\r","                for ic=1:2\r","                    mli2(ic).wd = mli1(ic).wd;\r","                end\r","            end\r","            \r","            for i=1:length(mli1)\r","                ml_delta(i) = ovl_sub(mli1(i), mli2(i));\r","                \r","            end\r","            \r","            if ~isequal(ml_delta(1).nmark,0)\r","                \r","                \r","                \r","                \r","                if plot_type ==1\r","                    for  i=1: length(mli1)\r","                        chr = int2str(i);\r","                        if mli1(1).nfield ==1\r","                            fopc(ml_delta(i),'field','title',['Delta Chuck ',chr])\r","                        else\r","                            fopc(ml_delta(i),'title',['Delta Chuck ',chr])\r","                        end\r","                    end\r","                    toppt('Delta ovl plot for each Chuck', plot_name)\r","                    close all\r","                    \r","                elseif plot_type == 2\r","                    for  i=1: length(mli1)\r","                        chr = int2str(i);\r","                        if mli1(1).nfield ==1\r","                            fopc(mli1(i),'field','title',['OTAS Chuck ',chr])\r","                            fopc(mli2(i),'field','title',['VCP Chuck ',chr])\r","                            fopc(ml_delta(i),'field','title',['Delta Chuck ',chr])\r","                        else\r","                            fopc(mli1(i),'title',['OTAS Chuck ',chr])\r","                            fopc(mli2(i),'title',['VCP Chuck ',chr])\r","                            fopc(ml_delta(i),'title',['Delta Chuck ',chr])\r","                        end\r","                        \r","                    end\r","                    toppt('OTAS vs VCP: ovl plot for each chuck',plot_name)\r","                    close all\r","                    \r","                end\r","                for i=1: length(mli1)\r","                    ax(i) = max(abs(ml_delta(i).layer.wr.dx));\r","                    axn1(i) = sum(~isnan(mli1(i).layer.wr.dx));\r","                    axn2(i) = sum(~isnan(mli2(i).layer.wr.dx));\r","                    axn3(i) = sum(~isnan(ml_delta(i).layer.wr.dx));\r","                    ay(i) =  max(abs(ml_delta(i).layer.wr.dy));\r","                    ayn1(i) = sum(~isnan(mli1(i).layer.wr.dy));\r","                    ayn2(i) = sum(~isnan(mli2(i).layer.wr.dy));\r","                    ayn3(i) = sum(~isnan(ml_delta(i).layer.wr.dy));\r","                end\r","                \r","                if print_type == 0\r","                    for  i=1: length(mli1)\r","                        deltaok = ax(i) < threshold & ay(i) < threshold;\r","                        if deltaok && isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            disp([plot_name ' Chuck ' num2str(i) ' Delta is OK!, smaller than ' num2str(threshold) ' and No. of marks are same'])\r","                            \r","                            \r","                        elseif deltaok && ~isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            disp([plot_name ' Chuck ' num2str(i) ' Delta is OK!, smaller than ' num2str(threshold)])\r","                            warning([plot_name ' Chuck ' num2str(i) 'No. of marks are not same!'])\r","                            \r","                        elseif ~deltaok && isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            warning([plot_name ' Chuck ' num2str(i) ' P2p delta larger than ' num2str(threshold) ' check delta plot (No. of Marks are same)'])\r","                            \r","                        elseif ~deltaok && ~isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            warning([plot_name ' Chuck ' num2str(i) ' P2p delta larger than ' num2str(threshold) ' check delta plot (No. of Marks are not same)'])\r","                        end\r","                    end\r","                    \r","                    \r","                elseif print_type == 1\r","                    \r","                    disp([ 'Delta max values for dx and dy (per chuck)' ' ' plot_name])\r","                    for  i=1: length(mli1)\r","                        format long\r","                        disp([ax(i), ay(i)])\r","                    end\r","                    \r","                elseif print_type == 2\r","                    \r","                    disp([ 'Delta max values for dx and dy (per chuck)' ' ' plot_name])\r","                    for  i=1: length(mli1)\r","                        format long\r","                        disp([ax(i), ay(i)])\r","                    end\r","                    \r","                    \r","                    disp([ 'Number of marks (per chuck) - OTAS ( dx and dy) and VCP (dx and dy)' ' ' plot_name])\r","                    for  i=1: length(mli1)\r","                        format long\r","                        disp([axn1(i),ayn1(i),  axn2(i), ayn2(i)])\r","                    end\r","                    \r","                elseif print_type == 3\r","                    \r","                    disp([ 'Delta max values for dx and dy (per chuck)' ' ' plot_name])\r","                    for  i=1: length(mli1)\r","                        format long\r","                        disp([ax(i), ay(i)])\r","                    end\r","                    \r","                    \r","                    disp([ 'Number of marks (per chuck) - OTAS ( dx and dy) and VCP (dx and dy)' ' ' plot_name])\r","                    for  i=1: length(mli1)\r","                        format long\r","                        disp([axn1(i),ayn1(i),  axn2(i), ayn2(i)])\r","                    end\r","                    \r","                    disp([ 'Number of marks (per chuck) - Delta (dx and dy)' ' ' plot_name])\r","                    for  i=1: length(mli1)\r","                        format long\r","                        disp([axn3(i),ayn3(i)])\r","                    end\r","                    \r","                end\r","                \r","                clear ml_delta\r","            elseif isequal(ml_delta.nmark,0)\r","                disp(['Zero Number of marks !!!!!,']);\r","            end\r","            \r","        end\r","    end\r","end\r","\r","for iii = 1:length(str3)\r","    if  isfield(OTAS,str3{iii}) && any(contains(f2,str4{iii}))\r","        \r","        \r","        mli1 = OTAS.(str3{iii});\r","        mli2 = VCP.(str4{iii});\r","        plot_name =  (str4{iii});\r","        \r","        if mli2(1).nfield == 1\r","            for ic=1:2\r","                mli2(ic).wd = mli1(ic).wd;\r","            end\r","        end\r","        \r","        for i=1:length(mli1)\r","            ml_delta(i) = ovl_sub(mli1(i), mli2(i));\r","            \r","        end\r","        \r","        if ~isequal(ml_delta(1).nmark,0)\r","            \r","            \r","            \r","            \r","            if plot_type ==1\r","                for  i=1: length(mli1)\r","                    chr = int2str(i);\r","                    if mli1(1).nfield ==1\r","                        fopc(ml_delta(i),'field','title',['Delta Chuck ',chr])\r","                    else\r","                        fopc(ml_delta(i),'title',['Delta Chuck ',chr])\r","                    end\r","                end\r","                toppt('Delta ovl plot for each Chuck', plot_name)\r","                close all\r","                \r","            elseif plot_type == 2\r","                for  i=1: length(mli1)\r","                    chr = int2str(i);\r","                    if mli1(1).nfield ==1\r","                        fopc(mli1(i),'field','title',['OTAS Chuck ',chr])\r","                        fopc(mli2(i),'field','title',['VCP Chuck ',chr])\r","                        fopc(ml_delta(i),'field','title',['Delta Chuck ',chr])\r","                    else\r","                        fopc(mli1(i),'title',['OTAS Chuck ',chr])\r","                        fopc(mli2(i),'title',['VCP Chuck ',chr])\r","                        fopc(ml_delta(i),'title',['Delta Chuck ',chr])\r","                    end\r","                    \r","                end\r","                toppt('OTAS vs VCP: ovl plot for each chuck',plot_name)\r","                close all\r","                \r","            end\r","            for i=1: length(mli1)\r","                ax(i) = max(abs(ml_delta(i).layer.wr.dx));\r","                axn1(i) = sum(~isnan(mli1(i).layer.wr.dx));\r","                axn2(i) = sum(~isnan(mli2(i).layer.wr.dx));\r","                axn3(i) = sum(~isnan(ml_delta(i).layer.wr.dx));\r","                ay(i) =  max(abs(ml_delta(i).layer.wr.dy));\r","                ayn1(i) = sum(~isnan(mli1(i).layer.wr.dy));\r","                ayn2(i) = sum(~isnan(mli2(i).layer.wr.dy));\r","                ayn3(i) = sum(~isnan(ml_delta(i).layer.wr.dy));\r","            end\r","            \r","            if print_type == 0\r","                    for  i=1: length(mli1)\r","                        deltaok = ax(i) < threshold & ay(i) < threshold;\r","                        if deltaok && isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            disp([plot_name ' Chuck ' num2str(i) ' Delta is OK!, smaller than ' num2str(threshold) ' and No. of marks are same'])\r","                            \r","                            \r","                        elseif deltaok && ~isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            disp([plot_name ' Chuck ' num2str(i) ' Delta is OK!, smaller than ' num2str(threshold)])\r","                            warning([plot_name ' Chuck ' num2str(i) 'No. of marks are not same!'])\r","                            \r","                        elseif ~deltaok && isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            warning([plot_name ' Chuck ' num2str(i) ' P2p delta larger than ' num2str(threshold) ' check delta plot (No. of Marks are same)'])\r","                            \r","                        elseif ~deltaok && ~isequal(axn1(i),axn2(i),axn3(i),ayn1(i),ayn2(i),ayn3(i))\r","                            warning([plot_name ' Chuck ' num2str(i) ' P2p delta larger than ' num2str(threshold) ' check delta plot (No. of Marks are not same)'])\r","                        end\r","                    end\r","                \r","                \r","            elseif print_type == 1\r","                \r","                disp([ 'Delta max values for dx and dy (per chuck)' ' ' plot_name])\r","                for  i=1: length(mli1)\r","                    format long\r","                    disp([ax(i), ay(i)])\r","                end\r","                \r","            elseif print_type == 2\r","                \r","                disp([ 'Delta max values for dx and dy (per chuck)' ' ' plot_name])\r","                for  i=1: length(mli1)\r","                    format long\r","                    disp([ax(i), ay(i)])\r","                end\r","                \r","                \r","                disp([ 'Number of marks (per chuck) - OTAS ( dx and dy) and VCP (dx and dy)' ' ' plot_name])\r","                for  i=1: length(mli1)\r","                    format long\r","                    disp([axn1(i),ayn1(i),  axn2(i), ayn2(i)])\r","                end\r","                \r","            elseif print_type == 3\r","                \r","                disp([ 'Delta max values for dx and dy (per chuck)' ' ' plot_name])\r","                for  i=1: length(mli1)\r","                    format long\r","                    disp([ax(i), ay(i)])\r","                end\r","                \r","                \r","                disp([ 'Number of marks (per chuck) - OTAS ( dx and dy) and VCP (dx and dy)' ' ' plot_name])\r","                for  i=1: length(mli1)\r","                    format long\r","                    disp([axn1(i),ayn1(i),  axn2(i), ayn2(i)])\r","                end\r","                \r","                disp([ 'Number of marks (per chuck) - Delta (dx and dy)' ' ' plot_name])\r","                for  i=1: length(mli1)\r","                    format long\r","                    disp([axn3(i),ayn3(i)])\r","                end\r","                \r","            end\r","            \r","            clear ml_delta\r","        elseif isequal(ml_delta.nmark,0)\r","            disp(['Zero Number of marks !!!!!,']);\r","        end\r","        \r","    end\r","    \r","    \r","end\r","\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[21,25,26,28,29,32,33,37,38,43,44,45,49,50,51,52,53,55,56,57,58,59,60,61,62,67,68,70,71,73,74,75,77,80,82,83,84,86,87,94,96,98,99,100,101,103,104,105,109,110,114,119,120,121,122,123,124,125,128,129,131,132,133,134,135,136,137,138,139,140,141,145,146,149,150,151,152,153,154,155,156,157,160,161,162,163,164,167,168,169,171,172,174,175,180,182,183,184,185,188,190,191,192,193,197,198,199,200,203,205,206,207,208,212,213,214,215,218,219,220,221,226,227,228,235,236,239,240,241,243,244,245,249,250,254,259,260,261,262,263,264,265,268,269,271,272,273,274,275,276,277,278,279,280,281,285,286,289,290,291,292,293,294,295,296,297,300,301,302,303,304,307,308,309,311,312,314,315,320,322,323,324,325,328,330,331,332,333,337,338,339,340,343,345,346,347,348,352,353,354,355,358,359,360,361,366,367,368],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}