var sourceData280 = {"FileContents":["classdef testBmmoFlattenCell < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% 1 heavily nested cell array\r","        function test_flatten_cell_nested(obj)\r","            % Given\r","            cell1 = {'one'};\r","            cell2 = {cell1, 'two', 'three'};\r","            cell4 = {'five', 'six'};\r","            cell3 = {cell2, 'four', cell4};\r","            cell5 = {cell3, 'seven'};\r","            cell6 = {'zero', cell5};\r","            cellout = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven'};\r","            \r","            % When\r","            test_cellout = bmmo_flatten_cell(cell6);\r","            \r","            % Then\r","            obj.verifyWithinTol(cellout, test_cellout);\r","        end\r","        \r","        %% 2 practical case\r","        function test_flatten_cell_practical(obj)\r","            % Given\r","            cell1 = {'tx', 'ty', 'rwa', 'rws', 'mwa', 'mws'};\r","            cell2 = {'xonly', cell1};\r","            cellout = {'xonly', 'tx', 'ty', 'rwa', 'rws', 'mwa', 'mws'};\r","            \r","            % When\r","            test_cellout = bmmo_flatten_cell(cell2);\r","            \r","            % Then\r","            obj.verifyWithinTol(cellout, test_cellout);\r","        end\r","        \r","        %% 3 already flat cell array\r","        function test_flatten_cell_flat(obj)\r","            % Given\r","            cell1 = {'tx', 'ty', 'rwa', 'rws', 'mwa', 'mws'};\r","            \r","            % When\r","            test_cellout = bmmo_flatten_cell(cell1);\r","            \r","            % Then\r","            obj.verifyWithinTol(cell1, test_cellout);\r","        end\r","        \r","        %% 4 already flat cell array\r","        function test_flatten_cell_empty(obj)\r","            % Given\r","            cell1 = {};\r","            \r","            % When\r","            test_cellout = bmmo_flatten_cell(cell1);\r","            \r","            % Then\r","            obj.verifyWithinTol(cell1, test_cellout);\r","        end\r","        \r","    end\r","    \r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,12,13,14,17,20,26,27,28,31,34,40,43,46,52,55,58],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0]}}