var sourceData536 = {"FileContents":["classdef (Sealed) bmmoDecrypterConfig\r","%% <help_update_needed>\r","%  for the class and for the function\r","%\r","%    \r","    properties\r","\r","        decryptionMethod    = '';\r","        decrypterExecutable = 'NOT PROVIDED';\r","        token               = 'NOT PROVIDED';\r","        comment             = 'NOT PROVIDED';\r","        \r","    end\r","    \r","    properties (Constant, Hidden = true)\r","        \r","        dialogPrompt      = {'Enter web decrypter service token:', 'Enter comment:'};\r","        dialogTitle       = 'Credential input';\r","        dialogDims        = [1 35];\r","        dialogDefInput    = {'','Baseliner_Overlay_EUV'};\r","        dialogWindowStyle = 'normal';\r","        \r","        defaultDecrypterLocations = {'C:\\Program Files\\ASML\\ASML Data Decrypter\\ASML Data Decrypter.exe',...\r","                                     'C:\\Program Files\\ASML\\ADELDecryptor\\ADELDecryptor.exe',...\r","                                     'C:\\Program Files\\ASML\\ADELDecryptor 1.4\\ADELDecryptor.exe'\r","                                     };\r","        \r","    end\r","    \r","    properties (Hidden = true)\r","        \r","        fileName\r","        filePath\r","        file\r","        \r","    end\r","    \r","    methods\r","        \r","        function obj = bmmoDecrypterConfig(fileName)\r","\r","            if isfile(which(fileName))\r","                [obj.filePath, fileName, fileExt] = fileparts(bmmo_create_full_file_path(fileName));\r","                obj.fileName                      = [fileName fileExt];\r","                obj.file                          = [obj.filePath filesep obj.fileName];\r","                \r","                valid = readDecrypterConfiguration; \r","                if ~valid\r","                    fprintf('\"%s\" points to an incorrect decrypter executable, it will be updated\\n', obj.file);    \r","                    constructDecrypterConfiguration;\r","                    obj.writeJson(obj, obj.file);\r","                end                \r","            else\r","                obj.fileName = fileName;\r","                fprintf('\"%s\" not in search path\\n', obj.fileName);\r","                constructDecrypterConfiguration;\r","                obj.writeJson(obj);\r","            end\r","            \r","            obj.decryptionMethod = determineDecryptionMethod;\r","                    \r","            \r","            function constructDecrypterConfiguration\r","                \r","                if ispc\r","                    if isfile(obj.defaultDecrypterLocations{1})\r","                        obj.decrypterExecutable = obj.defaultDecrypterLocations{1};\r","                    elseif isfile(obj.defaultDecrypterLocations{2})\r","                        obj.decrypterExecutable = obj.defaultDecrypterLocations{2};\r","                    elseif isfile(obj.defaultDecrypterLocations{3})\r","                        obj.decrypterExecutable = obj.defaultDecrypterLocations{3};\r","                    else\r","                        fprintf('Requesting the user to specify the location of decrypter executable via GUI\\n');\r","                        [fileNameDecryptor, filePathDecrypter] = uigetfile('', '\"ADELDecryptor.exe\" or \"ASML Data Decrypter.exe\"');\r","                        obj.decrypterExecutable                = [filePathDecrypter filesep fileNameDecryptor];\r","                    end\r","                else\r","                    fprintf('Requesting the user to specify the token and comment for the web decryption service via GUI\\n');\r","                    opts.WindowStyle = obj.dialogWindowStyle;\r","                    userInput        = inputdlg(obj.dialogPrompt, obj.dialogTitle, obj.dialogDims, obj.dialogDefInput, opts);\r","                    try\r","                        obj.token   = userInput{1};\r","                        obj.comment = userInput{2};\r","                    catch\r","                        error('Input of token and comment in dialog box is incorrectly formatted');\r","                    end\r","                end\r","                \r","            end\r","            \r","        \r","            function valid = readDecrypterConfiguration\r","                \r","                try\r","                    jsonStruct = jsondecode(fileread(obj.file));\r","                catch\r","                    error('It seems that there is something wrong with %s. Please remove the file', obj.file);\r","                end\r","                \r","                valid = true;\r","                \r","                try\r","                    if string(jsonStruct.decrypterExecutable) ~= \"NOT PROVIDED\" && ~isfile(jsonStruct.decrypterExecutable)\r","                        valid = false;\r","                    else\r","                        obj.decrypterExecutable = jsonStruct.decrypterExecutable;\r","                    end\r","                    obj.token   = jsonStruct.token;\r","                    obj.comment = jsonStruct.comment;\r","                catch\r","                    error('JSON file \"%s\" is not correctly formatted', which(obj.fileName));\r","                end\r","                \r","            end\r","        \r","            \r","            function decryptionMethod = determineDecryptionMethod\r","                \r","                if string(obj.decrypterExecutable) == \"NOT PROVIDED\"\r","                    decryptionMethod = 'web';\r","                else \r","                    [status, cmdout] = system(sprintf('\"%s\" -h', obj.decrypterExecutable));\r","                    if status == 10 && isempty(cmdout)\r","                        decryptionMethod = 'ADELDecryptor';\r","                    elseif status == 0\r","                        decryptionMethod = 'ADD';\r","                    else\r","                        error('Could not determine the decryption method');\r","                    end    \r","                end\r","                \r","            end\r","            \r","        end\r","        \r","    end\r","       \r","    methods (Static, Access = private)\r","        \r","        function writeJson(obj, file)\r","            jsonStruct.decrypterExecutable = strrep(obj.decrypterExecutable, '\\', '\\\\');\r","            jsonStruct.token               = obj.token;\r","            jsonStruct.comment             = obj.comment;\r","             \r","            if ~exist('file', 'var')\r","                fprintf('Requesting the user to specify the location where to create the new configuration file via GUI\\nThe location must be part of the matlab search path.\\n');\r","                [~, filePath, ~] = uiputfile(obj.fileName);\r","                file             = [filePath filesep obj.fileName];\r","            end\r","            \r","            try\r","                fileHandle = fopen(file, 'w');\r","                fprintf(fileHandle, jsonencode(jsonStruct));\r","                fclose(fileHandle);\r","            catch\r","                warning('Unable to write \"%s\" to provided location', file);\r","            end\r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[42,53,54,55,56,57,60,65,66,67,119,121,122,123,125,126,141,142,143,145,146,147,148,151,152,153,154],"UnhitLineNumbers":[43,44,45,47,48,49,50,51,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,94,95,96,97,100,102,103,104,105,106,108,109,110,111,120,124,127,128,155,156],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,3,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,3,3,3,3,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0]}}