var sourceData533 = {"FileContents":["classdef bmmoADELSBC < bmmoADELfile\r","%% <help_update_needed>\r","%  for the class and for the function\r","%\r","%   \r","    %%\r","    properties (GetAccess = public, SetAccess = protected)\r","       % these properties are mutually dependent\r","       sbc_struct\r","       inline_sdm_struct\r","    end\r","    \r","    properties (Constant, Hidden)\r","       DEFAULT_KA_START = -0.15;\r","       DEFAULT_KA_PITCH = 5e-3;\r","       DEFAULT_KA_SIZE = 61;\r","       DEFAULT_INTRAF_X = 13;\r","       DEFAULT_INTRAF_Y = 19;\r","       DEFAULT_MI_START = -0.2;\r","       DEFAULT_MI_PITCH = 1e-3;\r","       DEFAULT_MI_SIZE = 401;\r","       MIRROR_SIDES = {'MiMirrorOffsetMapMeasure', 'MiMirrorOffsetMapExpose'};\r","       MIRROR_MAPS = {'XTYMirrorMap', 'YTXMirrorMap'};\r","       NUMBER_CHUCKS = 2;\r","    end\r","    \r","    %%\r","    methods\r","        function obj = bmmoADELSBC(config)\r","            obj.xml_data = [];\r","            obj.sbc_struct = [];\r","            obj.inline_sdm_struct = [];\r","        end\r","    end\r","    \r","    %%\r","    methods        \r","        % read file\r","        function read(obj, filename)\r","            obj.xml_data = xml_load(filename);\r","           [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        function setVersion(obj, version)\r","           obj.xml_data.Header.DocumentTypeVersion = version;\r","           obj.xml_data.Header.VersionId = version;\r","        end \r","        \r","        function setRecipeName(obj, recipe_name)\r","           obj.xml_data.Header.RecipeName = sprintf('ADELsbcOverlayDriftControlNxe/%s', recipe_name); \r","        end\r","        \r","        function writeNew(obj, filename)\r","            obj.update_header();\r","            obj.write(filename);\r","        end\r","        \r","        % write to file\r","        function write(obj, filename)\r","            docversion = obj.xml_data.Header.DocumentTypeVersion;\r","            schema_info = sprintf('xsi:schemaLocation=\"http://www.asml.com/XMLSchema/MT/Generic/ADELsbcOverlayDriftControlNxe/%s ADELsbcOverlayDriftControlNxe.xsd\" xmlns:ns0=\"http://www.asml.com/XMLSchema/MT/Generic/ADELsbcOverlayDriftControlNxe/%s\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"', docversion, docversion);\r","            bmmo_xml_save(filename, obj.xml_data, 'ns0:Recipe', schema_info);            \r","        end\r","               \r","        % get sbc struct\r","        function sbc_struct = get_SBC(obj)\r","            sbc_struct = obj.sbc_struct;\r","        end\r","        \r","        function bmmo_inject_inline_sdm_into_ADEL_xml(obj)\r","            sbc_chuck_order = arrayfun(@(x) str2double(x.elt.ApplicationRange.Exposure.Wafer.WaferStageChuckId(end)), obj.xml_data.CorrectionSets);\r","            for ic = 1:obj.NUMBER_CHUCKS\r","                chuck_id = sbc_chuck_order(ic);\r","                if isfield(inline_sdm, 'time_filter')\r","                    obj.xml_data.CorrectionSets(chuck_id).elt.Parameters.SdmDistortionMap.Header.TimeFilter = sprintf('%.4f', inline_sdm.time_filter);\r","                end\r","                if isfield(inline_sdm, 'sdm_model')\r","                    obj.xml_data.CorrectionSets(chuck_id).elt.Parameters.SdmDistortionMap.Header.SdmModel = inline_sdm.sdm_model;\r","                end\r","            end\r","            \r","        end\r","        \r","        % create empty (default)\r","        function create_empty_SBC(obj, adel_version)\r","            if nargin < 2\r","                adel_version = 'v1.5';\r","            end\r","            obj.create(adel_version);\r","        end\r","        \r","        function create(obj, adel_version)\r","            if nargin < 2\r","                adel_version = 'v1.5';\r","            end\r","            adel_if = bmmoGenericAdelInterface([]);\r","            obj.xml_data = adel_if.getAdelInstance('ADELsbcOverlayDriftControlNxe', adel_version);\r","            obj.fix_xml_data();\r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        % create empty (with sbc template)\r","        function create_empty_SBC_from_corr(obj, sbc_in, adel_version)\r","            if nargin < 3\r","                adel_version = 'v1.5';\r","            end\r","            obj.create_empty_SBC(adel_version);\r","            obj.define_MI_from_corr(sbc_in);\r","            obj.define_KA_from_corr(sbc_in);\r","        end\r","        \r","        % create empty (with options template)\r","        function create_empty_SBC_from_options(obj, options, adel_version)\r","            if nargin < 3\r","                adel_version = 'v1.5';\r","            end\r","            obj.create_empty_SBC(adel_version);\r","            obj.define_MI_from_options(options);\r","            obj.define_KA_from_options(options);\r","        end\r","        \r","        % create filled SBC from corr\r","        function create_SBC_from_corr(obj, sbc_in, adel_version)\r","            if nargin < 3\r","                adel_version = 'v1.5';\r","            end\r","            obj.create_empty_SBC(adel_version);\r","            obj.define_MI_from_corr(sbc_in);\r","            obj.define_KA_from_corr(sbc_in);\r","            obj.set_corr(sbc_in);\r","        end\r","        \r","        % add ADEL file\r","        function add_ADEL_file(obj, filename)\r","           tmp_adel_obj =  bmmoADELSBC();\r","           tmp_adel_obj.read(filename);\r","           obj.add(tmp_adel_obj);\r","        end\r","        \r","        % add ADEL SBC\r","        function add(obj, adel_obj)  \r","            obj.sbc_struct = bmmo_add_output_corr(obj.sbc_struct, adel_obj.get_SBC());\r","            obj.xml_data = bmmo_inject_sbc_into_ADEL_xml(obj.xml_data, obj.sbc_struct);\r","            %bmmo_assert_equal(obj.sbc_struct, bmmo_kt_process_SBC2(obj.sbc_struct));\r","        end\r","        \r","        % add bmmo sbc correction\r","        function add_corr(obj, sbc_in)  \r","            obj.sbc_struct = bmmo_add_output_corr(obj.sbc_struct, sbc_in);\r","            obj.xml_data = bmmo_inject_sbc_into_ADEL_xml(obj.xml_data, obj.sbc_struct);\r","            %bmmo_assert_equal(obj.sbc_struct, bmmo_kt_process_SBC2(obj.sbc_struct));\r","        end\r","        \r","        % set bmmo sbc correction\r","        function set_corr(obj, sbc_in)\r","            if isempty(obj.xml_data)\r","                obj.create();\r","            end\r","            obj.define_KA_from_corr(sbc_in);\r","            obj.xml_data = bmmo_inject_sbc_into_ADEL_xml(obj.xml_data, sbc_in);\r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","            %bmmo_assert_equal(obj.sbc_struct, sbc_in);\r","        end\r","        \r","        % set inline_sdm header info (both or either fields: sdm_model, time_filter)\r","        function set_inline_sdm(obj, inline_sdm_in)\r","            if isempty(obj.xml_data)\r","                obj.create();\r","            end\r","            sbc_chuck_order = arrayfun(@(x) str2double(x.elt.ApplicationRange.Exposure.Wafer.WaferStageChuckId(end)), obj.xml_data.CorrectionSets);\r","            for ic = 1:obj.NUMBER_CHUCKS\r","                chuck_id = sbc_chuck_order(ic);\r","                if isfield(inline_sdm_in, 'time_filter')\r","                    obj.xml_data.CorrectionSets(chuck_id).elt.Parameters.SdmDistortionMap.Header.TimeFilter = sprintf('%.4f', inline_sdm_in.time_filter);\r","                end\r","                if isfield(inline_sdm_in, 'sdm_model')\r","                    obj.xml_data.CorrectionSets(chuck_id).elt.Parameters.SdmDistortionMap.Header.SdmModel = inline_sdm_in.sdm_model;\r","                end\r","            end\r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        % set xml_data\r","        function setXmlData(obj, xml_in)\r","            if ischar(xml_in)\r","                obj.xml_data = xml_load(xml_in);\r","            else\r","                obj.xml_data = xml_in;\r","            end\r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        % set machine name\r","        function set_machine_name(obj, machine_name)\r","            obj.xml_data.Header.MachineName = machine_name;\r","            for ic = 1:numel(obj.xml_data.CorrectionSets)\r","                obj.xml_data.CorrectionSets(ic).elt.ApplicationRange.Equipment.AsmlMachineId = machine_name;\r","            end\r","        end\r","        \r","        % set fms\r","        function set_fms(obj, fms)\r","            obj.xml_data.FineMetrologyOverlayState = fms.Value;\r","        end\r","        \r","        % set SDM map size from BMMO options structure\r","        function define_SDM_from_options(obj, options)\r","            % TODO not clearly defined in options\r","            warning('TODO: using 13x19 SDM map as default');\r","            for ic = 1:obj.NUMBER_CHUCKS\r","                obj.fix_sdm_distomap(13, 19, ic);\r","            end\r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        % set KA grid size from BMMO options structure\r","        function define_KA_from_options(obj, options)\r","            for ic = 1:obj.NUMBER_CHUCKS\r","                obj.fix_ka_grid(options.KA_start, options.KA_pitch, options.KA_length, ic);\r","                if (isfield(options, 'KA_measure_enabled') && (options.KA_measure_enabled > 0))\r","                    ka_measure_length = ceil((options.KA_meas_bound - options.KA_meas_start) / options.KA_pitch);\r","                    obj.fix_ka_measure_grid(options.KA_meas_start, options.KA_pitch, ka_measure_length, ic);\r","                end\r","            end\r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","            \r","        % set MI map size from BMMO options structure\r","        function define_MI_from_options(obj, options)\r","            for ic = 1:obj.NUMBER_CHUCKS\r","               for is = 1:length(obj.MIRROR_SIDES)\r","                   for im = 1:length(obj.MIRROR_MAPS)\r","                       obj.fix_mi_map(obj.MIRROR_SIDES{is}, obj.MIRROR_MAPS{im}, options.map_param.start_position, options.map_param.pitch, options.map_table_length, ic);\r","                   end\r","               end\r","            end \r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        function define_KA_from_corr(obj, corr)\r","            ka_start = min(corr.KA.grid_2de(1).x);\r","            ka_pitch = max(diff(corr.KA.grid_2de(1).x));\r","            ka_length = sqrt(numel(corr.KA.grid_2de(1).x));\r","            \r","            for ic = 1:obj.NUMBER_CHUCKS\r","                obj.fix_ka_grid(ka_start, ka_start, ka_pitch, ka_pitch, ka_length, ka_length, ic);\r","            end\r","            \r","            if isfield(corr.KA, 'grid_2dc')\r","                ka_start = min(corr.KA.grid_2dc(1).x);\r","                ka_pitch = max(diff(corr.KA.grid_2dc(1).x));\r","                ka_length = sqrt(numel(corr.KA.grid_2dc(1).x));\r","                for ic = 1:obj.NUMBER_CHUCKS\r","                    obj.fix_ka_measure_grid(ka_start, ka_start, ka_pitch, ka_pitch, ka_length, ka_length, ic);\r","                end\r","            end\r","            \r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","        function define_MI_from_corr(obj, corr)\r","            mi_start = min(corr.MI.wse(1).x_mirr.y);\r","            mi_pitch = max(diff(corr.MI.wse(1).x_mirr.y));\r","            mi_length = numel(corr.MI.wse(1).x_mirr.y);\r","            \r","            for ic = 1:obj.NUMBER_CHUCKS\r","               for is = 1:length(obj.MIRROR_SIDES)\r","                   for im = 1:length(obj.MIRROR_MAPS)\r","                       obj.fix_mi_map(obj.MIRROR_SIDES{is}, obj.MIRROR_MAPS{im}, mi_start, mi_pitch, mi_length, ic);\r","                   end\r","               end\r","            end \r","            [obj.sbc_struct, obj.inline_sdm_struct] = bmmo_kt_process_SBC2(obj.xml_data);\r","        end\r","        \r","    end\r","    \r","    %%\r","    methods (Access = private)\r","        function fix_xml_data(obj)\r","            obj.create_header();\r","            \r","            % fix susd correction \r","            obj.fix_susd();\r","            \r","            for ic = 1:obj.NUMBER_CHUCKS\r","               obj.xml_data.CorrectionSets(ic).elt.CorrectionSetName = sprintf('Correction_sr_%d', ic);\r","               obj.xml_data.CorrectionSets(ic).elt.CorrectionSetType = 'sbcoverlaydriftcontrol';\r","               obj.xml_data.CorrectionSets(ic).elt.ApplicationRange.Exposure.Wafer.WaferStageChuckId = sprintf('Waferstage chuck ID %d', ic);\r","               \r","\r","               \r","               % set 13x19 SDM disto map\r","               obj.fix_sdm_distomap(obj.DEFAULT_INTRAF_X, obj.DEFAULT_INTRAF_Y, ic);\r","               \r","               % set 61x61 KA grid\r","               obj.fix_ka_grid(obj.DEFAULT_KA_START, obj.DEFAULT_KA_START, obj.DEFAULT_KA_PITCH, obj.DEFAULT_KA_PITCH,...\r","                   obj.DEFAULT_KA_SIZE, obj.DEFAULT_KA_SIZE, ic);\r","               \r","               % By default, no KA measure grid\r","               if isfield(obj.xml_data.CorrectionSets(ic).elt.Parameters, 'KaOffsetMapMeasure')\r","                   obj.xml_data.CorrectionSets(ic).elt.Parameters = rmfield(obj.xml_data.CorrectionSets(ic).elt.Parameters, 'KaOffsetMapMeasure');\r","               end\r","               \r","               % set MI maps\r","               for is = 1:length(obj.MIRROR_SIDES)\r","                   for im = 1:length(obj.MIRROR_MAPS)\r","                       obj.fix_mi_map(obj.MIRROR_SIDES{is}, obj.MIRROR_MAPS{im}, obj.DEFAULT_MI_START, obj.DEFAULT_MI_PITCH, obj.DEFAULT_MI_SIZE, ic);\r","                   end\r","               end        \r","            end\r","        end\r","        \r","        function fix_susd(obj)\r","            obj.xml_data.CorrectionSets = repmat(obj.xml_data.CorrectionSets(1), 1, 6);\r","            for ic = 1:obj.NUMBER_CHUCKS\r","               % first two correction sets have no IntraFieldOffset\r","               if isfield(obj.xml_data.CorrectionSets(ic).elt.Parameters, 'IntraFieldOffset')\r","                   obj.xml_data.CorrectionSets(ic).elt.Parameters = rmfield(obj.xml_data.CorrectionSets(ic).elt.Parameters, 'IntraFieldOffset');\r","\r","               end\r","               \r","\r","            end\r","            \r","            correction_names = {'Correction_chuck_1_down', 'Correction_chuck_1_up', 'Correction_chuck_2_down', 'Correction_chuck_2_up'};\r","            scan_direction = {'Downwards', 'Upwards', 'Downwards', 'Upwards'};\r","            chuck_name = {'Waferstage chuck ID 1', 'Waferstage chuck ID 1', 'Waferstage chuck ID 2', 'Waferstage chuck ID 2'};\r","            \r","            for ic = 3:6\r","                % remove all fields other than IntraFieldOffset\r","                fn = fieldnames(obj.xml_data.CorrectionSets(ic).elt.Parameters);\r","                fn(strcmp(fn, 'IntraFieldOffset')) = [];\r","                for ifield = 1:length(fn)\r","                    obj.xml_data.CorrectionSets(ic).elt.Parameters = rmfield(obj.xml_data.CorrectionSets(ic).elt.Parameters, fn{ifield});\r","                end\r","                obj.xml_data.CorrectionSets(ic).elt.CorrectionSetName = correction_names{ic - 2};\r","                obj.xml_data.CorrectionSets(ic).elt.CorrectionSetType = 'sbcoverlaydriftcontrol';\r","                obj.xml_data.CorrectionSets(ic).elt.ApplicationRange.Exposure.ExposureScanDirection = scan_direction{ic - 2};\r","                obj.xml_data.CorrectionSets(ic).elt.ApplicationRange.Exposure.Wafer.WaferStageChuckId = chuck_name{ic - 2};\r","               \r","            end                \r","        end\r","        \r","        function fix_mi_map(obj, side, map, start, pitch, steps, ic)\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.(side).(map).Header.InitialPosition = sprintf('%.3f', start * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.(side).(map).Header.Pitch = sprintf('%.3f', pitch * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.(side).(map).Header.Steps = sprintf('%d', steps-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.(side).(map).Offsets = repmat(...\r","                obj.xml_data.CorrectionSets(ic).elt.Parameters.(side).(map).Offsets(1), 1, steps);\r","        end\r","        \r","        function fix_ka_grid(obj, startx, starty, pitchx, pitchy, numx, numy, ic)\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Header.InitialPosition.X = sprintf('%.3f', startx * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Header.InitialPosition.Y = sprintf('%.3f', starty * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Header.Pitch.X = sprintf('%.3f', pitchx * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Header.Pitch.Y = sprintf('%.3f', pitchy * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Header.Steps.X = sprintf('%d', numx-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Header.Steps.Y = sprintf('%d', numy-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Offsets = repmat(...\r","                obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Offsets(1), 1, numx*numy);\r","            \r","\r","        end\r","        \r","        function fix_ka_measure_grid(obj, startx, starty, pitchx, pitchy, numx, numy, ic)\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Header.InitialPosition.X = sprintf('%.3f', startx * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Header.InitialPosition.Y = sprintf('%.3f', starty * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Header.Pitch.X = sprintf('%.3f', pitchx * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Header.Pitch.Y = sprintf('%.3f', pitchy * 1e3);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Header.Steps.X = sprintf('%d', numx-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Header.Steps.Y = sprintf('%d', numy-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapMeasure.Offsets = repmat(...\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.KaOffsetMapExpose.Offsets(1), 1, numx*numy);\r","        end\r","        \r","        function fix_sdm_distomap(obj, x, y, ic)\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.SdmDistortionMap.Header.Steps.X = sprintf('%d', x-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.SdmDistortionMap.Header.Steps.Y = sprintf('%d', y-1);\r","            obj.xml_data.CorrectionSets(ic).elt.Parameters.SdmDistortionMap.Offsets = repmat(...\r","                obj.xml_data.CorrectionSets(ic).elt.Parameters.SdmDistortionMap.Offsets(1), 1, x*y);\r","        end\r","        \r","        function create_header(obj)\r","            doctime = obj.update_header();\r","            obj.xml_data.Header.VersionId = obj.xml_data.Header.DocumentTypeVersion;\r","            obj.xml_data.Header.RecipeName = 'ADELsbcOverlayDriftControlNxe/default_default';\r","            obj.xml_data.Header.CreateTime = datestr(doctime, obj.DATEFORMAT);\r","        end\r","        \r","        function doctime = update_header(obj)\r","\r","            machine_id = obj.xml_data.Header.MachineName;\r","            doctime = now;\r","            obj.xml_data.Header.LastModifiedTime = datestr(doctime, obj.DATEFORMAT);\r","       \r","            doc_timestr = datestr(doctime, obj.DOCID_DATEFORMAT);        \r","            obj.xml_data.Header.DocumentId = sprintf('ADELsbc2-%s-%s', machine_id, doc_timestr);\r","\r","        end\r","        \r","        function updateXMLDataFromAdeller(obj, adeller)\r","             if ischar(adeller)\r","                adeller = xml_load(adeller); \r","             end\r","             \r","             obj.xml_data.Header.MachineName = adeller.Header.MachineID;\r","             obj.xml_data.Header.CreateTime = adeller.Header.CreateTime;\r","             obj.xml_data.Header.SoftwareRelease = adeller.Header.SoftwareRelease;\r","             obj.xml_data.Header.RecipeName = adeller.Input.LotSettings.ScannerBaseLineConstantsDriftControl.OverlayDriftControlSbcRecipeId;\r","             obj.xml_data.Header.DocumentId = adeller.Input.LotSettings.ScannerBaseLineConstantsDriftControl.OverlayDriftControlSbcRecipeUuid;\r","             obj.xml_data.Header.LastModifiedTime = adeller.Input.LotSettings.ScannerBaseLineConstantsDriftControl.OverlayDriftControlSbcRecipeChangedTime;\r","             \r","         end\r","        \r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[30,31,32,40,41,45,46,50,54,55,60,61,62,67,71,72,73,74,75,77,78,86,87,89,93,94,96,97,98,99,104,105,107,108,109,114,115,117,118,119,124,125,127,128,129,130,135,136,137,142,143,149,150,156,157,159,160,161,167,168,170,171,172,173,174,176,177,180,185,186,187,188,190,195,196,197,203,209,210,211,213,218,219,220,221,222,225,230,231,232,233,237,241,242,243,245,246,249,250,251,252,253,254,258,262,263,264,266,267,268,269,273,281,284,286,287,288,289,294,297,298,301,302,306,307,308,315,316,318,319,326,327,328,330,332,333,334,335,337,338,339,340,346,347,348,349,350,354,355,356,357,358,359,360,361,367,368,369,370,371,372,373,374,378,379,380,381,385,386,387,388,393,394,395,397,398,403,404,407,408,409,410,411,412],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}