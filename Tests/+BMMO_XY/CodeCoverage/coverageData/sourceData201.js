var sourceData201 = {"FileContents":["function [partitionedSystemResiduals, partitionedDates] = getInlineSdmSystemResidualsFromReports(inlineSdmReports, lotDates)\r","% [partitionedSystemResiduals, partitionedDates] = getInlineSdmSystemResidualsFromReports(inlineSdmReports, lotDates)\r","%\r","% Function to extract the system residuals from the inlineSDM report for\r","% chuck 1 and chuck 2. The residuals and the job dates are partitioned in sets separated by setup actions.\r","%\r","% Input arguments: \r","% - inlineSdmReports           [ array of structs ]   Array of structs containing the\r","%                                                       inlineSdmReports for the\r","%                                                       respective mls.\r","% - lotDates                   [ array of datetimes ] Dates of the jobs\r","%\r","% Output arguments:\r","% - partitionedSystemResiduals [ array of structs ]   Array of structs\r","%                                                       containing the system residuals of the inlineSdm reports of the\r","%                                                       respective mls. The data is partitioned in sets in between setup actions.\r","% - partitionedDates           [ array of datetimes ] Array of datetimes containing the dates of the\r","%                                                       jobs partitioned between setup actions.\r","%\r","%\r","\r","import BMMO_XY.populationTooling.tools.*\r","import BMMO_XY.populationStudy.intraField.getInlineSdmReportsFromMls\r","\r","% Extract the KPIs\r","systemKpi = extractInlineSdmSystemOvlKpis(inlineSdmReports);\r","\r","% Get setup lotDates\r","[~, setupIndexChk1] = estimateSetupActionDatesFromKpis({systemKpi.chk1.x, systemKpi.chk1.y}, lotDates, 8);\r","[~, setupIndexChk2] = estimateSetupActionDatesFromKpis({systemKpi.chk2.x, systemKpi.chk2.y}, lotDates, 8);\r","setupIndex          = unique(sort([setupIndexChk1, setupIndexChk2]));\r","\r","% Extract the system residual per chuck\r","systemResiduals     = extractArrayFromStruct(inlineSdmReports, 'hoc.mlHocRes');\r","systemResidualsChk1 = arrayfun(@(x) ovl_combine_wafers(systemResiduals(x), 1), 1 : length(systemResiduals));\r","systemResidualsChk2 = arrayfun(@(x) ovl_combine_wafers(systemResiduals(x), 2), 1 : length(systemResiduals));\r","\r","% Partition the system residual data\r","[partitionedSystemResidualsChk1, partitionedDatesChk1] = partitionDataSetupActionDates(systemResidualsChk1, lotDates, setupIndex);\r","[partitionedSystemResidualsChk2, partitionedDatesChk2] = partitionDataSetupActionDates(systemResidualsChk2, lotDates, setupIndex);\r","\r","% Provide the output cell arrays\r","partitionedSystemResiduals = {partitionedSystemResidualsChk1, partitionedSystemResidualsChk2};\r","partitionedDates           = {partitionedDatesChk1, partitionedDatesChk2};\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[26,29,30,31,34,35,36,39,40,43,44],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}