var sourceData64 = {"FileContents":["function FP_SUSD = bmmo_construct_FPS_SUSD(ml, options)\r","% function FP_SUSD = bmmo_construct_FPS_SUSD(ml, options)\r","%\r","% Generate the raw SUSD fingerprint for the combined model\r","%\r","% Input: \r","%  ml: input ml structure\r","%  options: structure containing the fields \r","%           Scan_direction: vector, per field scan direction (1 or -1)\r","%           scaling_factor: double, scaling for scan direction\r","%\r","% Output: \r","%  FP_SUSD: SUSD fingerprint (1x1 cell array of ml structs)\r","\r","dummy = ml; \r","ifield = 1:ml.nfield;\r","scan_dirs = unique(options.Scan_direction);\r","FP_SUSD = ovl_get_fields(dummy,[]);\r","\r","% get the ids of options.Scan_direction which are also in the input layout\r","field_ids = bmmo_get_field_ids(ml, ml.expinfo);\r","\r","% Apply ty per field for each scan direction\r","for idir = 1:length(scan_dirs)\r","    \r","    % Get the field IDS for this scan direction\r","    idx = options.Scan_direction == scan_dirs(idir);\r","    idx = idx(field_ids); % there can be more exposed fields than ml.nfield \r","    ml_field = ovl_get_fields(dummy, ifield(idx));\r","    \r","    % Apply ty per field to all fields in this scan direction\r","    par.ty = scan_dirs(idir)/options.scaling_factor;\r","    tmp = ovl_model(ml_field, 'perwafer', 'perfield', 'apply', par);\r","    \r","    % combine applied fields with previous (fields temporarily in wrong\r","    % order)\r","    FP_SUSD = ovl_combine_fields(FP_SUSD, tmp);\r","end\r","FP_SUSD = ovl_combine_linear(dummy,0,FP_SUSD,1); % sort the fields into the correct order\r","\r","FP_SUSD.what = 'SUSD';   \r","\r","FP_SUSD = {FP_SUSD}; % Put it in a cell, for consistency"],"CoverageData":{"CoveredLineNumbers":[15,16,17,18,21,24,27,28,29,32,33,37,39,41,43],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,240,240,240,0,0,240,0,0,240,0,0,480,480,480,0,0,480,480,0,0,0,480,0,240,0,240,0,240]}}