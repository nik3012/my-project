var sourceData302 = {"FileContents":["classdef testBmmoInvalidWafer < BMMO_XY.tools.testSuite\r","    \r","    %% Sub Functions\r","    methods(Static)\r","        \r","        function [ui, di, li, ri] = sub_get_half_indices(ml)\r","            ui = ml.wd.yw >=0;\r","            di = ml.wd.yw <=0;\r","            ri = ml.wd.xw >= 0;\r","            li = ml.wd.xw <= 0;\r","        end\r","        \r","        function mlo = sub_set_wafer_indices_NaN(ml, index, wafers)\r","            \r","            mlo = ml;\r","            for iw = 1:length(wafers)\r","                mlo.layer.wr(wafers(iw)).dx(index) = NaN;\r","                mlo.layer.wr(wafers(iw)).dy(index) = NaN;\r","            end\r","        end\r","        \r","    end\r","   \r","    methods(Test)\r","        \r","        %% half marks NaN on one wafer per check\r","        function test_bmmo_wafer_halves_NaN(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);            \r","            [ui, di, li, ri] = obj.sub_get_half_indices(ml);            \r","            index_set = {ui, di, li, ri};            \r","            for ii = 1:4\r","                \r","                % When\r","                mlt = obj.sub_set_wafer_indices_NaN(ml, index_set{ii}, [1 4]);         \r","                \r","                % Then\r","                out = bmmo_nxe_drift_control_model(mlt);                    %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);\r","            end\r","        end\r","        \r","        %% Case 2\r","        function test_bmmo_wafer_opposite_halves_NaN(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);            \r","            [ui, di, li, ri] = obj.sub_get_half_indices(ml);            \r","            for ii = 1:4\r","                \r","                % When\r","                mlt = obj.sub_set_wafer_indices_NaN(ml, ui, [1 2 3]);\r","                mlt = obj.sub_set_wafer_indices_NaN(mlt, di, [4 5 6]);                \r","                \r","                % Then\r","                out = bmmo_nxe_drift_control_model(mlt);                    %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);\r","            end\r","        end\r","        \r","        %% Case 3\r","        function test_bmmo_half_marks_NaN(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);            \r","            rng('default');\r","            nf = ml.nfield;\r","            t = nf / 2;            \r","            for iw = 1:6\r","                d = randi(nf, nf, 1);\r","                li = d > t;\r","                \r","                % When\r","                ml.layer.wr(iw).dx(li) = NaN;\r","                ml.layer.wr(iw).dy(li) = NaN;\r","            end            \r","            \r","            % Then\r","            out = bmmo_nxe_drift_control_model(ml);                         %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);            \r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[7,8,9,10,15,16,17,18,29,30,31,32,33,36,39,46,47,48,49,52,53,56,63,64,65,66,67,68,69,70,73,74,78],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,2,2,2,2,0,0,0,0,12,12,32,32,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,4,0,0,4,0,0,0,0,0,0,1,1,1,1,0,0,4,4,0,0,4,0,0,0,0,0,0,1,1,1,1,1,1,6,6,0,0,6,6,0,0,0,1,0,0,0,0,0]}}