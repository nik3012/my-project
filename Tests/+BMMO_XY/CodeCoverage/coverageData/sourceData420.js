var sourceData420 = {"FileContents":["function scaled = DCO_budget_noise(ml, varargin)\r","\r","%% Description:\r","% Generates an ml struct with weighted noise according to the specified\r","% budget. Specifically:\r","% - point-by-point Gaussian noise is generated on the layout of 'ml'\r","% - a DCO budget breakdown is calculated using ovl_calc_breakdown\r","% - the components are weighted according to the budget and added up\r","% - if necessary, a scaling is performed to ensure the 3 sigma ovl number\r","%   equals 'noise3s'\r","% Input:\r","% - ml: to provide the layout\r","% - nwafer: the number of wafers (with independent noise) to be returned;\r","%   default = 3\r","% - noise3s: provide a noise level; default = 1.5 / sqrt(2)\r","% - budget: provide a custom budget; default = 3350 DCO budget / sqrt(2)\r","% - no_wec: do not add WEC error-like noise; default = 0 (i.e. do add WEC)\r","% - wec_3s: 3 sigma value of WEC error; default = 0.8 nm (as taken from\r","%   typical YS WEC data)\r","% Output:\r","% - scaled: collection of mls with scaled noise:\r","%   - cob: batch correctables\r","%   - cov: correctables variation\r","%   - mf: mean field\r","%   - f2f: field-to-field variation\r","%   - ma: moving average (3 par per row fit)\r","%   - nma: remainder\r","%   - total: sum of six components above\r","%   - wec: if 'no_wec' is set to 0, the total WEC-like error added to\r","%     'total'\r","\r","%% Changes:\r","% 20141028: removed factor of sqrt(2) from default output level, to account\r","%           for the fact that DCO uses two layers, whereas only one layer is\r","%           generated\r","% 20141105: added WEC error generation\r","% 20141105: moved argument processing to sub function\r","\r","%% process arguments\r","    [budget, nwafer, noise3s, no_wec, wec_3s] = process_varargin(varargin{:});\r","    \r","%% generate noise mls\r","    ml_noise = noise_ml(ml, noise3s);\r","    for i = 1:nwafer-1\r","        ml_noise = ovl_combine_wafers(ml_noise, noise_ml(ml, noise3s));\r","    end\r","    fns = fieldnames(budget);\r","\r","%% compute DCO breakdown\r","    [ov, mlo] = ovl_calc_breakdown(ml_noise,'f2n','nxe','parlist','12par');\r","    [ovnnsa, mlonnsa] = ovl_calc_breakdown(ml_noise,'f2n','nxe','parlist','12par','noise');\r","    noise.cob = mlo.correctables.mean.batch;\r","    noise.cov = mlo.correctables.variation.perwafer;\r","    noise.mf = mlo.residuals.field.mean;\r","    noise.f2f = mlonnsa.noise.residuals.step_nofldavg;\r","    noise.ma = mlonnsa.noise.filter.difference;\r","    noise.nma = mlonnsa.noise.filter.scanner;\r","\r","    ovl_breakdown = [ov.correctables.mean.batch.oxm3s ov.correctables.mean.batch.oym3s\r","        ov.correctables.variation.perwafer.oxm3s ov.correctables.variation.perwafer.oym3s\r","        ov.residuals.field.mean.oxm3s ov.residuals.field.mean.oym3s\r","        ovnnsa.noise.residuals.step_nofldavg.oxm3s ovnnsa.noise.residuals.step_nofldavg.oym3s\r","        ovnnsa.noise.filter.difference.oxm3s ovnnsa.noise.filter.difference.oym3s\r","        ovnnsa.noise.filter.scanner.oxm3s ovnnsa.noise.filter.scanner.oym3s];\r","    ovl_breakdown = max(ovl_breakdown');\r","   \r","    noise.cob = copy_wafers(noise.cob, nwafer);\r","    noise.mf = copy_wafers(noise.mf, nwafer);\r","\r","%% scale components according to budget\r","    scaled.total = copy_wafers(ovl_create_dummy(ml), nwafer);\r","    for i = 1:length(fns)\r","        breakdown.(fns{i}) = ovl_breakdown(i);\r","        factor.(fns{i}) = budget.(fns{i}) / breakdown.(fns{i});\r","        scaled.(fns{i}) = ovl_combine_linear(noise.(fns{i}), factor.(fns{i}));\r","        scaled.total = ovl_add(scaled.total, scaled.(fns{i}));\r","    end\r","\r","    scaled.ovl = ovl_calc_overlay(scaled.total);\r","    if abs(max(scaled.ovl.ox997, scaled.ovl.oy997) - noise3s * 1e-9) > 5e-11\r","        scaling = (noise3s * 1e-9) / max(scaled.ovl.ox997, scaled.ovl.oy997);\r","        for i = 1:length(fns)\r","            scaled.(fns{i}) = ovl_combine_linear(scaled.(fns{i}), scaling);\r","        end\r","        scaled.total = ovl_combine_linear(scaled.total, scaling);\r","    end\r","    \r","%% add WEC error noise if requested\r","    if ~no_wec\r","        wec_budget.nma = .25;\r","        wec_budget.ma = .45;\r","        wec_budget.f2f = .45;\r","        wec_budget.mf = .04;\r","        wec_budget.cov = .4;\r","        wec_budget.cob = .13;\r","        wec_err = DCO_budget_noise(ml, 'nwafer', nwafer, 'noise3s', wec_3s, 'budget', wec_budget, 'no_wec');\r","        scaled.total = ovl_add(scaled.total, wec_err.total);\r","        scaled.wec = wec_err.total;\r","    end\r","    \r","end\r","\r","function [budget, nwafer, noise3s, no_wec, wec_3s] = process_varargin(varargin)\r","    i = 1;\r","    while i <= length(varargin)\r","        switch varargin{i}\r","            case 'budget'\r","                budget = varargin{i+1};\r","                i = i + 2;\r","            case 'nwafer'\r","                nwafer = varargin{i+1};\r","                i = i + 2;\r","            case 'noise3s'\r","                noise3s = varargin{i+1};\r","                i = i + 2;\r","            case 'no_wec'\r","                no_wec = 1;\r","                i = i + 1;\r","            case 'wec_3s'\r","                wec_3s = varargin{i+1};\r","                i = i + 2;\r","        end\r","    end\r","    if exist('budget') ~= 1\r","        budget.cob = 0.2e-9;\r","        budget.cov = 0.4e-9;\r","        budget.mf = 0.3e-9;\r","        budget.f2f = 1.0e-9;\r","        budget.ma = 0.7e-9;\r","        budget.nma = 0.7e-9;\r","    end\r","    if exist('nwafer') ~= 1\r","        nwafer = 3;\r","    end\r","    if exist('noise3s') ~= 1\r","        noise3s = 1.5 / sqrt(2);\r","    end\r","    if exist('no_wec') ~= 1\r","        no_wec = 0;\r","    end\r","    if exist('wec_3s') ~= 1\r","        wec_3s = .8;\r","    end\r","end\r","\r","function ml_noise = noise_ml(mli, noise3s)\r","    ml_noise = mli;\r","    dx = randn(size(ml_noise.layer(1).wr(1).dx));\r","    dy = randn(size(ml_noise.layer(1).wr(1).dy));\r","    dx(isnan(ml_noise.layer(1).wr(1).dx)) = NaN;\r","    dy(isnan(ml_noise.layer(1).wr(1).dy)) = NaN;\r","    ml_noise.layer(1).wr(1).dx = dx;\r","    ml_noise.layer(1).wr(1).dy = dy;\r","\r","    ovl = ovl_calc_overlay(ml_noise);\r","    ml_noise = ovl_combine_linear(ml_noise, noise3s/(max(ovl.oxm3s,ovl.oym3s)));\r","end\r","\r","function quad_sum = add_quadratically(budget)\r","    fns = fieldnames(budget);\r","    quad_sum = 0;\r","    for i = 1:length(fns)\r","        quad_sum = quad_sum + (budget.(fns{i}))^2;\r","    end\r","    quad_sum = sqrt(quad_sum);\r","end\r","\r","function mlo = copy_wafers(mli, nwafer)\r","    mlo = mli;\r","    for i = 1:nwafer-1\r","        mlo = ovl_combine_wafers(mlo, mli);\r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[40,43,44,45,47,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,67,68,71,72,73,74,75,76,79,80,81,82,83,85,89,90,91,92,93,94,95,96,97,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,128,129,130,132,133,135,136,138,139,141,142,147,148,149,150,151,152,153,155,156,160,161,162,163,165,169,170,171],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}