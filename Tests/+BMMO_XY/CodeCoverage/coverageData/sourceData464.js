var sourceData464 = {"FileContents":["function [mlo, ml_intra] = bmmo_INTRAF_inline_SDM_fingerprint(ml_tmp, ffp, options)\r","% function [mlo, ml_intra] = bmmo_INTRAF_inline_SDM_fingerprint(ml_tmp, ffp, options)\r","%\r","% This function returns an ml structure corresponding to the input SBC\r","% INTRAF fingerprint. It will model on the FFP using the Inline SDM model \r","% and return  the InlineSDM correction actuated on the given ml_tmp, and\r","% the InlineSDM correction reported in ADELsbcOverlayDriftControlNxerep\r","%\r","% Input:\r","% ml_tmp: template ml structure\r","% ffp: INTRAF fingerprint (1x2 struct array)\r","% options: bmmo/bl3 options structure containing following fields:\r","%  inline_sdm_config.fnhandle\r","%  fieldsize\r","%  chuck_usage\r","%  image_shift (optional)\r","% \r","% Output:\r","% mlo: output ml structure containing the INTRAF fingerprint in the same\r","% layout as ml_tmp\r","% ml_intra: INTRAF fingerprint in same field layout as ffp, averaged per chuck\r","    \r","\r","ml_intra_in = bmmo_ffp_to_ml_simple(ffp);\r","\r","disp(['Using Inline SDM configuration:',char(options.inline_sdm_config.fnhandle)])\r","config = feval(options.inline_sdm_config.fnhandle);\r","inlineSDM = config.getConfigurationObject('InlineSdmModel');\r","inlineSDM.mlDistoIn = ml_intra_in;\r","inlineSDM.hocModel.cetFieldSize(2) = options.fieldsize(2);\r","if isfield(options, 'image_shift')\r","    inlineSDM.hocModel.imageShift(2) = options.image_shift(2);\r","end\r","inlineSDM.mlWaferIn = ml_tmp;\r","inlineSDM.hocModel.chuckId = options.chuck_usage.chuck_id;\r","inlineSDM.run;\r","\r","mlo = inlineSDM.mlChuckCorr;\r","ml_intra = inlineSDM.report.cor;  \r","\r","\r","   "],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[24,26,27,28,29,30,31,32,34,35,36,38,39],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}