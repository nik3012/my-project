var sourceData453 = {"FileContents":["% function  bmmo_ml2ADELmetro(ml,fname,info,varargin)\r","%\r","% function to write a ml struct to ADELmetrology.xml file for BMMO-NXE.\r","% \r","% Multilot data will be written in separate files unless 'single_file' specified\r","%\r","% inputs:\r","%   ml      Overlay data in ml struct.\r","%   fname   Output filename ADEL_<fname>[_lot##].xml\r","%   info    OPTIONAL info struct used to define ADEL info fields\r","%           method 1 : output from ovl_getADELmetroinfo\r","%           method 2 : info.imagesize.x; mm in text format\r","%                                    .y; mm in text format\r","%                      info.gridoffset.x; mm in text format\r","%                                      y; mm in text format\r","%                      info.ID_tag;\r","%                      info.LayerID;\r","%                      info.ProductID;\r","%           method 3 : when info is not input or empty, then created using the ml as input \r","%           to ovl_getADELmetroinfo (use only for non ADELmetrology data!)\r","% varargin:\r","% 'single_file'  to place multilot data in a single file: the tlgname will be used as\r","%                the attributes of the first lot will be used\r","% 'full_name'    in case fname is the full name of the output file\r","%\r","% output:   ADELmetrology_<fname>.xml file written in current directory\r","%           The output (contained in WaferResult) is given in a\r","%           cell. Furthermore, all NaNs are excluded in the\r","%           ADELmetrology.\r","%\r","% example:\r","%    bmmo_ml2ADELmetro(ml,'path_to_file.xml',[],'full_name');\r","%\r","% NOTE: in case you run into a Java heap space memory error, then increase the size:\r","% Preferences - General - Java Heap Memory   (restart needed!)\r","%\r","% see also: ovl_getADELmetroinfo and bmmo_getADELmetroinfo\r","\r","\r","function [metrology_struct2, totalmeasurements] = bmmo_ml2ADELmetro(ml,label, info)\r","\r","\r","ml1 = ml{1};\r","\r","totalmeasurements = 0;\r","\r","% copy info into temporary metrology struct\r","metrology_struct2.ADELmetrology_colon_MetrologyReport.Header = info.Header;\r","metrology_struct2.ADELmetrology_colon_MetrologyReport.Input = info.Input;\r","metrology_struct2.ADELmetrology_colon_MetrologyReport.Conditions = info.Conditions;\r"," \r","%% retrieve grid info to be used to store ml info\r","cellsize_x    = str2num(info.Input.RecipeInformation.GridList.Grid.FieldSize.Width.Text);\r","cellsize_y    = str2num(info.Input.RecipeInformation.GridList.Grid.FieldSize.Height.Text);\r","grid_offset_x = str2num(info.Input.RecipeInformation.GridList.Grid.Offset.X.Text);\r","grid_offset_y = str2num(info.Input.RecipeInformation.GridList.Grid.Offset.Y.Text);\r","\r","\r","for w=1:ml1.nwafer\r","        \r","    % wafer unique part 1: items 1:6 before measurement list\r","    metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.LoadPort = info.WaferUniqueInfo{w}.wafer_unique.LoadPort;\r","    metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.CarrierId = info.WaferUniqueInfo{w}.wafer_unique.CarrierId;\r","    metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.SlotId = info.WaferUniqueInfo{w}.wafer_unique.SlotId;         \r","    metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.Status = info.WaferUniqueInfo{w}.wafer_unique.Status; \r","    metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.OverlayCoarseDetected = info.WaferUniqueInfo{w}.wafer_unique.OverlayCoarseDetected;         \r","    metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.WaferId = info.WaferUniqueInfo{w}.wafer_unique.WaferId;        \r","        \r","\r","    % write actual overlay results to struct\r","    js = 0; % js = count for selected targets\r","    \r","    for ilot = 1:length(ml)\r","    \r","        mli = ml{ilot};\r","        \r","        disp(['Starting Wafer ' num2str(w) ' of ' num2str(mli.nwafer)])\r","\r","        for j=1:length(mli.wd.xc)\r","\r","          if ~isnan(mli.layer.wr(1,w).dx(j,1)*1e9) && ~isnan(mli.layer.wr(1,w).dy(j,1)*1e9)\r","            js = js + 1;   \r","\r","            % fill measurement unique, wafer unique info\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.SequenceNumber.Text=num2str(j);\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.MeasurementNumber.Text=num2str(j);\r","\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.Type = info.WaferUniqueInfo{w}.Measurement_generique.Type;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.RecipeTargetId = info.WaferUniqueInfo{w}.Measurement_generique.RecipeTargetId;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.RecipeTargetId.TargetLabel = label{ilot};\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.TargetRotation = info.WaferUniqueInfo{w}.Measurement_generique.TargetRotation;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.SampleSchemeName = info.WaferUniqueInfo{w}.Measurement_generique.SampleSchemeName;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.GridInfo.Name=info.WaferUniqueInfo{w}.Measurement_generique.GridInfo.Name;\r","\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.GridInfo.Location.Row.Text=num2str(getindex(mli.wd.yc(j,1)*1e3,cellsize_y,grid_offset_y));\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.GridInfo.Location.Col.Text=num2str(getindex(mli.wd.xc(j,1)*1e3,cellsize_x,grid_offset_x));\r","\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.MeasurementOption = info.WaferUniqueInfo{w}.Measurement_generique.MeasurementOption;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.MeasurementStartTime = info.WaferUniqueInfo{w}.Measurement_generique.MeasurementStartTime;        \r","\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.FieldPosition.X.Text=num2str(mli.wd.xc(j,1)*1e3);\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.FieldPosition.Y.Text=num2str(mli.wd.yc(j,1)*1e3);       \r","\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.FieldPosition.X.Attributes.unit='mm';\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.FieldPosition.Y.Attributes.unit='mm';\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.TargetPosition.X.Text=num2str(mli.wd.xf(j,1)*1e3);\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.TargetPosition.X.Attributes.unit='mm';\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.TargetPosition.Y.Text=num2str(mli.wd.yf(j,1)*1e3);\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.TargetPosition.Y.Attributes.unit='mm';\r","\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.MeasurementProfileName = info.WaferUniqueInfo{w}.Measurement_generique.MeasurementProfileName;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.MeasurementProfileId = info.WaferUniqueInfo{w}.Measurement_generique.MeasurementProfileId;\r","            metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.DoseFactor = info.WaferUniqueInfo{w}.Measurement_generique.DoseFactor;\r","\r","            % dx\r","            if isnan(mli.layer.wr(1,w).dx(j,1)*1e9)\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.X.Text='0.0';\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.X.Attributes.unit='nm';\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Sig.X = info.WaferUniqueInfo{w}.Measurement_generique.OverlayMeasurement.Sig.X;\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Valid.X.Text='false';\r","            else\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.X.Text=num2str(mli.layer.wr(1,w).dx(j,1)*1e9,'%6.3f');\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.X.Attributes.unit='nm';\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Sig.X = info.WaferUniqueInfo{w}.Measurement_generique.OverlayMeasurement.Sig.X;\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Valid.X.Text='true';\r","             end\r","             % dy\r","             if isnan(mli.layer.wr(1,w).dy(j,1)*1e9)\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.Y.Text='0.0';   \r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.Y.Attributes.unit='nm';\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Sig.Y = info.WaferUniqueInfo{w}.Measurement_generique.OverlayMeasurement.Sig.Y;\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Valid.Y.Text='false';\r","             else\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Valid.Y.Text='true';\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.Y.Attributes.unit='nm';\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Sig.Y = info.WaferUniqueInfo{w}.Measurement_generique.OverlayMeasurement.Sig.Y;\r","                   metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.WaferResultList.WaferResult{1,w}.MeasurementList.Measurement{1,js}.OverlayMeasurement.Overlay.Y.Text=num2str(mli.layer.wr(1,w).dy(j,1)*1e9,'%6.3f');\r","\r","             end\r","          end\r","        end\r","\r","    end\r","    \r","    totalmeasurements = totalmeasurements + js;\r","end % per wafer for loop\r","%%\r","metrology_struct2.ADELmetrology_colon_MetrologyReport.Results.Status.Text='ProcessComplete';\r","%% Attributes\r","metrology_struct2.ADELmetrology_colon_MetrologyReport.Attributes = info.Attributes;\r","%%\r","disp([num2str(totalmeasurements) ' total measurements']);\r","\r","  \r","end % end of main function def...\r","\r","\r","%====================== supportive function definitions =========\r","\r","%------ Subfunction getindex -------\r","function idx = getindex(posval,pitch,offset)\r","\r","    idx =  round((posval - offset)/pitch);\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[43,45,48,49,50,53,54,55,56,59,62,63,64,65,66,67,71,73,75,77,79,81,82,85,86,88,89,90,91,92,93,95,96,98,99,101,102,104,105,106,107,108,109,111,112,113,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,134,135,136,137,145,148,150,152,163],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}