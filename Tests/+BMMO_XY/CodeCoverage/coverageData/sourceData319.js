var sourceData319 = {"FileContents":["classdef testBmmoParseConfigurableOptions < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% Test case 1\r","        function test_empty_co_structure(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            options = rmfield(options, 'submodels');    % bmmo_assert_equal has problems with fn handles\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            fake_options = struct;\r","            \r","            % When\r","            options_out = bmmo_parse_configurable_options(options, fake_options);\r","            \r","            % Then\r","            obj.verifyWithinTol(options, options_out);\r","        end\r","        \r","        %% Test case 2\r","        function test_empty_options_structure(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            options = rmfield(options, 'submodels');            \r","            bad_options = struct;\r","            bad_options.invalidfield1 = 'invalid_string';\r","            bad_options.invalidarray = [3.4 5.6 7.8];\r","            bad_options.badfield.data = {'data1', 'data2', 0.0123, 7};\r","            bad_options.map_param.invalid = 50;\r","            \r","            % When\r","            options_out = bmmo_parse_configurable_options(options, bad_options);\r","            \r","            % Then\r","            obj.verifyWithinTol(options, options_out);            \r","        end\r","        \r","        %% Test case 3\r","        function test_intersecting_fields(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            options = rmfield(options, 'submodels');            \r","            ok_options.KA_orders = [2 3 4];                         % some valid values\r","            ok_options.fid_intrafield = [30 31 32 33 60 61 62 63];\r","            ok_options.map_param.pitch = 2e-3;\r","            ok_options.map_param.invalid = 50;                      % some invalid values\r","            ok_options.unread = 'unread';\r","            ok_options.KA_invalid_corr = [4 5 1 43];\r","            ok_options.KA_resample_options = 17;\r","            \r","            % When\r","            options_out = bmmo_parse_configurable_options(options, ok_options);\r","            expected_options = options;\r","            expected_options.KA_orders = [2 3 4];\r","            expected_options.fid_intrafield = [30 31 32 33 60 61 62 63];\r","            expected_options.map_param.pitch = 2e-3;\r","            \r","            % Then\r","            obj.verifyWithinTol(options_out, expected_options);\r","        end\r","        \r","        %% Test case 4\r","        function test_intersecting_sub_fields(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            options = rmfield(options, 'submodels');            \r","            bad_options = struct;\r","            bad_options.map_param.invalid = 50;\r","            bad_options.xty_spline_params.nr_sgements = 17; % deliberate typo\r","            bad_options.ytx_spline_params.delta = 1e4;\r","            bad_options.KA_resample_options.unneeded = 'none';\r","            \r","            % When\r","            options_out = bmmo_parse_configurable_options(options, bad_options);\r","            \r","            % Then\r","            obj.verifyWithinTol(options, options_out);\r","        end\r","        \r","        %% Test case 5\r","        function test_intersecting_conflicting_data(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            options = rmfield(options, 'submodels'); % bmmo_assert_equal has problems with fn handles            \r","            bad_options = struct;\r","            bad_options.map_param = 50;\r","            bad_options.xty_spline_params.nr_segments.top = 17;\r","            \r","            % When\r","            options_out = bmmo_parse_configurable_options(options, bad_options);\r","            \r","            % Then\r","            obj.verifyWithinTol(options, options_out);\r","        end\r","        \r","        %% Test case 6\r","        function test_intersecting_sub_field_mixed_data(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            options = rmfield(options, 'submodels');    % bmmo_assert_equal has problems with fn handles            \r","            ok_options.map_param.pitch = 2e-3;          % some valid values\r","            ok_options.map_param.invalid = 50;          % some invalid values\r","            ok_options.unread = 'unread';\r","            ok_options.KA_invalid_corr = [4 5 1 43];            \r","            options_out = bmmo_parse_configurable_options(options, ok_options);     \r","            \r","            % When\r","            expected_options = options;\r","            expected_options.map_param.pitch = 2e-3;\r","            \r","            % Then\r","            obj.verifyWithinTol(options_out, expected_options);\r","        end\r","        \r","        %% Test case 7\r","        function test_both_structures_equal(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            if isfield(options, 'parlist')\r","                options = rmfield(options, 'parlist');\r","            end\r","            options = rmfield(options, 'submodels'); % bmmo_assert_equal has problems with fn handles            \r","            options_new = options;\r","            \r","            % When\r","            options_out = bmmo_parse_configurable_options(options, options_new);\r","            \r","            % Then\r","            obj.verifyWithinTol(options, options_out);\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,13,16,19,25,26,27,29,30,31,32,33,34,37,40,46,47,48,50,51,52,53,54,55,56,57,60,61,62,63,64,67,73,74,75,77,78,79,80,81,82,85,88,94,95,96,98,99,100,101,104,107,113,114,115,117,118,119,120,121,122,125,126,129,135,136,137,139,140,143,146],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0]}}