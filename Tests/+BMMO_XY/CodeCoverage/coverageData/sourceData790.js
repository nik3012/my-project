var sourceData790 = {"FileContents":["function [fig, plt] = trendPlot(plotType, dates, values, varargin)\r","% [fig, plt] = trendPlot(plotType, dates, values, varargin)\r","%\r","% Function that creates a trendplot with the input data taking into account\r","% the plotting color of previous plots, such that no overlap occurs.\r","%\r","% Input arguments:\r","% - plotType        []                                                  \r","% - dates           [ array of datetimes ]     Array of datetimes of the plotted values\r","% - values          [ array of doubles ]       Array containing the data that will be plotted.\r","% \r","% Optional arguments:\r","% - varargin                                                \r","%\r","% Output arguments: \r","% - fig               []                       Figure containing the trendplot\r","% - plt               []                       Plot of the data.\r","%\r","%NOTE: Add information on the varargin and plotType.\r","\r","% Process input arguments\r","[inputArguments, usingDefaults] = processInputArguments(values, varargin{:});\r","\r","% Make the provided figure the current figure\r","fig = inputArguments.useFigure;\r","figure(fig);\r","\r","% Manipulate the dates to show a linear plot\r","if inputArguments.convertDatetimes\r","    convertedDates = 1 : length(dates);\r","else\r","    convertedDates = dates;\r","end\r","\r","% Create the elements in the figure object       \r","hold on;\r","plt = feval(plotType, convertedDates, inputArguments.values);\r","hold off;\r","\r","% Only set these values if no previous figure was provided\r","if any(ismember(usingDefaults, 'useFigure'))\r","    % Modify the X axis\r","    fig.CurrentAxes.XAxis.TickValues   = convertedDates;    \r","    fig.CurrentAxes.XAxis.TickLabels   = datestr(dates, 'dd-mmm-yyyy');\r","    fig.CurrentAxes.XTickLabelRotation = 45;\r","    \r","    % Remove the surplus of X labels\r","    numberOfXLabels = length(convertedDates);\r","    if (numberOfXLabels / 20) > 2\r","        blankXLabelIndex = not(ismember(1 : numberOfXLabels, round(linspace(1, numberOfXLabels, 20))));\r","        fig.CurrentAxes.XAxis.TickLabels(blankXLabelIndex, :) = repmat(' ', sum(blankXLabelIndex), 11);        \r","    end\r","    \r","    % Modify the figure size\r","    fig.Position = [50 50 1850 450];\r","    \r","    % Enable the grid\r","    fig.CurrentAxes.YGrid = 'on';\r","    fig.CurrentAxes.XGrid = 'on';\r","end\r","\r","% Set the title if it has been provided\r","if ~any(ismember(usingDefaults, 'figureTitle'))\r","    title(inputArguments.figureTitle);\r","end\r","\r","% Set the Y axis label if it has been provided\r","if ~any(ismember(usingDefaults, 'figureUnit'))\r","    ylabel(inputArguments.figureUnit);\r","end\r","\r","% Set the color of the Y Axis\r","fig.CurrentAxes.YColor = [0 0 0];\r","\r","% Prepare legend manipulation\r","legend;\r","legend('hide');\r","\r","% Only set these values if lables for the legend were provided\r","if ~any(ismember(usingDefaults, 'valuesDescription'))\r","    % Set the posistion of the legend\r","    fig.CurrentAxes.Legend.Location = 'eastoutside';\r","    \r","    % Find the empty labels of the legend\r","    firstMatch = find(ismember(fig.CurrentAxes.Legend.String,'data1'));\r","    index      = firstMatch : (firstMatch + length(inputArguments.valuesDescription) - 1);\r","    \r","    % Set the empty labels of the legend\r","    fig.CurrentAxes.Legend.String(index) = inputArguments.valuesDescription;\r","else\r","    for index = 1 : length(plt)\r","        plt(index).Annotation.LegendInformation.IconDisplayStyle = 'off';\r","    end\r","end\r","legend('show');\r","\r","end\r","\r","\r","function [inputArguments, usingDefaults] = processInputArguments(values, inargs)\r","\r","% Create an inputParser object\r","p = inputParser;\r","\r","% Define validation functions\r","validationFunctionText         = @(x) (isstring(x) || ischar(x));\r","validationFunctionCellText     = @(x) (all(cellfun(validationFunctionText, x)));\r","validationFunctionFigureHandle = @(x) (string(class(x)) == \"matlab.ui.Figure\");\r","validationFunctionBoolean      = @(x) (length(x) == 1 || islogical(x));\r","\r","% Define the default values\r","defaultTitle       = 'Title';\r","defaultUnit        = 'Unit';\r","defaultDescription = cell(size(values));\r","defaultFigure      = figure;\r","defaultConvert     = true;\r","\r","% Fill defaultDescription\r","for index = 1 : length(defaultDescription)\r","    defaultDescription{index} = 'Description';\r","end\r","\r","% Specify input parameters\r","p.addParameter('valuesDescription', defaultDescription, validationFunctionCellText);\r","p.addParameter('figureTitle', defaultTitle, validationFunctionText);\r","p.addParameter('figureUnit', defaultUnit, validationFunctionText);\r","p.addParameter('useFigure', defaultFigure, validationFunctionFigureHandle);\r","p.addParameter('convertDatetimes', defaultConvert, validationFunctionBoolean);\r","\r","% Check the provided parameters\r","p.parse(inargs{:});\r","\r","% Store the results\r","inputArguments        = p.Results;\r","inputArguments.values = values;\r","usingDefaults         = p.UsingDefaults;\r","\r","% Check if defaultFigure needs to be closed\r","if inputArguments.useFigure ~= defaultFigure\r","    close(defaultFigure);\r","end\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[22,25,26,29,30,31,32,36,37,38,41,43,44,45,48,49,50,51,55,58,59,63,64,68,69,73,76,77,80,82,85,86,89,90,91,92,95,103,106,107,108,109,112,113,114,115,116,119,120,124,125,126,127,128,131,134,135,136,139,140],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}