var sourceData102 = {"FileContents":["function kpi = bmmo_generate_KPI(mli, model_results, kpi_corr, options)\r","% function kpi = bmmo_generate_KPI(mli, model_results, kpi_corr, options)\r","%\r","% Process the results of BMMO-NXE and BL3 modelling, creating the KPI structure\r","% as defined in D000810611 EDS BMMO NXE drift control model functional\r","%\r","% Input:\r","%   mli: original input structure\r","%   model_results: structure containing results of modelling\r","%   kpi_corr: structure containing the following SBC correction structures\r","%     delta_filtered\r","%     delta_unfiltered\r","%     total_filtered (equal to the SBC correction sent to TS)\r","%     total_unfiltered \r","%   options: BMMO/BL3 options structure\r","%\r","% Output:\r","%   kpi: KPI structure as defined in FN EDS D000810611\r"," \r","if nargin < 4\r","    options = bmmo_default_options_structure;\r","end\r","\r","%% Uncontrolled KPI\r","kpi.uncontrolled.overlay = bmmo_get_ov_pi_per_chuck_stacked(model_results.uncontrolled, options);\r","% without HO model parameters of last applied SBC2 correction\r","% apply every correction except INTRAF\r","corr_no_intraf = ovl_sub(model_results.sbc_prev.TotalSBCcorrection, model_results.sbc_prev.INTRAF);\r","kpi.uncontrolled.intrafield = bmmo_get_hoc_pi_per_chuck_stacked(ovl_add(model_results.uncontrolled, corr_no_intraf), options, '');\r","%kpi.uncontrolled.intrafield = bmmo_get_hoc_pi_per_chuck(model_results.sbc_prev.INTRAF, options, '_mean_uncontrolled');\r","kpi.uncontrolled.intrafield = bmmo_get_ripple_kpi(ovl_add(model_results.uncontrolled, corr_no_intraf), options, kpi.uncontrolled.intrafield);\r","\r","%% Applied correction KPI\r","fps_applied_WH = bmmo_WH_SBC_fingerprint(model_results.delta_filtered.BAO, options);\r","overlay_ml_wh_corr = ovl_calc_overlay(fps_applied_WH);\r","if strcmp(options.platform, 'LIS')\r","    kpi.applied.waferheating.ovl_max_dx_whc_applied = overlay_ml_wh_corr.ox100;\r","    kpi.applied.waferheating.ovl_max_dy_whc_applied = overlay_ml_wh_corr.oy100;\r","else\r","    kpi.uncontrolled.waferheating.ovl_exp_grid_dx_whc_uncontrolled = overlay_ml_wh_corr.ox100;\r","    kpi.uncontrolled.waferheating.ovl_exp_grid_dy_whc_uncontrolled = overlay_ml_wh_corr.oy100;\r","end\r","\r","%% Input KPI\r","kpi.input.overlay = bmmo_get_ov_pi_per_chuck_stacked(model_results.ml_outlier_removed, options);\r","kpi.input.outlier_coverage = bmmo_get_outlier_density(mli, model_results, options);\r","[kpi.input.valid, kpi.input.w2w] = sub_get_input_kpi_per_chuck(mli, model_results, options);\r","\r","%% Correction KPI\r","field_entries = fieldnames(kpi_corr);\r","tmp_options = options;\r","tmp_options.chuck_usage.chuck_id =  [1 2];\r","\r","for ifield = 1:length(field_entries)\r","    kpi.correction.(field_entries{ifield}).waferheating.ovl_exp_grid_whc = kpi_corr.(field_entries{ifield}).IR2EUV;\r","    if options.susd_control\r","        kpi.correction.(field_entries{ifield}).susd = sub_get_susd_correction_kpi_per_chuck(kpi_corr.(field_entries{ifield}).SUSD);\r","    end\r","    kpi.correction.(field_entries{ifield}).mirror = sub_get_mirror_kpi_per_chuck(kpi_corr.(field_entries{ifield}), options);\r","    kpi.correction.(field_entries{ifield}).grid.exp = sub_get_grid_exp_kpi_per_chuck(kpi_corr.(field_entries{ifield}), options);\r","    kpi.correction.(field_entries{ifield}).grid.meas = sub_get_grid_meas_kpi_per_chuck(kpi_corr.(field_entries{ifield}), tmp_options);\r","    kpi.correction.(field_entries{ifield}).bao = sub_get_bao_kpi_per_chuck(kpi_corr.(field_entries{ifield}).ml_bao, kpi_corr.(field_entries{ifield}), options);\r","    kpi.correction.(field_entries{ifield}).k_factors = bmmo_get_hoc_pi_per_chuck_average(kpi_corr.(field_entries{ifield}).ml_intraf, options, '');\r","    kpi.correction.(field_entries{ifield}).intra_raw = bmmo_get_ov_pi_per_chuck_average(kpi_corr.(field_entries{ifield}).ml_intraf, tmp_options);\r","    kpi.correction.(field_entries{ifield}).total = bmmo_get_ov_pi_per_chuck_average(kpi_corr.(field_entries{ifield}).total_correction, options);\r","    kpi.correction.(field_entries{ifield}).(options.intraf_corr_par.name) = bmmo_get_ov_pi_per_chuck_average(kpi_corr.(field_entries{ifield}).intraf_par, options);\r","end\r","\r","Intra_NCE_field_entries = {'total_filtered','total_unfiltered'};\r","for ifield = 1:length(Intra_NCE_field_entries)\r","    if strcmp(options.platform, 'LIS')\r","        % LIS \r","        kpi.(options.intraf_nce_kpi.name).(Intra_NCE_field_entries{ifield})=  bmmo_get_ov_pi_per_chuck_average(model_results.(Intra_NCE_field_entries{ifield}).(options.intraf_nce_modelresult.name), tmp_options);\r","    else\r","        % OTAS \r","        Intra_NCE = bmmo_fit_model_perwafer(kpi_corr.(Intra_NCE_field_entries{ifield}).ml_intraf,options,'18par');\r","        kpi.correction.(Intra_NCE_field_entries{ifield}).Intrafield_18par_NCE =  bmmo_get_ov_pi_per_chuck_average(Intra_NCE, tmp_options);\r","    end\r","end\r","\r","\r","% remove fields to match the (VCP) job report structure\r","if strcmp(options.platform, 'LIS')\r","    fd = fieldnames(kpi.(options.intraf_nce_kpi.name).total_filtered);\r","    idx = contains(fd, '3std');\r","    new_fd1 = fd(idx);\r","    for i = 1:length(new_fd1)\r","        kpi.(options.intraf_nce_kpi.name).total_filtered = rmfield(kpi.(options.intraf_nce_kpi.name).total_filtered, new_fd1{i});\r","        kpi.(options.intraf_nce_kpi.name).total_unfiltered = rmfield(kpi.(options.intraf_nce_kpi.name).total_unfiltered, new_fd1{i});\r","    end\r","end\r","\r","kpi.correction.monitor.susd = sub_get_susd_monitor_kpi_per_chuck(model_results);\r","kpi.correction.monitor.intra_delta = bmmo_get_delta_hoc_pi_per_chuck(kpi_corr.delta_unfiltered.inter_corr, model_results, options);\r","\r","\r","%% Correction Quality KPI\r","kpi.residue.overlay = bmmo_get_ov_pi_per_chuck_stacked(model_results.res, options);\r","kpi.residue.interfield = bmmo_get_res_breakdown(model_results.res, options);\r","kpi.residue.intrafield = sub_get_res_intrafield(model_results, options);\r","\r","%% ERO Controlled input clamp KPI, remember that ml_outlier_removed is NCE-corrected\r","% Input Clamp: controlled_clamp_estimate = controlled_overlay+delta_unfiltered_correction_overlay - delta_unfiltered_KA_exposure_grid\r","controlled_meas = bmmo_average_chuck(model_results.ml_outlier_removed, options);\r","TotalSBCcorrection = bmmo_average_chuck(model_results.delta_unfiltered.TotalSBCcorrection, options);\r","KA = bmmo_average_chuck(model_results.delta_unfiltered.KA, options);\r","for iC = 1:2\r","    wdm_clamp(iC) = ovl_add(controlled_meas(iC), TotalSBCcorrection(iC));\r","    wdm_clamp(iC) = ovl_sub(wdm_clamp(iC), KA(iC));\r","    wdm_clamp(iC) = ovl_model(wdm_clamp(iC), '6parwafer');\r","end\r","kpi.input.input_clamp = bmmo_get_KPI_ERO(wdm_clamp, 'controlled', options.ERO.inner_radius, options.ERO.edge_radius, options.ERO.outer_radius_input);\r","\r","%% ERO Uncontrolled input clamp KPI\r","% Input Clamp: uncontrolled_clamp_estimate = uncontrolled_overlay+total_unfiltered_correction_overlay - total_unfiltered_KA_exposure_grid\r","uncontrolled_meas = bmmo_average_chuck(model_results.uncontrolled, options);\r","TotalSBCcorrection = bmmo_average_chuck(model_results.total_unfiltered.TotalSBCcorrection, options);\r","KA = bmmo_average_chuck(model_results.total_unfiltered.KA, options);\r","for iC = 1:2\r","    wdm_clamp(iC) = ovl_add(uncontrolled_meas(iC), TotalSBCcorrection(iC));\r","    wdm_clamp(iC) = ovl_sub(wdm_clamp(iC), KA(iC));\r","    wdm_clamp(iC) = ovl_model(wdm_clamp(iC), '6parwafer');\r","end\r","kpi.uncontrolled.input_clamp = bmmo_get_KPI_ERO(wdm_clamp, 'uncontrolled', options.ERO.inner_radius, options.ERO.edge_radius, options.ERO.outer_radius_input);\r","\r","%% ERO Modelled clamp (KA) KPI, R = 0.1470001 due to calculation precision\r","for iC = 1:2\r","    modelled_clamp(iC) = bmmo_KA_grid_to_ml(kpi_corr.total_filtered.KA.grid_2de(iC));\r","end\r","kpi.correction.total_filtered.clamp = bmmo_get_KPI_ERO(modelled_clamp, 'modelled', options.ERO.inner_radius, options.ERO.edge_radius, options.ERO.outer_radius_KA);\r","\r","\r","%% End of main function, sub-functions below\r","\r","%% Fill in PI input - valids\r","function [inputvalid, w2w] = sub_get_input_kpi_per_chuck(mli, model_results, options)\r","for ic = 1:2\r","    chuck_string = num2str(ic);\r","    wafers_this_chuck = find(options.chuck_usage.chuck_id == ic);\r","    ml_this_chuck = ovl_get_wafers(mli, wafers_this_chuck);\r","    ml_average_this_chuck = bmmo_average(ml_this_chuck);\r","    stat_this_chuck = sub_calc_meas_stat(ml_average_this_chuck);\r","    outlier_this_chuck = sub_calc_outlier_stat(model_results.outlier_stats, wafers_this_chuck);\r","    \r","    inputvalid.(['ovl_exp_grid_chk' chuck_string '_nr_valids'])       = stat_this_chuck.nr_valid;\r","    inputvalid.(['ovl_exp_grid_chk' chuck_string '_nr_readout_nans']) = stat_this_chuck.nr_nans;\r","    inputvalid.(['ovl_exp_grid_chk' chuck_string '_nr_outliers'])     = outlier_this_chuck;\r","    inputvalid.(['ovl_exp_grid_chk' chuck_string '_nr_invalids'])     = outlier_this_chuck + stat_this_chuck.nr_nans;\r","    \r","    ml_repro_this_chuck = ovl_sub(ml_this_chuck, ml_average_this_chuck);\r","    overlay_this_chuck = ovl_calc_overlay(ml_repro_this_chuck);\r","    \r","    w2w.(['ovl_exp_grid_chk' chuck_string '_max_w2w_var']) = max(overlay_this_chuck.ox3sd, overlay_this_chuck.oy3sd);\r","end\r","\r","\r","function mirrkpi = sub_get_mirror_kpi_per_chuck(model_results, options)\r","% Constant definitions\r","MI_MAP_WAFER = find(abs(model_results.MI.wse(options.chuck_usage.chuck_id_used(1)).x_mirr.y) < ((options.wafersize / 2) + options.map_param.pitch)); % Parts of MI map on wafer\r","\r","for chuck_id = 1:2\r","    chuck_string = num2str(chuck_id);\r","    kpifields = {'meas', 'exp'};\r","    sbcfields = {'wsm', 'wse'};\r","    \r","    for i = 1:length(sbcfields)\r","        dxmap = model_results.MI.(sbcfields{i})(chuck_id).x_mirr.dx;\r","        dymap = model_results.MI.(sbcfields{i})(chuck_id).y_mirr.dy;\r","        \r","        mirrkpi.(kpifields{i}).(['ovl_exp_ytx_max_full_chk' chuck_string])  = max(abs(dxmap));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_xty_max_full_chk' chuck_string])  = max(abs(dymap));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_ytx_max_wafer_chk' chuck_string]) = max(abs(dxmap(MI_MAP_WAFER)));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_xty_max_wafer_chk' chuck_string]) = max(abs(dymap(MI_MAP_WAFER)));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_ytx_997_full_chk' chuck_string])  = sub_calc_997(dxmap);\r","        mirrkpi.(kpifields{i}).(['ovl_exp_xty_997_full_chk' chuck_string])  = sub_calc_997(dymap);\r","        mirrkpi.(kpifields{i}).(['ovl_exp_ytx_997_wafer_chk' chuck_string]) = sub_calc_997(dxmap(MI_MAP_WAFER));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_xty_997_wafer_chk' chuck_string]) = sub_calc_997(dymap(MI_MAP_WAFER));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_ytx_m3s_full_chk' chuck_string])  = sub_calc_m3s(dxmap);\r","        mirrkpi.(kpifields{i}).(['ovl_exp_xty_m3s_full_chk' chuck_string])  = sub_calc_m3s(dymap);\r","        mirrkpi.(kpifields{i}).(['ovl_exp_ytx_m3s_wafer_chk' chuck_string]) = sub_calc_m3s(dxmap(MI_MAP_WAFER));\r","        mirrkpi.(kpifields{i}).(['ovl_exp_xty_m3s_wafer_chk' chuck_string]) = sub_calc_m3s(dymap(MI_MAP_WAFER));\r","    end\r","end\r","\r","\r","function baokpi = sub_get_bao_kpi_per_chuck(mli, model_results, options)\r","for chuck_id = 1:2\r","    chuck_string = num2str(chuck_id);\r","    bao = model_results.BAO(chuck_id);\r","    baokpi.(['ovl_translation_x_chk' chuck_string '_delta'])    = bao.TranslationX;\r","    baokpi.(['ovl_translation_y_chk' chuck_string '_delta'])    = bao.TranslationY;\r","    baokpi.(['ovl_sym_intra_mag_chk' chuck_string '_delta'])    = bao.Magnification;\r","    baokpi.(['ovl_asym_intra_mag_chk' chuck_string '_delta'])   = bao.AsymMagnification;\r","    baokpi.(['ovl_sym_intra_rot_chk' chuck_string '_delta'])    = bao.Rotation;\r","    baokpi.(['ovl_asym_intra_rot_chk' chuck_string '_delta'])   = bao.AsymRotation;\r","    baokpi.(['ovl_wafer_exp_x_chk' chuck_string '_delta'])      = bao.ExpansionX;\r","    baokpi.(['ovl_wafer_exp_y_chk' chuck_string '_delta'])      = bao.ExpansionY;\r","    baokpi.(['ovl_wafer_rot_chk' chuck_string '_delta'])        = bao.InterfieldRotation;\r","    baokpi.(['ovl_wafer_non_ortho_chk' chuck_string '_delta'])  = bao.NonOrtho;\r","end\r","baokpi = bmmo_get_ov_pi_per_chuck_average(mli, options, baokpi);\r","\r","\r","function gridexpkpi = sub_get_grid_exp_kpi_per_chuck(model_results, options)\r","ml_ka_exp = bmmo_KA_SBC_fingerprint(model_results.total_correction, model_results.KA.grid_2de, options);\r","gridexpkpi = bmmo_get_ov_pi_per_chuck_average(ml_ka_exp, options);\r","\r","\r","function gridmeaskpi = sub_get_grid_meas_kpi_per_chuck(model_results, options)\r","\r","for ichuck = 1:2\r","    ml_ka_meas(ichuck) = bmmo_KA_grid_to_ml(model_results.KA.grid_2dc(ichuck));\r","end\r","ml_ka_meas = ovl_remove_edge(ovl_combine_wafers(ml_ka_meas(1), ml_ka_meas(2)), options.edge_clearance);\r","gridmeaskpi = bmmo_get_ov_pi_per_chuck_stacked(ml_ka_meas, options);\r","\r","\r","function susdkpi = sub_get_susd_correction_kpi_per_chuck(susd_corr)\r","su_index = 2;\r","for chuck_id = 1:2\r","    susdkpi.(['ovl_exp_grid_chk' num2str(chuck_id) '_ty_susd']) = susd_corr(chuck_id*su_index).TranslationY;\r","end\r","\r","\r","function susdkpi = sub_get_susd_monitor_kpi_per_chuck(model_results)\r","for chuck_id = 1:2\r","    susdkpi.(['ovl_exp_grid_chk' num2str(chuck_id) '_ty_susd']) = model_results.SUSD.Monitor_SUSD(chuck_id);\r","end\r","\r","\r","function resintra = sub_get_res_intrafield(model_results, options)\r","for chuck_id = 1:2\r","    chuck_string = num2str(chuck_id);\r","    Res_delta          = ovl_sub(model_results.INTRAF.Calib_intra(chuck_id), model_results.INTRAF.residual(chuck_id));\r","    overlay_res_after  = ovl_calc_overlay(model_results.INTRAF.residual(chuck_id));\r","    overlay_res_before = ovl_calc_overlay(model_results.INTRAF.Calib_intra(chuck_id));\r","    overlay_res_delta  = ovl_calc_overlay(Res_delta);\r","    \r","    resintra.(['ovl_exp_field_HO_res_x_before_chk' chuck_string])  = overlay_res_before.ox100;\r","    resintra.(['ovl_exp_field_HO_res_y_before_chk' chuck_string])  = overlay_res_before.oy100;\r","    resintra.(['ovl_exp_field_HO_res_x_res_chk' chuck_string])     = overlay_res_after.ox100;\r","    resintra.(['ovl_exp_field_HO_res_y_res_chk' chuck_string])     = overlay_res_after.oy100;\r","    resintra.(['ovl_exp_field_HO_res_x_delta_chk' chuck_string])   = overlay_res_delta.ox100;\r","    resintra.(['ovl_exp_field_HO_res_y_delta_chk' chuck_string])   = overlay_res_delta.oy100;\r","end\r","\r","\r","%% calculate 99.7% overlay\r","function out = sub_calc_997(in)\r","\r","valid_in = abs(in(~isnan(in)));\r","[unused, sorted_in] = sort(valid_in);\r","target_index = round(length(valid_in)*0.9973);\r","out = valid_in(sorted_in(target_index));\r","\r","\r","function out = sub_calc_m3s(in)\r","\r","valid_in = in(~isnan(in));\r","out = abs(mean(valid_in)) + 3*std(valid_in);\r","\r","\r","%% calculate measurement statistics\r","function out = sub_calc_meas_stat(mli)\r","\r","nanmat = logical(zeros(length(mli.wd.xw), 1));\r","\r","for ilayer = 1:mli.nlayer\r","    nandata = (isnan(horzcat(mli.layer(ilayer).wr.dx)) | isnan(horzcat(mli.layer(ilayer).wr.dy)));\r","    if any(nandata)\r","        nanmat = nanmat | nandata;\r","    end\r","end\r","\r","out.nr_nans = sum(double(nanmat))';\r","out.nr_valid = sum(double(~nanmat))';\r","\r","\r","%% calculate outlier statistics\r","function out = sub_calc_outlier_stat(extra, waferid)\r","\r","coor = [];\r","for iwafer = 1:length(waferid)    % hard coded 2nd layer only because we don't have first layer\r","    coor = [coor; extra.layer.wafer(waferid(iwafer)).x + 1i*extra.layer.wafer(waferid(iwafer)).y];\r","end\r","\r","unique_coor = unique(coor);\r","out = length(unique_coor);\r",""],"CoverageData":{"CoveredLineNumbers":[20,25,28,29,31,34,35,36,39,40,41,45,46,47,50,51,52,54,55,56,57,59,60,61,62,63,64,65,66,69,70,71,74,76,77,83,93,94,98,99,100,104,105,106,107,108,109,110,112,116,117,118,119,120,121,122,124,127,128,130,137,138,139,140,141,142,143,145,146,147,148,150,151,153,159,161,162,163,164,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,187,188,189,190,191,192,193,194,195,196,197,198,199,201,205,206,211,212,214,215,219,220,221,226,227,232,233,234,235,236,237,239,240,241,242,243,244,251,252,253,254,259,260,266,268,269,270,271,275,276,282,283,284,287,288],"UnhitLineNumbers":[21,37,38,73,84,85,86,87,88,89],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,122,0,0,122,122,0,122,0,0,122,122,122,0,0,122,122,122,0,0,0,122,122,122,0,0,122,122,122,0,122,488,488,84,0,488,488,488,488,488,488,488,488,0,0,122,122,244,0,0,244,0,244,244,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,122,122,0,0,0,122,122,122,0,0,0,122,122,122,122,244,244,244,0,122,0,0,0,122,122,122,122,244,244,244,0,122,0,0,122,244,0,122,0,0,0,0,0,0,122,244,244,244,244,244,244,0,244,244,244,244,0,244,244,0,244,0,0,0,0,0,488,0,488,976,976,976,0,976,1952,1952,0,1952,1952,1952,1952,1952,1952,1952,1952,1952,1952,1952,1952,0,0,0,0,0,488,976,976,976,976,976,976,976,976,976,976,976,976,0,488,0,0,0,488,488,0,0,0,0,488,976,0,488,488,0,0,0,84,84,168,0,0,0,0,122,244,0,0,0,0,122,244,244,244,244,244,0,244,244,244,244,244,244,0,0,0,0,0,0,7808,7808,7808,7808,0,0,0,0,7808,7808,0,0,0,0,0,244,0,244,244,244,18,0,0,0,244,244,0,0,0,0,0,244,244,634,0,0,244,244,0]}}