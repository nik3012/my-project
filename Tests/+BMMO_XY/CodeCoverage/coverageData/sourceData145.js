var sourceData145 = {"FileContents":["function mlo = bmmo_map_layouts(mli, mlt, tolerance_exponent)\r","% function mlo = bmmo_map_layouts(mli, mlt, tolerance_exponent)\r","%\r","% Map the overlay data in layout mli to target layout mlt, given a\r","% tolerance exponent of difference on the nominal mark positions\r","%\r","% Input: \r","%  mli: input ml structure\r","%  mlt: target ml structure\r","%  tolerance_exponent: (positive) exponent of tolerance to which\r","%   mark positions will be rounded.Marks in each structure will be \r","%   rounded to the nearest (10^(-tolerance_exponent))m before testing for equality\r","%\r","% Note: after rounding to the nearest tolerance, the layout marks must\r","% correspond exactly\r","\r","mlo = mlt;\r","mlo.nwafer = mli.nwafer;\r","mlo.nlayer = mli.nlayer;\r","\r","[imask, iloc] = bmmo_wd_ismember(mli.wd.xw, mli.wd.yw, mlt.wd.xw, mlt.wd.yw, tolerance_exponent);\r","\r","for ilayer = 1:mli.nlayer\r","    for iwafer = 1:mli.nwafer\r","        % Initialize output to NaN\r","        mlo.layer(ilayer).wr(iwafer).dx = nan * zeros(mlo.nfield*mlo.nmark,1);\r","        mlo.layer(ilayer).wr(iwafer).dy = nan * zeros(mlo.nfield*mlo.nmark,1);\r","       \r","        mlo.layer(ilayer).wr(iwafer).dx(iloc(imask)) = mli.layer(ilayer).wr(iwafer).dx(imask);\r","        mlo.layer(ilayer).wr(iwafer).dy(iloc(imask)) = mli.layer(ilayer).wr(iwafer).dy(imask); \r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[17,18,19,21,23,24,26,27,29,30],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,352,352,352,0,352,0,352,352,0,1807,1807,0,1807,1807,0,0]}}