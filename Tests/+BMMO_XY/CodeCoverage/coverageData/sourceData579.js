var sourceData579 = {"FileContents":["function ml = bmmo_read_idatsbcovldcnxekacorrections(idat_filepath, ml_cet, translation)\r","%function ml = bmmo_read_idatsbcovldcnxekacorrections(idat_filepath, ml_cet, translation)\r","\r","% Given the file path for IDATsbcOvldcNxeKaCorrectionsReport(Protected), the\r","% function decryptes and parses to output KA corrections provided.\r","%\r","% Input\r","%   idat_filepath         : IDATsbcOvldcNxeKaCorrectionsReport(Protected)\r","%   ml_cet                : full CET NCE in ml structure\r","%   translation [OPTIONAL]: Translation (m), only required for WSCS based IDAT reports\r","% Output:\r","%   ml                    : KA corrections provided to CET in ml struct\r","\r","% Load the IDAT report\r","xmlData = bmmo_load_ADEL(idat_filepath);\r","\r","% Determine the coordinate type reported in the IDAT\r","if isfield(xmlData.Results.WaferResultList(1).elt.ImageResultList.elt.ExposureResultList(1).elt, 'NominalGridPointPositionListFCS')\r","    NominalGridPointPositionList = 'NominalGridPointPositionListFCS';\r","elseif isfield(xmlData.Results.WaferResultList(1).elt.ImageResultList.elt.ExposureResultList(1).elt, 'NominalGridPointPositionListWSCS')\r","    NominalGridPointPositionList = 'NominalGridPointPositionListWSCS';\r","else\r","    error('The coordinate type specified in the IDAT report is not recognized');\r","end\r","\r","% Populate the metadata\r","ml.nmark   = length(xmlData.Results.WaferResultList(1).elt.ImageResultList.elt.ExposureResultList(1).elt.(NominalGridPointPositionList));\r","ml.nfield  = length(xmlData.Results.WaferResultList(1).elt.ImageResultList.elt.ExposureResultList);\r","ml.nlayer  = 1;\r","ml.nwafer  = length(xmlData.Results.WaferResultList);\r","ml.tlgname = [xmlData.DocumentMetaData.LotId, '_KA_corrections_provided'];\r","\r","% Build the coordinates array\r","coordinates = zeros(ml.nmark, 2);\r","for field = 1 : ml.nfield\r","    sliceStart                              = (field - 1) * ml.nmark + 1;\r","    sliceEnd                                = sliceStart + ml.nmark - 1;\r","    coordinates((sliceStart : sliceEnd), :) = getGridPointData(xmlData.Results.WaferResultList(1).elt.ImageResultList.elt.ExposureResultList(field).elt.(NominalGridPointPositionList), 1e-3);\r","end\r","\r","% Populate the wafer definition\r","if strcmp(NominalGridPointPositionList, 'NominalGridPointPositionListWSCS')\r","    if ~exist('translation', 'var')\r","        warning('Translation has not been provided, using WCS from ml_cet instead of WSCS from IDAT report. This can cause numerical differences.');\r","        ml.wd = ml_cet.wd;\r","    else\r","        ml.wd.xf = ml_cet.wd.xf;\r","        ml.wd.yf = ml_cet.wd.yf;\r","        ml.wd.xw = round(coordinates(:, 1) - translation(1), 12);\r","        ml.wd.yw = round(coordinates(:, 2) - translation(2), 12);\r","    end\r","else\r","    ml.wd.xf = round(coordinates(:, 1), 12);\r","    ml.wd.yf = round(coordinates(:, 2), 12);\r","    ml.wd.xw = ml_cet.wd.xw;\r","    ml.wd.yw = ml_cet.wd.yw;\r","end\r","ml.wd.xc = ml.wd.xw - ml.wd.xf;\r","ml.wd.yc = ml.wd.yw - ml.wd.yf;\r","\r","% Ensure that xw, yw are as expected\r","bmmo_assert_equal(ml.wd.xw, ml_cet.wd.xw, 1e-9);\r","bmmo_assert_equal(ml.wd.yw, ml_cet.wd.yw, 1e-9);\r","\r","% Build dx and dy\r","for wafer = 1 : ml.nwafer\r","    d = zeros(ml.nmark, 2);\r","    for field = 1 : ml.nfield\r","        sliceStart = (field - 1) * ml.nmark + 1;\r","        sliceEnd   = sliceStart + ml.nmark - 1;\r","        d((sliceStart:sliceEnd), :) = getGridPointData(xmlData.Results.WaferResultList(wafer).elt.ImageResultList.elt.ExposureResultList(field).elt.CorrectionList, 1e-9);\r","    end\r","    ml.layer.wr(wafer).dx = round(d(:, 1), 12);\r","    ml.layer.wr(wafer).dy = round(d(:, 2), 12);\r","end\r","\r","function [ data ] = getGridPointData( dataList, scaleFactor )\r","    data = [ arrayfun(@(x) sscanf(x.elt.X, '%f', 1) * scaleFactor, dataList)', arrayfun(@(x) sscanf(x.elt.Y, '%f', 1) * scaleFactor, dataList)' ];\r","end\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[15,18,19,20,21,27,28,29,30,31,34,35,36,37,38,42,43,46,47,48,49,50,52,53,54,55,56,58,59,62,63,66,67,68,69,70,71,73,74,78],"UnhitLineNumbers":[22,23,44,45],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,1,1,1,0,0,0,0,0,2,2,2,2,2,0,0,2,2,152,152,152,0,0,0,2,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,2,2,0,0,2,2,0,0,2,4,4,304,304,304,0,4,4,0,0,0,456,0,0,0]}}