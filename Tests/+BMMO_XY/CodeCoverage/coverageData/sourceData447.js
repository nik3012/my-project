var sourceData447 = {"FileContents":["function [ml_wid_up, ml_wid_down, kt_struct] = bmmo_get_swid_data(wafers_in, kt_struct)\r","% function [ml_wid_up, ml_wid_down] = bmmo_get_swid_data(wafers_in)\r","%\r","% Get two ml structures with the WID_UP and WID_DOWN marks from a\r","% KT_wafers_in file\r","%\r","% Input: \r","%   wafers_in: full path of KT_wafers_in file\r","%\r","% Output:\r","%   ml_wid_up: ml structure with WID_UP marks encoding SWID per wafer\r","%   ml_wid_down: ml structure with WID_DOWN marks encoding SWID per wafer\r","%\r","% 20160331 SBPR Creation\r","\r","% options for bmmo_KT_2_ml\r","USE_LAYOUT = 0; % don't use an input layout\r","ROUNDING = 7;   % round marks to nearest 1e-7 m to get layout\r","\r","% map marks in KT_wafers_in to layout\r","% layout derived by rounding input to nearest 1e-7\r","% offsets are difference with layout\r","if nargin < 2\r","    [ml_marks, kt_struct] = bmmo_KT_2_ml(wafers_in, USE_LAYOUT, ROUNDING, 'BMMO_WID', 'NVSM-X');\r","else\r","    [ml_marks, kt_struct] = bmmo_KT_2_ml(wafers_in, USE_LAYOUT, ROUNDING, 'BMMO_WID', 'NVSM-X', kt_struct);\r","end\r","    \r","% Separate the up and down marks into two structures\r","ml_wid_up = sub_get_ml_subset(ml_marks, ml_marks.wd.yw > 0);\r","ml_wid_down = sub_get_ml_subset(ml_marks, ml_marks.wd.yw < 0);\r","\r","\r","function mlo = sub_get_ml_subset(mli, index)\r","\r","mlo = mli;\r","\r","mlo.wd.xw = mli.wd.xw(index);\r","mlo.wd.yw = mli.wd.yw(index);\r","mlo.wd.yf = mli.wd.yf(index);\r","mlo.wd.xf = mli.wd.xf(index);\r","mlo.wd.xc = mli.wd.xc(index);\r","mlo.wd.yc = mli.wd.yc(index);\r","\r","mlo.nfield = length(unique([mlo.wd.xc mlo.wd.yc], 'rows'));\r","\r","for iw = 1:mli.nwafer\r","   mlo.layer.wr(iw).dx = mli.layer.wr(iw).dx(index);\r","   mlo.layer.wr(iw).dy = mli.layer.wr(iw).dy(index);\r","   \r","   % replace zero dx with NaNs: will prevent writing unnecessary marks to\r","   % ADELmetrology\r","   zero_dx = mlo.layer.wr(iw).dx == 0;\r","   mlo.layer.wr(iw).dx(zero_dx) = NaN;\r","   mlo.layer.wr(iw).dy(zero_dx) = NaN;\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[17,18,23,24,25,26,30,31,36,38,39,40,41,42,43,45,47,48,49,53,54,55],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}