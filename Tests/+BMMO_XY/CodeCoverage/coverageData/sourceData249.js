var sourceData249 = {"FileContents":["classdef testBmmoApplyParms < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% 1 test with simple translation of small structure\r","        function Case1(obj)            \r","            \r","            %% 1.1 simple translation of single structure  \r","            % Given\r","            wd.xc = [-3 -3 -3 0 0 0 3 3 3]';\r","            wd.xf = [-1 0 1 -1 0 1 -1 0 1]';\r","            wd.xw = wd.xc + wd.xf;\r","            wd.yc = wd.xc;\r","            wd.yf = wd.xf;\r","            wd.yw = wd.xw;\r","            \r","            ml.wd = wd;\r","            ml.nlayer = 1;\r","            ml.nwafer = 1;\r","            ml.nfield = 3;\r","            ml.nmark = 3;\r","            \r","            ml.layer.wr.dx = -1 * ones(size(ml.wd.xw));\r","            ml.layer.wr.dy = -1 * ones(size(ml.wd.yw));\r","            \r","            mlo = ml;   % after applying tx = +1 and ty = +1, the residuals should be zero\r","            mlo.layer.wr.dx = zeros(size(ml.wd.xw));\r","            mlo.layer.wr.dy = zeros(size(ml.wd.yw));\r","            \r","            options.parlist = bmmo_parlist;\r","            \r","            apply_struct.tx = 1;\r","            apply_struct.ty = 1;\r","            \r","            % When\r","            dxout = bmmo_apply_parms(ml.layer.wr.dx, ml.wd, apply_struct, 1, options, 'xonly');\r","            dyout = bmmo_apply_parms(ml.layer.wr.dy, ml.wd, apply_struct, 1, options, 'yonly');            \r","            resout = bmmo_apply_parms([ml.layer.wr.dx; ml.layer.wr.dy], ml.wd, apply_struct, 1, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(dxout, mlo.layer.wr.dx);\r","            obj.verifyWithinTol(dyout, mlo.layer.wr.dy);\r","            obj.verifyWithinTol(resout, [mlo.layer.wr.dx; mlo.layer.wr.dy]);\r","            \r","            %% 1.2 simple translation with multiple inputs, all the same translation\r","            % Given\r","            res_in = [ml.layer.wr.dx; ml.layer.wr.dy];\r","            all_res_in = repmat(res_in, 1, 6);\r","            all_res_out = zeros(size(all_res_in));\r","            \r","            % When\r","            resout = bmmo_apply_parms(all_res_in, ml.wd, apply_struct, 1, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(resout, all_res_out);\r","            \r","            %% 1.3 simple translation with multiple inputs, different translations\r","            % Given\r","            all_res_in = [res_in, zeros(size(res_in)), -res_in, res_in, zeros(size(res_in)), -res_in];\r","            apply_struct.tx = [1, 0, -1, 1, 0, -1]';\r","            apply_struct.ty = [1, 0, -1, 1, 0, -1]';\r","            \r","            % When\r","            resout = bmmo_apply_parms(all_res_in, ml.wd, apply_struct, 1, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(resout, all_res_out);\r","            \r","            %% 1.4 simple translation with multiple inputs, different translations,different parm values\r","            % Given\r","            rdx = ml.layer.wr.dx;\r","            rdy = ml.layer.wr.dy;\r","            all_res_dx = [rdx, zeros(size(rdx)), -rdx, rdx, zeros(size(rdx)), -rdx];\r","            all_res_dy = [rdy, rdy, rdy, rdy, rdy, rdy];\r","            \r","            apply_struct.tx = [1, 0, -1, 1, 0, -1];\r","            apply_struct.ty = [0, 0, 0, 0, 0, 0];\r","            \r","            \r","            all_res_in = [all_res_dx; all_res_dy];  % with ty = zero, the dys should be unaffected by applying the parms\r","            all_res_out = [zeros(size(all_res_dx)); all_res_dy];\r","            \r","            % When\r","            resout = bmmo_apply_parms(all_res_in, ml.wd, apply_struct, 1, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(resout, all_res_out);\r","        end\r","        \r","        %% 2 test with dummy against ovl_model\r","        function Case2(obj)\r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;\r","                     \r","            for iwafer = 1:mld.nwafer\r","                mld.layer.wr(iwafer).dx = -1 * ones(size(mld.layer.wr(iwafer).dx)); % set dx to be -1\r","                mld.layer.wr(iwafer).dy = -1 * ones(size(mld.layer.wr(iwafer).dy)); % set dy to be -1\r","            end\r","            \r","            options.parlist = bmmo_parlist;\r","            \r","            apply_struct.tx = 1;\r","            apply_struct.ty = 1;\r","            \r","            mlo = ovl_model(mld, 'apply', apply_struct);\r","                        \r","            % When\r","            res_in = [mld.layer.wr.dx; mld.layer.wr.dy];\r","            res_out = bmmo_apply_parms(res_in, mld.wd, apply_struct, 1, options);\r","            \r","            dx_in = [mld.layer.wr.dx];\r","            dy_in = [mld.layer.wr.dy];\r","            dx_out = bmmo_apply_parms(dx_in, mld.wd, apply_struct, 1, options, 'xonly');\r","            dy_out = bmmo_apply_parms(dy_in, mld.wd, apply_struct, 1, options, 'yonly');\r","            \r","            % Then\r","            obj.verifyWithinTol(res_out, [dx_out;dy_out]);\r","            \r","            %%\r","            % When\r","            ml_res = mld;       % distribute res_out\r","            for iwafer = 1:mld.nwafer\r","                ml_res.layer.wr(iwafer).dx = dx_out(:,iwafer);\r","                ml_res.layer.wr(iwafer).dy = dy_out(:,iwafer);\r","            end\r","\r","            % Then\r","            obj.verifyWithinTol(ml_res, mlo);\r","        end\r","        \r","        %% 3. Test with explicit design matrix\r","        function Case3(obj)\r","            % Given            \r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;\r","\r","            for iwafer = 1:mld.nwafer\r","                mld.layer.wr(iwafer).dx = -1 * ones(size(mld.layer.wr(iwafer).dx)); % set dx to be -1\r","                mld.layer.wr(iwafer).dy = -1 * ones(size(mld.layer.wr(iwafer).dy)); % set dy to be -1\r","            end\r","            \r","            options.parlist = bmmo_parlist;\r","            \r","            apply_struct.tx = 1;\r","            apply_struct.ty = 1;\r","            \r","            % When\r","            res_in = [mld.layer.wr.dx; mld.layer.wr.dy];\r","            res_out = bmmo_apply_parms(res_in, mld.wd, apply_struct, 1, options);\r","            \r","            design_matrix = bmmo_get_design_matrix(mld.wd, options, 'tx', 'ty');\r","            res_outd = bmmo_apply_parms(res_in, design_matrix, apply_struct, 1, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(res_out, res_outd);\r","        end\r","        \r","        %% 4. Test with NaNs\r","        function Case4(obj)\r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;\r","            \r","            nanindex = [100 500 1000 1250 1500 2000 2250 2500 3000 3500];\r","            \r","            % set dx, dy to be -1\r","            for iwafer = 1:mld.nwafer\r","                mld.layer.wr(iwafer).dx = -1 * ones(size(mld.layer.wr(iwafer).dx));\r","                mld.layer.wr(iwafer).dy = -1 * ones(size(mld.layer.wr(iwafer).dy));\r","                mld.layer.wr(iwafer).dx(nanindex) = NaN;\r","                mld.layer.wr(iwafer).dy(nanindex) = NaN;\r","            end\r","            \r","            options.parlist = bmmo_parlist;\r","            \r","            apply_struct.tx = 1;\r","            apply_struct.ty = 1;\r","            \r","            mlo = ovl_model(mld, 'apply', apply_struct);\r","            \r","            % When\r","            res_in = [mld.layer.wr.dx; mld.layer.wr.dy];\r","            res_out = bmmo_apply_parms(res_in, mld.wd, apply_struct, 1, options);\r","            \r","            dx_in = [mld.layer.wr.dx];\r","            dy_in = [mld.layer.wr.dy];\r","            dx_out = bmmo_apply_parms(dx_in, mld.wd, apply_struct, 1, options, 'xonly');\r","            dy_out = bmmo_apply_parms(dy_in, mld.wd, apply_struct, 1, options, 'yonly');\r","            \r","            % Then\r","            obj.verifyWithinTol(res_out, [dx_out;dy_out]);\r","            \r","            %%\r","            % When\r","            ml_res = mld;   % distribute res_out\r","            for iwafer = 1:mld.nwafer\r","                ml_res.layer.wr(iwafer).dx = dx_out(:,iwafer);\r","                ml_res.layer.wr(iwafer).dy = dy_out(:,iwafer);\r","            end\r","            \r","            % Then\r","            obj.verifyWithinTol(ml_res, mlo)\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[10,11,12,13,14,15,17,18,19,20,21,23,24,26,27,28,30,32,33,36,37,38,41,42,43,47,48,49,52,55,59,60,61,64,67,71,72,73,74,76,77,80,81,84,87,93,94,96,97,98,101,103,104,106,109,110,112,113,114,115,118,122,123,124,125,129,135,136,138,139,140,143,145,146,149,150,152,153,156,162,163,165,168,169,170,171,172,175,177,178,180,183,184,186,187,188,189,192,196,197,198,199,203],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,6,6,0,0,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,6,6,0,0,0,1,0,0,0,0,0,1,1,0,1,6,6,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,1,6,6,6,6,0,0,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,6,6,0,0,0,1,0,0,0,0,0]}}