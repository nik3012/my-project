var sourceData569 = {"FileContents":["function [report, sbcout, filter, mapped_wids, exposure_wids, settings] = bmmo_parse_job_report(lpcjobreport, use_report_filter, bar_struct)\r","% function [report, sbcout] = bmmo_parse_job_report(lpcjobreport)\r","%\r","% Parse an ADELlpcJobReportBaseLinerMmoNxe to retrieve\r","%   1) a structure containing a list of ADEL filenames\r","%   2) the report structure returned by xml_load\r","%\r","% Input: lpcjobreport: full path of ADELlpcJobReportBaseLinerMmoNxe file\r","%\r","% Output: report: Structure returned by xml_load\r","%         sbcout: filename of sbc output structure\r","%         filter: Time filter enabled or not\r","%         mapped_wids: Substrate Wafer Ids\r","%         exposure_wids: Exposure Context Wafer Ids\r","%         settings: Job settings for SUSD, KA, and adjustable & adaptive time filter\r","%\r","%\r","% 20170131 SBPR Creation\r","% 20200918 ANBZ Updated as wrapper for Job report Configurations for LCP/VCP\r","% 20201118 LUDU Added job setting for bl3\r","\r","% Case: LIS JOB REPORT\r","if contains(lpcjobreport, 'ADELbmmoOverlayJobReport')\r","    bar_struct = bmmo_log_progress('Parsing ADELbmmoOverlayJobReport', bar_struct);\r","    \r","    % xml load job report and find the correct sbc recipe used\r","    [report, sbcout] = sub_parse_job_report(lpcjobreport);\r","    \r","    % Determine if the job is Control = 1 or Recover = 0\r","    if use_report_filter\r","        filter =   sub_get_filter_state(report.Input.ControlMode);\r","    end\r","    \r","    % Subtrate Wafer Ids from Job report\r","    for i=1:length(report.Results.WaferContextList)\r","        mapped_wids{i} = report.Results.WaferContextList(i).WaferContext.WaferErrorCorrection.SubstrateWaferId;\r","    end\r","    \r","    % Exposure Context Wafer Ids from Job report\r","    for i=1:length(report.Results.WaferContextList)\r","        exposure_wids{i} = report.Results.WaferContextList(i).WaferContext.ExposureContext.WaferId;\r","    end\r","    \r","    % Check for configuration options\r","    settings.configuration_data = []; % Initialize\r","    settings.configuration_data.platform = 'LIS';\r","    % SUSD control\r","    if isfield(report.Input, 'ControlLoopSettings')\r","        % Determine if  SUSD or  KA control is enabled\r","        settings = sub_SUSD_KA_settings(report.Input.ControlLoopSettings, settings);\r","        \r","        % Determine if BL3 is enabled\r","        if isfield(report.Input.ControlLoopSettings, 'Modeling')\r","            if strcmp(report.Input.ControlLoopSettings.Modeling, 'BaseLiner 3')\r","                settings.configuration_data.bl3_model = 1;\r","            end\r","        end\r","        \r","        % Get adjustable time filter values\r","        if isfield(report.Input.ControlLoopSettings, 'AdjustableTimeFilter')\r","            if isfield(report.Input.ControlLoopSettings.AdjustableTimeFilter, 'WeightFactors')\r","                settings = sub_adjust_time_filter(report.Input.ControlLoopSettings.AdjustableTimeFilter.WeightFactors, settings);\r","            end\r","        end\r","    end\r","    \r","    % Previous and current exposure time for Adaptive time filter (if ON)\r","    settings = sub_adapt_time_filter(report.Results, settings);\r","\r","    % Add intrafield actuation to configuration\r","    if isfield(report.Results.StatisticsPerClassList(1).StatisticsPerClass.CorrectionMagnitude.TotalFilteredMonitoring.KFactors,'K51')\r","        settings.configuration_data.intraf_actuation = 5;\r","    else\r","        settings.configuration_data.intraf_actuation = 3;\r","    end   \r","    % Case:OTAS JOB REPORT\r","elseif contains(lpcjobreport, 'ADELlpcJobReportBaseLinerMmoNxe')\r","    bar_struct =  bmmo_log_progress('Parsing ADELlpcJobReportBaseLinerMmoNxe', bar_struct);\r","\r","    % xml load job report and find the correct sbc recipe used\r","    [report, sbcout] = sub_parse_job_report(lpcjobreport);\r","    \r","    % Determine if the job is Control = 1 or Recover = 0\r","    if use_report_filter\r","        filter = sub_get_filter_state(report.Input.JobType);\r","    end\r","    \r","    % Subtrate Wafer Ids from Job report\r","    widinfo     = [report.Results.WaferInformationList.WaferInformation];\r","    mapped_wids = {widinfo.SubstrateWaferId};\r","    \r","    % Exposure Context Wafer Ids from Job report\r","    for i=1:length(report.Input.WaferMapping)\r","        exposure_wids{i} = report.Input.WaferMapping(i).elt.ExposureContext.WaferId;\r","    end\r","    \r","    % Check for configuration options\r","    settings.configuration_data = []; % Initialize\r","    settings.configuration_data.platform = 'OTAS';\r","    % Determine if  SUSD or  KA control is enabled\r","    settings = sub_SUSD_KA_settings(report.Input.JobSettings.BaseLinerMmo.Overlay, settings);\r","    \r","    \r","    % Adjustable time filter\r","    if isfield(report.Input.JobSettings.BaseLinerMmo.Overlay, 'AdjustableTimeFilter')\r","        if sub_str2bool(report.Input.JobSettings.BaseLinerMmo.Overlay.AdjustableTimeFilter.EnableAdjustableTimeFilter)\r","            settings = sub_adjust_time_filter(report.Input.JobSettings.BaseLinerMmo.Overlay.AdjustableTimeFilter.WeightFactors, settings);\r","        end\r","    end\r","    \r","    % Previous and current exposure time for Adaptive time filter (if ON)\r","    settings = sub_adapt_time_filter(report.Results, settings);\r","    \r","    % Add intrafield actuation to configuration\r","    if isfield(report.Results.KpiList.BaseLinerMmo.Overlay.CorrectionMagnitude.Monitoring.KFactors,'K51')\r","        settings.configuration_data.intraf_actuation = 5;\r","    else\r","        settings.configuration_data.intraf_actuation = 3;\r","    end\r","end\r","\r","\r","% SUB FUNCTIONS\r","% sub function to parse job report and load correct SBC recipe\r","function [report, sbcout] = sub_parse_job_report(lpcjobreport)\r","report = xml_load(lpcjobreport);\r","% Find the sbc output\r","doclist = [report.Results.DocumentList.Document];\r","sbcout = 'error';\r","for ii = 1:length(doclist)\r","    if strcmp(doclist(ii).Type, 'ADELsbcOverlayDriftControlNxe')\r","        sbcout = [doclist(ii).Type '_' doclist(ii).Name '.xml'];\r","    end\r","end\r","if strcmp(sbcout, 'error')\r","    error('SBC output file not found in LCP job report');\r","end\r","\r","\r","% sub function to determine Recover or Control Job\r","function filter = sub_get_filter_state(Mode)\r","switch Mode\r","    case 'Recover to baseline'\r","        filter = 0;\r","    case 'Control to baseline'\r","        filter = 1;\r","    otherwise\r","        error('Unknown job type ''%s'' in LCP job report', report.Input.JobType);\r","end\r","\r","\r","% sub function to determine if SUSD or KA control is enabld\r","function settings = sub_SUSD_KA_settings(report_input, settings)\r","%SUSD control\r","if isfield(report_input, 'IncludeCorrectionsPerScanDirection')\r","    settings.configuration_data.susd_correction_enabled = sub_str2bool(report_input.IncludeCorrectionsPerScanDirection);\r","end\r","% KA control\r","if isfield(report_input, 'IncludeKaControl')\r","    settings.configuration_data.KA_correction_enabled = sub_str2bool(report_input.IncludeKaControl);\r","end\r","\r","\r","% sub function to get the values provided for time filter\r","function settings = sub_adjust_time_filter(filter_weights, settings)\r","ml_fieldnames   = {'coeff_MI', 'coeff_KA', 'coeff_WH', 'coeff_BAO', 'coeff_ffp', 'coeff_SUSD'};\r","adel_fieldnames = {'Mirror', 'Ka', 'WaferHeating', 'Bao', 'Intrafield', 'SuSd'};\r","for ii = 1:length(ml_fieldnames)\r","    if isfield(filter_weights, adel_fieldnames{ii})\r","        \r","        settings.configuration_data.filter.(ml_fieldnames{ii}) = str2double(filter_weights.(adel_fieldnames{ii}));\r","    end\r","end\r","\r","\r","% sub function to get the previous and curent exposure time when Adaptive\r","% time filter is enabled\r","function settings = sub_adapt_time_filter(report_results, settings)\r","if isfield(report_results, 'TimeFilter')\r","    if isfield(report_results.TimeFilter, 'PreviousJobExposureTime')\r","        settings.report_data.adaptive_time_filter_enabled = 1;\r","        settings.report_data.T_previous_expose = sub_calculate_time_in_days(report_results.TimeFilter.PreviousJobExposureTime);\r","        settings.report_data.T_current_expose  = sub_calculate_time_in_days(report_results.TimeFilter.CurrentJobExposureTime);\r","    end\r","end\r","\r","\r","% sub function to calculate no. of days from date\r","function T_days = sub_calculate_time_in_days(date)\r","\r","epoch = datetime(1970,1,1);\r","date = datetime(date(1:19), 'InputFormat', 'uuuu-MM-dd''T''HH:mm:ss');\r","T_days = days(date - epoch);\r","\r","\r","\r","% sub function for string to boolean conversion\r","function bool = sub_str2bool(str)\r","if ischar(str)\r","    if strcmpi(str,'True') || strcmpi(str,'true')\r","        bool=1;\r","    elseif strcmpi(str,'False')|| strcmpi(str,'false')\r","        bool=0;\r","    end\r","else\r","    bool=str;\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[23,24,27,30,31,35,36,40,41,45,46,48,50,53,60,61,62,68,71,73,74,77,78,81,84,85,89,90,93,94,98,99,101,105,106,107,112,115,117,118,126,128,129,130,131,132,135,142,143,144,145,146,155,156,159,160,166,167,168,169,171,179,180,199,200,201,202,203],"UnhitLineNumbers":[54,55,72,116,136,147,148,181,182,183,191,192,193,205,206],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,0,2,0,0,2,2,0,0,0,2,7,0,0,0,2,7,0,0,0,2,2,0,2,0,2,0,0,2,0,0,0,0,0,0,2,2,1,0,0,0,0,0,2,0,0,2,0,2,2,0,0,2,2,0,0,2,0,0,2,2,0,0,0,2,2,0,0,2,7,0,0,0,2,2,0,2,0,0,0,2,2,1,0,0,0,0,2,0,0,2,0,2,2,0,0,0,0,0,0,0,4,0,4,4,4,14,4,0,0,4,0,0,0,0,0,0,4,4,1,3,3,0,0,0,0,0,0,0,0,4,4,0,0,4,4,0,0,0,0,0,2,2,2,12,0,11,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,5,5,5,0,0,0,0,0,0]}}