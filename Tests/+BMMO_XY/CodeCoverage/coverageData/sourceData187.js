var sourceData187 = {"FileContents":["function results_out = bmmo_sub_model_WH_SUSD(results_in, options)\r","%function results_out = bmmo_sub_model_WH_SUSD(results_in, options)\r","%\r","% The WH_SUSD sub-model\r","%\r","% Input:\r","%   results_in: structure containing intermediate models and results\r","%       This structure must at least contain the following fields:\r","%           ml_outlier_removed: input data with, if specified, outliers removed\r","%   options: options structure\r","%       This structure must at least contain the following fields:\r","%           IR2EUVsensitivity: (double) drdl value for WH calibration\r","%           WH.input_fp_per_chuck: input WH fingerprint averaged per chuck\r","%           chuck_usage.chuck_id_used: chuck ids used, in usage order\r","%\r","% Output:\r","%   results_out: structure containing intermediate models and results\r","%       This function adds or modifies the following fields:\r","%           WH.residual: input, averaged per chuck after WH fingerprint removed\r","%           WH.FPS: raw fingerprints for WH combined model\r","%           WH.fit_coeffs: fit coefficients for each fingerprint\r","%           WH.fitted_fps: fitted fingerprints from WH combined model\r","%           WH.Calib_WH: IR2EUV ratio\r","%           WH.lambda: WH lambda value\r","%           WH.fp: fitted WHFP per chuck\r","%           WH.ml_7x7: input resampled to 7x7 \r","%       This function adds or modifies the field SUSD, with the following subfields:\r","%           SUSD.model_fp: fitted SUSD FP per chuck\r","%           SUSD.Calib_SUSD: SUSD calibrations\r","%           SUSD.res: interfield residual after SUSD FP removed \r","%\r","%       If it does not exist, it also adds the field WH with the subfields\r","%       ml7x7 and FPS. (see bmmo_sub_model_WH for definitions).\r","\r","FIRST_CHUCK = 1; % index of first chuck in options.chuck_usage_chuck_id_used\r","model = 'WH_SUSD';\r","\r","% Initialise output\r","results_out = results_in;\r","mli = results_in.WH.input;\r","\r","% Switch WH fp for modelling into options\r","options.WH.input_fp_per_chuck = results_in.WH.model_fp;\r","\r","% Initialise combined model, resampled to 7x7\r","if ~isfield(results_out.WH, 'ml_7x7') | ~isfield(results_out.WH, 'FPS') % these fields may already have been initialised in the SUSD submodel\r","    [results_out.WH.ml_7x7, results_out.WH.FPS, C] = bmmo_setup_combined_model(mli, options, model);\r","end\r","\r","% Run the combined model\r","[fit_coeffs, fitted_fps] = bmmo_combined_model(results_out.WH.ml_7x7, results_out.WH.FPS, options, C);\r","\r","% gather the WH output\r","results_out.WH.fit_coeffs = [fit_coeffs.WH{:}];\r","results_out.WH.fitted_fps = fitted_fps.WH(1);\r","\r","results_out.WH.Calib_WH = options.IR2EUVsensitivity * results_out.WH.fit_coeffs(options.chuck_usage.chuck_id_used(1)); % this is the delta update\r","\r","ch = options.chuck_usage.chuck_id_used(FIRST_CHUCK);\r","results_out.WH.lambda = results_out.WH.fit_coeffs(ch);\r","\r","% Switch WH fp for residual into options\r","options.WH.input_fp_per_chuck = results_in.WH.res_fp;\r","\r","% remove full WH fingerprint from input ml structure\r","for ic = options.chuck_usage.chuck_id_used\r","    results_out.WH.fp(ic) = ovl_combine_linear(options.WH.input_fp_per_chuck(ic), results_out.WH.lambda);\r","    results_out.interfield_residual(ic) = ovl_sub(results_out.interfield_residual(ic),results_out.WH.fp(ic));\r","end\r","\r","results_out.WH.residual = results_out.interfield_residual;\r","\r","% gather the SUSD output   \r","for chuck_id = options.chuck_usage.chuck_id_used\r","    results_out.SUSD.Calib_SUSD(chuck_id) = fit_coeffs.SUSD{chuck_id}*1/options.scaling_factor;\r","    results_out.SUSD.fitted_fp(chuck_id) = fitted_fps.SUSD(chuck_id);\r","end\r","\r","% mail from ZHMA 20160824:\r","% as we model SUSD using delta of 2 layers, the final SUSD value e.g.\r","% Ty should be half of the fitted Ty from combined model.\r","% -1 factor to get L1 Ty as we are using s2f in the 2 layer case\r","results_out.SUSD.Calib_SUSD = -1*results_out.SUSD.Calib_SUSD / 2;\r","results_out.SUSD.Monitor_SUSD = results_out.SUSD.Calib_SUSD;\r","\r","% Calculate SUSD residual \r","for ic = options.chuck_usage.chuck_id_used\r","        results_out.SUSD.model_fp(ic) = bmmo_SUSD_fingerprint(ovl_combine_linear(options.WH.input_fp_per_chuck(ic), 0), options.Scan_direction, results_out.SUSD.Calib_SUSD(ic));\r","        results_out.SUSD.res(ic) = ovl_sub(results_out.interfield_residual(ic), results_out.SUSD.model_fp(ic));\r","end\r","results_out.interfield_residual = results_out.SUSD.res;\r",""],"CoverageData":{"CoveredLineNumbers":[35,36,39,40,43,46,47,51,54,55,57,59,60,63,66,67,68,71,74,75,76,83,84,87,88,89,91],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,4,0,0,4,0,0,4,4,0,0,0,4,0,0,4,4,0,4,0,4,4,0,0,4,0,0,4,8,8,0,0,4,0,0,4,8,8,0,0,0,0,0,0,4,4,0,0,4,8,8,0,4,0]}}