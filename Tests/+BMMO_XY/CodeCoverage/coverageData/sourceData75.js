var sourceData75 = {"FileContents":["function invalid = bmmo_create_invalidated_data(mli, model_results)\r","% function invalid = bmmo_create_invalidated_data(mli, model_results)\r","% \r","% Given model results containing outlier stats, create the \r","% invalidated_data structure as defined in D000810611\r","%\r","% Input:\r","%   mli: overlay structure\r","%   model_results: intermediate model results structure as defined in\r","%       bmmo_default_model_result\r","%   \r","% Output:\r","%   invalid: 1*nwafer structure containing the following fields\r","%       mark: mark invalidated by outlier removal\r","%           mark.x: x-coordinate of mark relative to wafer centre (m)\r","%           mark.y: y-coordinate of mark relative to wafer centre (m)\r","\r","nwafer = length(model_results.outlier_stats.layer.wafer);\r","invalid.invalidation_reasons = {'Invalidated by Metro', 'Invalidated by W2W', 'Invalidated by Model'};\r","invalid.invalidated_data = repmat(struct('mark', []), 1, nwafer);\r","\r","for iw = 1:nwafer\r","\r","   invalids_this_wafer = length(model_results.readout_nans(iw).x);\r","   \r","   % allocate the invalid marks \r","   outliers_this_wafer = length(model_results.outlier_stats.layer.wafer(iw).x); \r","   invalid.invalidated_data(iw).mark = repmat(struct('reasonid', 1, 'x', 0, 'y', 0), invalids_this_wafer + outliers_this_wafer, 1);\r","   \r","   % Fill in readout invalids\r","   for ii = 1:invalids_this_wafer\r","       invalid.invalidated_data(iw).mark(ii).reasonid = 1;\r","       invalid.invalidated_data(iw).mark(ii).x = model_results.readout_nans(iw).x(ii);\r","       invalid.invalidated_data(iw).mark(ii).y = model_results.readout_nans(iw).y(ii);\r","   end\r","    \r","   % Fill in outlier invalids\r","   for ii = 1:outliers_this_wafer\r","       invalid.invalidated_data(iw).mark(invalids_this_wafer + ii).reasonid = model_results.outlier_stats.layer.wafer(iw).type(ii);\r","       invalid.invalidated_data(iw).mark(invalids_this_wafer + ii).x = model_results.outlier_stats.layer.wafer(iw).x(ii);\r","       invalid.invalidated_data(iw).mark(invalids_this_wafer + ii).y = model_results.outlier_stats.layer.wafer(iw).y(ii);\r","   end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[18,19,20,22,24,27,28,31,32,33,34,38,39,40,41],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,0,122,0,634,0,0,634,634,0,0,634,721185,721185,721185,0,0,0,634,1419,1419,1419,0,0,0]}}