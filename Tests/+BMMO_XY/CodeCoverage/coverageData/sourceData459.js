var sourceData459 = {"FileContents":["% function bmmo_struct2xml( s, file )\r","%\r","% Convert a MATLAB structure into a xml file\r","%\r","% Inputs:\r","%   s: struct containing info to write\r","%       s.XMLname.Attributes.attrib1 = \"Some value\";\r","%       s.XMLname.Element.Text = \"Some text\";\r","%       s.XMLname.DifferentElement{1}.Attributes.attrib2 = \"2\";\r","%       s.XMLname.DifferentElement{1}.Text = \"Some more text\";\r","%       s.XMLname.DifferentElement{2}.Attributes.attrib3 = \"2\";\r","%       s.XMLname.DifferentElement{2}.Attributes.attrib4 = \"1\";\r","%       s.XMLname.DifferentElement{2}.Text = \"Even more text\";\r","%   file: XML filename to create\r","%\r","% Output:\r","%   XMLfile created based on the input struct s \r","%       <XMLname attrib1=\"Some value\">\r","%           <Element>Some text</Element>\r","%           <DifferentElement attrib2=\"2\">Some more text</Element>\r","%           <DifferentElement attrib3=\"2\" attrib4=\"1\">Even more text</DifferentElement>\r","%       </XMLname>\r","%\r","% examples:\r","%   [ ] = ovl_struct2xml( s, file )\r","%   xml = ovl_struct2xml( s )\r","%\r","% Please note that the following strings are substituted\r","% '_dash_' by '-', '_colon_' by ':' and '_dot_' by '.'\r","%\r","% On-screen output functionality added by P. Orth, 01-12-2010\r","% Multiple space to single space conversion adapted for speed by T. Lohuis, 11-04-2011\r","% Val2str subfunction bugfix by H. Gsenger, 19-9-2011\r","%\r","% History:\r","% W. Falkena, ASTI, TUDelft, 27 Aug 2010 - creation\r","% SKHF, 3 Jul 2015 - adapted into a new function from ovl_ml2ADELmetro.m\r","% SBPR Added progress bar (this function is way too slow)\r","\r","function varargout = bmmo_struct2xml( s, file, total )\r"," \r","    global meas;\r","\r","    if (length(fieldnames(s)) > 1)\r","        error(['Error processing the structure:' sprintf('\\n') 'There should be a single field in the main structure.']);\r","    end\r","    xmlname = fieldnames(s);\r","    xmlname = xmlname{1};\r","    \r","    %substitute special characters\r","    xmlname_sc = xmlname;\r","    xmlname_sc = strrep(xmlname_sc,'_dash_','-');\r","    xmlname_sc = strrep(xmlname_sc,'_colon_',':');\r","    xmlname_sc = strrep(xmlname_sc,'_dot_','.');\r","\r","    %create xml structure\r","    docNode = com.mathworks.xml.XMLUtils.createDocument(xmlname_sc);\r","\r","    %process the rootnode\r","    docRootNode = docNode.getDocumentElement;\r","\r","    %append childs\r","    meas = 0;\r","    progbar = char(ones(1,100) + 34);\r","    disp(progbar);\r","    parseStruct(s.(xmlname),docNode,docRootNode,[inputname(1) '.' xmlname '.'], '', floor(total/100));\r","\r","    if(nargout == 0)\r","        %save xml file\r","        xmlwrite(file,docNode);\r","    else\r","        varargout{1} = xmlwrite(docNode);\r","    end  \r","end\r","\r","% ----- Subfunction parseStruct -----\r","function [] = parseStruct(s,docNode,curNode,pName, fname, dotcount)\r","    \r","    global meas;\r","\r","    if strcmp(fname, 'SequenceNumber')\r","        meas = meas + 1;\r","    end\r","    \r","    if meas == dotcount\r","        fprintf(stdout, '.');\r","        meas = 0;\r","    end\r","        \r","    fnames = fieldnames(s);\r","    for i = 1:length(fnames)\r","        curfield = fnames{i};\r","        %substitute special characters\r","        curfield_sc = curfield;\r","        curfield_sc = strrep(curfield_sc,'_dash_','-');\r","        curfield_sc = strrep(curfield_sc,'_colon_',':');\r","        curfield_sc = strrep(curfield_sc,'_dot_','.');\r","        \r","        if (strcmp(curfield,'Attributes'))\r","            %Attribute data\r","            if (isstruct(s.(curfield)))\r","                attr_names = fieldnames(s.Attributes);\r","                for a = 1:length(attr_names)\r","                    cur_attr = attr_names{a};\r","                    \r","                    %substitute special characters\r","                    cur_attr_sc = cur_attr;\r","                    cur_attr_sc = strrep(cur_attr_sc,'_dash_','-');\r","                    cur_attr_sc = strrep(cur_attr_sc,'_colon_',':');\r","                    cur_attr_sc = strrep(cur_attr_sc,'_dot_','.');\r","                    \r","                    [cur_str,succes] = val2str(s.Attributes.(cur_attr));\r","                    if (succes)\r","                        curNode.setAttribute(cur_attr_sc,cur_str);\r","                    else\r","                        disp(['Warning. The text in ' pName curfield '.' cur_attr ' could not be processed.']);\r","                    end\r","                end\r","            else\r","                disp(['Warning. The attributes in ' pName curfield ' could not be processed.']);\r","                disp(['The correct syntax is: ' pName curfield '.attribute_name = ''Some text''.']);\r","            end\r","        elseif (strcmp(curfield,'Text'))\r","            %Text data\r","            [txt,succes] = val2str(s.Text);\r","            if (succes)\r","                curNode.appendChild(docNode.createTextNode(txt));\r","            else\r","                disp(['Warning. The text in ' pName curfield ' could not be processed.']);\r","            end\r","        else\r","            %Sub-element\r","            if (isstruct(s.(curfield)))\r","                %single element\r","                curElement = docNode.createElement(curfield_sc);\r","                curNode.appendChild(curElement);\r","                parseStruct(s.(curfield),docNode,curElement,[pName curfield '.'], curfield,  dotcount)\r","            elseif (iscell(s.(curfield)))\r","                %multiple elements\r","                for c = 1:length(s.(curfield))\r","                    curElement = docNode.createElement(curfield_sc);\r","                    curNode.appendChild(curElement);\r","                    if (isstruct(s.(curfield){c}))\r","                        parseStruct(s.(curfield){c},docNode,curElement,[pName curfield '{' num2str(c) '}.'], curfield, dotcount)\r","                    else\r","                        disp(['Warning. The cell ' pName curfield '{' num2str(c) '} could not be processed, since it contains no structure.']);\r","                    end\r","                end\r","            else\r","                %eventhough the fieldname is not text, the field could\r","                %contain text. Create a new element and use this text\r","                curElement = docNode.createElement(curfield_sc);\r","                curNode.appendChild(curElement);\r","                [txt,succes] = val2str(s.(curfield));\r","                if (succes)\r","                    curElement.appendChild(docNode.createTextNode(txt));\r","                else\r","                    disp(['Warning. The text in ' pName curfield ' could not be processed.']);\r","                end\r","            end\r","        end\r","    end\r","end\r","\r","%----- Subfunction val2str -----\r","function [str,succes] = val2str(val)\r","    \r","    succes = true;\r","    str = [];\r","    \r","    if (isempty(val))\r","        return; %bugfix from H. Gsenger\r","    elseif (ischar(val))\r","        %do nothing\r","    elseif (isnumeric(val))\r","        val = num2str(val);\r","    else\r","        succes = false;\r","    end\r","    \r","    if (ischar(val))\r","        %add line breaks to all lines except the last (for multiline strings)\r","        lines = size(val,1);\r","        val = [val char(sprintf('\\n')*[ones(lines-1,1);0])];\r","        \r","        %transpose is required since indexing (i.e., val(nonspace) or val(:)) produces a 1-D vector. \r","        %This should be row based (line based) and not column based.\r","        valt = val';\r","        \r","        remove_multiple_white_spaces = true;\r","        if (remove_multiple_white_spaces)\r","            %remove multiple white spaces using isspace, suggestion of T. Lohuis\r","            whitespace = isspace(val);\r","            nonspace = (whitespace + [zeros(lines,1) whitespace(:,1:end-1)])~=2;\r","            nonspace(:,end) = [ones(lines-1,1);0]; %make sure line breaks stay intact\r","            str = valt(nonspace');\r","        else\r","            str = valt(:);\r","        end\r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[42,44,45,47,48,51,52,53,54,57,60,63,64,65,66,68,70,71,72,79,81,82,85,86,87,90,91,92,94,95,96,97,99,101,102,103,104,107,108,109,110,112,113,114,115,116,119,120,121,123,125,126,127,128,129,131,133,135,136,137,138,140,141,142,143,144,145,146,149,152,153,154,155,156,157,158,168,169,171,172,173,175,176,177,178,181,183,184,188,190,191,193,194,195,196,197,198],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}