var sourceData563 = {"FileContents":["function xmlData = bmmo_load_ADEL(xmlFile, save)\r","% Given the file name/path for an ADEL/IDAT (Protected) file, the\r","% function decrypts the file and loads it to a struct \r","%\r","% Input\r","%   xmlFile: ADEL/IDAT (Protected) file name/path\r","%\r","% Output:\r","%   xmlData: XML file loaded into Matlab variable using xml_load\r","\r","\r","import BMMO_XY.tools.xml.decrypt\r","\r","% Input argument parsing\r","if nargin == 1\r","    save = false;\r","end\r","\r","% Create full file path\r","xmlFile = bmmo_create_full_file_path(xmlFile);\r","[filePath, fileName, fileExt] = fileparts(xmlFile);\r","\r","% Copy file to temp folder\r","tempFolderName = char(java.util.UUID.randomUUID);\r","tempXmlPath    = [tempdir tempFolderName];\r","tempXmlFile    = [tempXmlPath filesep fileName fileExt];\r","oldXmlFile     = xmlFile;\r","xmlFile        = tempXmlFile;\r","\r","mkdir(tempdir, tempFolderName);\r","copyfile(oldXmlFile, tempXmlPath);\r","\r","% Uncompress if required\r","if string(fileExt) == \".gz\"\r","    gunzip(xmlFile);\r","    xmlFile                       = [filePath filesep fileName];\r","    [filePath, fileName, fileExt] = fileparts(xmlFile);\r","end\r","\r","% Decrypt if required\r","xmlFileDecrypted = fullfile(filePath, [fileName '_decrypted' fileExt]);\r","protected        = 'Protected';\r","if isfile(xmlFileDecrypted)\r","    xmlFile = xmlFileDecrypted;\r","elseif sub_bmmo_determine_encrypted(xmlFile)\r","    xmlFile = decrypt(xmlFile);\r","else\r","    protected = '';\r","end\r","\r","% Load to structure\r","xmlData = xml_load(xmlFile);\r","\r","% Print diagnostics\r","fprintf('Loading %s%s\\n', xmlData.Header.DocumentType, protected);\r","\r","% Cleanup\r","if save\r","    [oldFilePath, ~, ~] = fileparts(oldXmlFile);\r","    [status, msg] = copyfile(xmlFile, oldFilePath, 'f');\r","    if status == 0\r","        error(msg)\r","    end\r","end\r","rmdir(tempXmlPath, 's');\r","\r","end\r","\r","\r","function encrypted = sub_bmmo_determine_encrypted(xmlFile)\r","\r","% Open the file\r","filehandle = fopen(xmlFile,'r');\r","if filehandle == -1\r","    error('could not open file: %s', xmlFile);\r","end\r","\r","% Make sure that we close the filehandle\r","encrypted = false;\r","try\r","    % Check the first 60 lines of the file\r","    for line_number = 1:60\r","        % Check the results\r","        if encrypted\r","            break\r","        end\r","        % Make sure that we don't reach the end of the file\r","        if ~feof(filehandle)\r","            % Store the line as a string\r","            line = string(fgetl(filehandle));\r","            % Check if the EncryptedData node is found\r","            if contains(line, \"<EncryptedData>\", 'IgnoreCase', true)\r","                encrypted = true;\r","            end\r","        end\r","    end\r","catch ME\r","    fclose(filehandle);\r","    rethrow(ME)\r","end\r","\r","% Close the file\r","fclose(filehandle);\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[15,16,20,21,24,25,26,27,28,30,31,34,41,42,43,45,46,47,48,52,55,58,65,73,74,79,80,82,84,85,88,90,92,93,103],"UnhitLineNumbers":[35,36,37,44,59,60,61,62,75,97,98,99],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,11,11,0,0,11,11,11,11,11,0,11,11,0,0,11,0,0,0,0,0,0,11,11,11,0,11,3,8,8,0,0,0,11,0,0,11,0,0,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,11,0,0,0,0,11,11,0,11,0,555,3,0,0,552,0,552,0,552,3,0,0,0,0,0,0,0,0,0,11,0,0]}}