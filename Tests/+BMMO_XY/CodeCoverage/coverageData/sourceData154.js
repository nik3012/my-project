var sourceData154 = {"FileContents":["function mlo = bmmo_model_mmo(mli, options)\r","% function mlo = bmmo_model_mmo(mli, options)\r","%\r","% Apply ATP-MMO model on field-reconstructed input data\r","%  1. Remove 3mm edge\r","%  2. Remove w2w outliers per chuck\r","%  3. Remove 10 par per chuck\r","%\r","% Input\r","%   mli: overlay structure\r","%\r","% Optional Input:\r","%   options: structure containing the following fields\r","%       chuck_usage.chuck_id_used: 1 * number of chucks double array\r","%           containing chuck ids\r","%       chuck_usage.chuck_id: 1 * mli.nwafer double array containing for\r","%           each wafer the chuck id of that wafer\r","%       \r","% If no options input is provided, values will be filled in from\r","% bmmo_default_options_structure\r","%\r","% Output\r","%   mlo: residual of ATP-MMO model on input structure\r","\r","if nargin < 2\r","    options = bmmo_default_options_structure;\r","end\r","\r","%  1. Remove 3mm edge\r","mlo = ovl_remove_edge(mli, 0.147);\r","\r","% 2. Remove w2w outliers\r","%mlo = bmmo_remove_w2w_outliers(mlo, options);\r","mlo = ovl_w2w_outliers(mlo, 'oddeven');\r","\r","mlt = ovl_get_wafers(mlo, []);\r","\r","% 3. Remove 10 par per chuck\r","\r","for ic = options.chuck_usage.chuck_id_used\r","   wafers_this_chuck = find(options.chuck_usage.chuck_id == ic);\r","   ml_this_chuck = ovl_get_wafers(mlo, wafers_this_chuck);\r","       \r","   ml_this_chuck = bmmo_model_BAO(ml_this_chuck, options);\r","   mlt = ovl_combine_wafers(mlt, ml_this_chuck);\r","end\r","\r","% The wafer ids in mlt are sorted\r","% Now unsort them to the original order\r","\r","[unused, id1] = sort(options.chuck_usage.chuck_id);\r","[unused, ids] = sort(id1);\r","\r","mlo = ovl_get_wafers(mlt, ids);\r","\r",""],"CoverageData":{"CoveredLineNumbers":[25,30,34,36,40,41,42,44,45,51,52,54],"UnhitLineNumbers":26,"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,122,0,0,0,122,0,122,0,0,0,122,238,238,0,238,238,0,0,0,0,0,122,122,0,122,0,0]}}