var sourceData456 = {"FileContents":["function [mlo, readout_date] = bmmo_read_adelmetrology(adel_input)\r","% function mlo = bmmo_read_adelmetrology(adel_input)\r","%\r","% Read an adelmetrology file into a 1 x n array of ml structures, where n\r","% is the number of unique target names in RecipeTargetId.TargetLabel\r","%\r","% Input: adel_input: full path of ADELmetrology input xml file\r","%\r","% Output: mlo: 1 x n array of ml structures\r","%\r","% 20170510 SBPR Now based on bmmo_parse_adelmetrology; now returns data in\r","%               field layout\r","% 20160606 SBPR Creation\r","\r","\r","\r","[xc, yc, xf, yf, labelid, dx, dy, validx, validy, unique_target_labels, readout_date] = bmmo_parse_adelmetrology(adel_input);\r","\r","[~, nwafer] = size(dx);\r","\r","% Get the unique target labels in this structure\r","numtargets = length(unique_target_labels);\r","\r","mlo = repmat(struct('nwafer', nwafer, 'layer', [], 'wd', [], 'nmark', 1, 'nfield', 0, 'nlayer', 1, 'tlgname', ''), 1, numtargets);\r","\r","% Set invalid overlay data to NaN (excluding WID_UP readouts)\r","tmpvalid = false(size(validx));\r","wupid = find(strcmp(unique_target_labels, 'WID_UP'));\r","if ~isempty(wupid)\r","    wupid = find(labelid == wupid(1));\r","    tmpvalid(wupid, :) = true;\r","end\r","validx = validx | tmpvalid;\r","validy = validy | tmpvalid;\r","dx(~validx) = NaN;\r","dy(~validy) = NaN;\r","\r","for it = 1:numtargets\r","    this_target = unique_target_labels{it};\r","    mlo(it).targetlabel = this_target;\r","\r","    targetindex = (labelid == it);\r","    \r","    read_xc = xc(targetindex);\r","    read_yc = yc(targetindex);\r","    read_xf = xf(targetindex);\r","    read_yf = yf(targetindex);\r","    read_xw = read_xc + read_xf;\r","    read_yw = read_yc + read_yf;\r","    \r","    allmark = [read_xf, read_yf];\r","    allfield = [read_xc, read_yc];\r","    \r","    [umark, ima, imc] = unique(allmark, 'rows');\r","    [ufield, ifa, ifc] = unique(allfield, 'rows');\r","    \r","    \r","    nfield = size(ufield, 1);\r","    nmark = size(umark, 1);\r","    mlo(it).nfield = nfield;\r","    mlo(it).nmark = nmark;\r","   \r","    all_xc = repmat(ufield(:,1),  1, nmark);\r","    all_yc = repmat(ufield(:,2), 1, nmark);\r","    all_xf = repmat(umark(:,1), 1, nfield);\r","    all_yf = repmat(umark(:,2), 1, nfield);\r","    \r","    mlo(it).wd.xc = reshape(all_xc', [], 1);\r","    mlo(it).wd.yc = reshape(all_yc', [], 1);\r","    mlo(it).wd.xf = reshape(all_xf, [], 1);\r","    mlo(it).wd.yf = reshape(all_yf, [], 1);\r","    mlo(it).wd.xw = mlo(it).wd.xc + mlo(it).wd.xf;\r","    mlo(it).wd.yw = mlo(it).wd.yc + mlo(it).wd.yf;\r","    \r","    markindex = knnsearch([mlo(it).wd.xw mlo(it).wd.yw], [read_xw read_yw]);\r","    \r","    lindex = find(targetindex);  \r","    \r","    for iw = 1:nwafer\r","        mlo(it).layer.wr(iw).dx = nan * zeros(size(mlo(it).wd.xw));\r","        mlo(it).layer.wr(iw).dy = mlo(it).layer.wr(iw).dx;\r","        mlo(it).layer.wr(iw).dx(markindex) = dx(lindex, iw);\r","        mlo(it).layer.wr(iw).dy(markindex) = dy(lindex, iw);  \r","    end\r","end\r"," \r","\r","\r","\r","\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[17,19,22,24,27,28,29,30,31,33,34,35,36,38,39,40,42,44,45,46,47,48,49,51,52,54,55,58,59,60,61,63,64,65,66,68,69,70,71,72,73,75,77,79,80,81,82,83],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}