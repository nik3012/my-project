var sourceData42 = {"FileContents":["function corr = bmmo_apply_time_filter(corr, filter_coefficients, scaling_factor)\r","% function corr = bmmo_apply_time_filter(corr, filter_coefficients, scaling_factor)\r","%\r","% Multiply a SBC correction structure by the time filtering constants\r","% in options, and optionally also by the given constant scaling factor\r","%\r","% Input:\r","%   corr: BMMO/BL3 correction structure as defined in\r","%       bmmo_default_output_structure (out.corr)\r","%   filter_coefficients: Value of time filter coefficients as defined in\r","%       default BMMO/Bl3 option structure\r","%\r","% Optional Input:\r","%   scaling_factor: scalar value\r","%\r","% Output:\r","%   corr: input correction with time filtering constants and scaling\r","%   applied\r","\r","if nargin < 3\r","    scaling_factor = 1;\r","end\r","options = bmmo_default_options_structure;\r","\r","corr.IR2EUV              = corr.IR2EUV * (scaling_factor * filter_coefficients.WH);\r","baonames                 = fieldnames(corr.BAO(1));\r","susdnames                = fieldnames(corr.SUSD(1));\r","baoscaling = scaling_factor * filter_coefficients.BAO;\r","\r","for ichuck = 1:2\r","    corr.KA.grid_2de(ichuck).dx   = corr.KA.grid_2de(ichuck).dx * (scaling_factor * filter_coefficients.KA);\r","    corr.KA.grid_2de(ichuck).dy   = corr.KA.grid_2de(ichuck).dy * (scaling_factor * filter_coefficients.KA);\r","    \r","    corr.KA.grid_2dc(ichuck).dx   = corr.KA.grid_2dc(ichuck).dx * (scaling_factor * filter_coefficients.KA);\r","    corr.KA.grid_2dc(ichuck).dy   = corr.KA.grid_2dc(ichuck).dy * (scaling_factor * filter_coefficients.KA);\r","    \r","    for ibao = 1:length(baonames)\r","        corr.BAO(ichuck).(baonames{ibao}) = corr.BAO(ichuck).(baonames{ibao}) * baoscaling;\r","    end\r","    \r","    corr.ffp(ichuck).dx           = corr.ffp(ichuck).dx * (scaling_factor * filter_coefficients.INTRAF);\r","    corr.ffp(ichuck).dy           = corr.ffp(ichuck).dy * (scaling_factor * filter_coefficients.INTRAF);\r","    \r","    corr.MI.wse(ichuck).x_mirr.dx = corr.MI.wse(ichuck).x_mirr.dx * (scaling_factor * filter_coefficients.MI);\r","    corr.MI.wse(ichuck).y_mirr.dy = corr.MI.wse(ichuck).y_mirr.dy * (scaling_factor * filter_coefficients.MI);\r","    \r","    corr.MI.wsm(ichuck).x_mirr.dx = corr.MI.wsm(ichuck).x_mirr.dx * (scaling_factor * filter_coefficients.MI);\r","    corr.MI.wsm(ichuck).y_mirr.dy = corr.MI.wsm(ichuck).y_mirr.dy * (scaling_factor * filter_coefficients.MI);\r","end\r","\r","for icorr_IFO = 1:length(options.IFO_scan_direction)\r","    for isusd = 1:length(susdnames)\r","        corr.SUSD(icorr_IFO).(susdnames{isusd}) = corr.SUSD(icorr_IFO).(susdnames{isusd}) * (scaling_factor * filter_coefficients.SUSD);\r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[20,21,23,25,26,27,28,30,31,32,34,35,37,38,41,42,44,45,47,48,51,52,53],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1166,1032,0,1166,0,1166,1166,1166,1166,0,1166,2332,2332,0,2332,2332,0,2332,23320,0,0,2332,2332,0,2332,2332,0,2332,2332,0,0,1166,4664,27984,0,0]}}