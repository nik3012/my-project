var sourceData58 = {"FileContents":["function FP_KA = bmmo_construct_FPS_KA(ml, options)\r","%function FP_KA = bmmo_construct_FPS_KA(ml, options)\r","%\r","% The function generates the raw KA fingerprint for the combined model\r","%\r","% Input: \r","%  ml: input ml structure\r","%  options: structure containing the fields \r","%           KA_orders: KA orders\r","%           scaling_factor: scaling factor\r","% \r","% Output: \r","%  FP_KA: KA fingerprint (1xN cell array of ml structs}\r","\r","dummy = ml;\r","\r","% length_KA: the number of KA columns in the design matrix\r","length_KA = (sum(options.KA_orders)) * 2;\r","FP_KA = cell(1, length_KA);\r","\r","% The first length_KA/2 columns are for dx; the next are for dy\r","ka_x_index = 1;\r","ka_y_index = 1 + (length_KA / 2);\r","\r","% For each KA order\r","for i_order = options.KA_orders\r","    \r","    ka_mat = bmmo_get_ka_matrix(dummy, i_order);\r","    \r","    % generate x fingerprints for this order\r","    % select only exponent terms valid for x\r","    % we don't want the last  term; this is purely a polynomial of\r","    % y\r","    for i_exp = 1:(i_order)\r","        \r","        tmp = dummy;\r","        tmp.layer.wr.dx = ka_mat(:, i_exp); \r","\r","        FP_KA{ka_x_index} = ovl_combine_linear(tmp, 1/options.scaling_factor);\r","        ka_x_index = ka_x_index + 1;\r","    end\r","    \r","    % generate y fingerprints for this order\r","    % select only i_exp terms valid for y\r","    % we don't want the first i_exp term; this is purely a polynomial of\r","    % x\r","    for i_exp = 2:(i_order + 1)\r","        \r","        tmp = dummy;\r","        tmp.layer.wr.dy = ka_mat(:, i_exp); \r","\r","        FP_KA{ka_y_index} = ovl_combine_linear(tmp, 1/options.scaling_factor);\r","        ka_y_index = ka_y_index + 1;\r","    end\r","end\r","   "],"CoverageData":{"CoveredLineNumbers":[15,18,19,22,23,26,28,34,36,37,39,40,47,49,50,52,53],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,179,179,0,0,179,179,0,0,179,0,716,0,0,0,0,0,716,0,2506,2506,0,2506,2506,0,0,0,0,0,0,716,0,2506,2506,0,2506,2506,0,0,0]}}