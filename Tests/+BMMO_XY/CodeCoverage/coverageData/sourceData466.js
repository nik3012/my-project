var sourceData466 = {"FileContents":["classdef  bmmo_RecorrectTsActuation < handle\r","    %% bmmo_RecorrectTsActuation  BMMO NXE & BL3 TS actuation Recorrection model.\r","    %\r","    % bmmo_RecorrectTsActuation Properties:\r","    % tsActuationConfig        - bmmo_Configuration object\r","    %                           (eg:bl3_3600D_configuration)\r","    % bmmoInput                - BMMO/BL3 input as parsed by bmmo_read_lcp_zip\r","    % recorrectionSbc          - SBC correction used for recorrection\r","    % kaFpActuationBaseliner3  - KA actuation method used for BL3\r","    %                            recorrectionSbc (determined using\r","    %                            tsActuationConfig)\r","    % kaFpActuationBmmo        - KA actuation method used for BMMO\r","    %                            recorrectionSbc (Constant)\r","    % defaultPlatform          - Platform (Constant) used for calculation of\r","    %                            recorrection and decorrection fingerprints\r","    % mlBmmoInput              - ml structure of bmmoInput\r","    % decorrectedMl            - ml structure of de-corrected bmmoInput\r","    % decorrectOptions         - Decorrection FPS calculation option struct\r","    % recorrectOptions         - Recorrection FPS calculation option struct\r","    % decorrectionFps          - FPS calculated for bmmoInput de-correction\r","    % recorrectionFps          - FPS calculated for bmmoInput re-correction\r","    % bmmoInputRecorrected     - bmmoInput after applying decorrectionFps &\r","    %                            recorrectionFps\r","    \r","    properties (SetObservable)\r","        tsActuationConfig function_handle\r","    end\r","    \r","    properties\r","        bmmoInput struct\r","        recorrectionSbc struct\r","        kaFpActuationBaseliner3 char\r","        decorrectedMl\r","    end\r","    \r","    properties (Constant)\r","        defaultPlatform = 'LIS'\r","    end\r","    \r","    properties (SetAccess = private)\r","        mlBmmoInput\r","        decorrectOptions\r","        recorrectOptions\r","        decorrectionFps\r","        recorrectionFps\r","        bmmoInputRecorrected\r","    end\r","    \r","    properties (Access = private)\r","        recorrectionSbcType\r","        bmmoDefaultInput = bmmo_default_input\r","        bmmoDefaultOutput = bmmo_default_output_structure(bmmo_default_options_structure)\r","    end\r","    \r","    \r","    \r","    methods\r","        function obj = bmmo_RecorrectTsActuation(tsActuationConfig, bmmoInput,...\r","                recorrectionSbc)\r","            % bmmo_RecorrectTsActuation constructs object\r","            %\r","            % Usage\r","            %\r","            %   obj = bmmo_RecorrectTsActuation(tsActuationConfig)\r","            %       Constructs the object using tsActuationConfig. Default\r","            %       vaules (zero) are given to other inputs and can be set later\r","            %\r","            %   obj = bmmo_RecorrectTsActuation(tsActuationConfig, bmmoInput)\r","            %       Constructs the object using tsActuationConfig and bmmoInput.\r","            %       Default output structure is set for recorrectionSbc\r","            %\r","            % Inputs\r","            %\r","            % tsActuationConfig        - bmmo_Configuration object\r","            %                           (eg:bl3_3600D_configuration)\r","            % bmmoInput                - BMMO/BL3 input as parsed by bmmo_read_lcp_zip\r","            % recorrectionSbc          - SBC correction used for recorrection\r","            %\r","            % Outputs (relevant)\r","            % bmmoInputRecorrected     - bmmoInput after applying decorrectionFps &\r","            %                            recorrectionFps\r","            \r","            obj.tsActuationConfig = tsActuationConfig;\r","            \r","            switch nargin\r","                case 3\r","                    obj.bmmoInput = bmmoInput;\r","                    obj.recorrectionSbc = recorrectionSbc;\r","                case 2\r","                    obj.bmmoInput = bmmoInput;\r","                    obj.recorrectionSbc = obj.bmmoDefaultOutput.corr;\r","                case 1\r","                    obj.bmmoInput = obj.bmmoDefaultInput;\r","                    obj.recorrectionSbc = obj.bmmoDefaultOutput.corr;\r","            end\r","            \r","            obj.kaFpActuationBaseliner3 = obj.getKaFpActuationFromIntraf(obj.tsActuationConfig);\r","            addlistener(obj,{'tsActuationConfig'},'PostSet',@obj.handleKaActuationChange);\r","        end\r","        \r","        \r","        function run(obj)\r","            \r","            getRecorrectionModelOptions(obj)\r","            modelRecorrectionFps(obj)\r","            applyRecorrectionToBmmoInput(obj)\r","            \r","            switch obj.recorrectionSbcType\r","                case 'Baseliner 3'\r","                    updateBaseliner3InputNce(obj)\r","                case 'BMMO NXE'\r","                    updateBmmoNxeInputNce(obj)\r","            end\r","        end\r","        \r","        function getRecorrectionModelOptions(obj)\r","            [obj.mlBmmoInput, obj.decorrectOptions] = bmmo_process_input(obj.bmmoInput);\r","            obj.decorrectOptions.intraf_actuation.fnhandle = @bmmo_INTRAF_inline_SDM_fingerprint;\r","            \r","            switch obj.decorrectOptions.bl3_model\r","                case true\r","                    obj.decorrectOptions.KA_actuation.fnhandle = @bmmo_KA_HOC_fingerprint;\r","                    obj.decorrectOptions.KA_actuation.type = obj.getKaFpActuationFromIntraf...\r","                        (obj.decorrectOptions.inline_sdm_config.fnhandle);\r","                case false\r","                    obj.decorrectOptions.KA_actuation.fnhandle = @bmmo_KA_LOC_CET_fingerprint;\r","                    obj.decorrectOptions.KA_actuation.type = obj.getKaFpActuationFromIntraf...\r","                        (obj.decorrectOptions.inline_sdm_config.fnhandle);\r","\r","            end\r","            \r","            obj.recorrectOptions = obj.decorrectOptions;\r","            obj.recorrectOptions.inline_sdm_config.fnhandle = obj.tsActuationConfig;\r","            switch obj.recorrectionSbcType\r","                case 'Baseliner 3'\r","                    obj.recorrectOptions.KA_actuation.fnhandle = @bmmo_KA_HOC_fingerprint;\r","                    obj.recorrectOptions.KA_actuation.type = obj.kaFpActuationBaseliner3;\r","                case 'BMMO NXE'\r","                    obj.recorrectOptions.KA_actuation.fnhandle = @bmmo_KA_LOC_CET_fingerprint;\r","                    obj.recorrectOptions.KA_actuation.type = obj.kaFpActuationBaseliner3;\r","            end\r","        end\r","        \r","        \r","        function modelRecorrectionFps(obj)\r","            mlDummy = ovl_create_dummy(obj.mlBmmoInput, 'edge', obj.decorrectOptions.wafer_radius_in_mm);\r","            prevSbc = obj.bmmoInput.info.previous_correction;\r","            obj.decorrectionFps = bmmo_apply_SBC_core(mlDummy,...\r","                prevSbc, 1, obj.decorrectOptions);\r","            \r","            obj.recorrectionFps  = bmmo_apply_SBC_core(mlDummy,...\r","                obj.recorrectionSbc, 1, obj.recorrectOptions);\r","        end\r","        \r","        \r","        function applyRecorrectionToBmmoInput(obj)\r","            obj.decorrectedMl = ovl_sub(obj.mlBmmoInput,...\r","                obj.decorrectionFps.TotalSBCcorrection);\r","            recorrectedMl = ovl_add(obj.decorrectedMl,...\r","                obj.recorrectionFps.TotalSBCcorrection);\r","            obj.bmmoInputRecorrected = bmmo_map_to_smf(recorrectedMl, obj.bmmoInput);\r","            obj.bmmoInputRecorrected.info.previous_correction = obj.recorrectionSbc;\r","        end\r","        \r","        \r","        function updateBaseliner3InputNce(obj)\r","            [recorrectKaCorr, recorrectKaRes] = obj.calculateKaCetCorrection(obj.mlBmmoInput, ...\r","                obj.recorrectionSbc.KA, obj.recorrectOptions);\r","            obj.bmmoInputRecorrected.info.report_data.KA_cet_corr = recorrectKaCorr;\r","            obj.bmmoInputRecorrected.info.report_data.KA_cet_nce = recorrectKaRes;\r","            obj.bmmoInputRecorrected.info.report_data.inline_sdm_residual = obj.calculateIntrafReportedNce...\r","                (obj.recorrectionSbc.ffp, obj.recorrectOptions);\r","            \r","            \r","            if isfield(obj.bmmoInput.info.configuration_data, 'bl3_model') &&...\r","                    obj.bmmoInput.info.configuration_data.bl3_model\r","                \r","                [~, decorrectKaRes] = obj.calculateKaCetCorrection(obj.mlBmmoInput, ...\r","                    obj.bmmoInput.info.previous_correction.KA, obj.decorrectOptions);\r","                DeltaKaRes = ovl_sub(recorrectKaRes, decorrectKaRes);\r","                \r","                obj.bmmoInputRecorrected.info.report_data.cet_residual = ovl_add...\r","                    (obj.bmmoInputRecorrected.info.report_data.cet_residual, DeltaKaRes);\r","                \r","                if ~isfield(obj.bmmoInput.info.report_data,'inline_sdm_cet_residual')\r","                    obj.bmmoInputRecorrected.info.report_data.inline_sdm_cet_residual =...\r","                        obj.calculateIntrafReportedNce...\r","                        (obj.bmmoInput.info.previous_correction.ffp, obj.decorrectOptions);\r","                end\r","                \r","            else\r","                obj.bmmoInputRecorrected.info.report_data.cet_residual = recorrectKaRes;\r","                obj.bmmoInputRecorrected.info.report_data.inline_sdm_cet_residual = ...\r","                    obj.bmmoDefaultOutput.corr.ffp;\r","            end\r","        end\r","        \r","        \r","        function updateBmmoNxeInputNce(obj)\r","            obj.bmmoInputRecorrected.info.report_data.inline_sdm_residual = obj.calculateIntrafReportedNce...\r","                (obj.recorrectionSbc.ffp, obj.recorrectOptions);\r","        end\r","        \r","        \r","        function handleKaActuationChange(obj,~, ~)\r","            obj.kaFpActuationBaseliner3 = obj.getKaFpActuationFromIntraf(obj.tsActuationConfig);\r","        end\r","        \r","        \r","        function val = get.recorrectionSbcType(obj)\r","            sbc_configuration = bmmo_configuration_from_sbc(obj.recorrectionSbc);\r","            if sbc_configuration.bl3_model\r","                val = 'Baseliner 3';\r","            else\r","                val = 'BMMO NXE';\r","            end\r","        end\r","        \r","        \r","        function set.bmmoInput(obj, val)\r","            val.info.configuration_data.platform = obj.defaultPlatform;\r","            obj.bmmoInput = val;\r","        end\r","    end\r","    \r","    \r","    methods (Static)\r","        function KaFpActuation = getKaFpActuationFromIntraf(IntrafFpActuation)\r","            configuration = feval(IntrafFpActuation);\r","            hocActuation = configuration.getConfigurationObject('CetModel');\r","            KaFpActuation = hocActuation.cetModel;\r","        end\r","        \r","        \r","        function [inlineSdmRes, inlineCetSdmRes] = calculateIntrafReportedNce(IntrafSbc, options)\r","            isdmConfig = feval(options.inline_sdm_config.fnhandle);\r","            inlineSDM = isdmConfig.getConfigurationObject('InlineSdmModel');\r","            inlineSDM.mlDistoIn = bmmo_ffp_to_ml_simple(IntrafSbc);\r","            inlineSDM.calcReport;\r","            inlineSdmRes = inlineSDM.mlToFfp(inlineSDM.report.res);\r","            inlineCetSdmRes = inlineSDM.mlToFfp(inlineSDM.report.hoc.mlHocResSrr);\r","        end\r","        \r","        \r","        function [mlKaCorr, mlKaRes] = calculateKaCetCorrection(ml, KaSbc, options)\r","            mlKaInput = ovl_create_dummy(ml, 'marklayout',...\r","                options.CET_marklayout,'nwafer',1, 'edge', 200);\r","            mlKaCorrPerChuck = ovl_get_wafers(mlKaInput,[]);\r","            mlKaResPerChuck = ovl_get_wafers(mlKaInput,[]);\r","            mlKaCorrTemp = mlKaInput;\r","            \r","            for ic = 1:length(KaSbc.grid_2de)\r","                ka_grid = bmmo_KA_corr_to_grid(KaSbc.grid_2de(ic));\r","                mlKaCorrTemp.layer.wr.dx = ka_grid.interpolant_x(mlKaInput.wd.xw, mlKaInput.wd.yw);\r","                mlKaCorrTemp.layer.wr.dy = ka_grid.interpolant_y(mlKaInput.wd.xw, mlKaInput.wd.yw);\r","                mlKaResTemp = bmmo_cet_model(mlKaCorrTemp, options.KA_actuation.type);\r","                mlKaCorrPerChuck = ovl_combine_wafers(mlKaCorrPerChuck, mlKaCorrTemp);\r","                mlKaResPerChuck = ovl_combine_wafers(mlKaResPerChuck, mlKaResTemp);\r","            end\r","            \r","            mlKaCorr = ovl_get_wafers(mlKaCorrPerChuck, options.chuck_usage.chuck_id);\r","            mlKaRes = ovl_get_wafers(mlKaResPerChuck, options.chuck_usage.chuck_id);\r","        end\r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[83,85,86,87,88,89,90,91,92,93,94,97,98,104,105,106,108,109,110,111,112,117,118,120,121,122,123,124,125,126,127,128,132,133,134,135,136,137,138,139,140,146,147,148,149,151,152,157,158,159,160,161,162,167,168,169,170,171,172,175,176,178,179,180,182,183,185,186,187,188,191,192,193,194,200,201,206,211,212,213,214,215,221,222,229,230,231,236,237,238,239,240,241,246,247,248,249,250,252,253,254,255,256,257,258,261,262],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}