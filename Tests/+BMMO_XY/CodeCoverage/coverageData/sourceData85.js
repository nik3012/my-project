var sourceData85 = {"FileContents":["function [ml_out] = bmmo_extrapolate_nan(ml_in, type)\r","%function [ml_out] = bmmo_extrapolate_nan(ml_in, type)\r","%\r","% The function extrapolates the NaNs of given ml structure using scatterdInterpolatant\r","%\r","% Input:\r","%  ml_in: ml structure\r","%\r","% Optional Input:\r","% type: type of extrapolation method, default being 'natural'\r","%\r","% Output:\r","%  ml_out: ml_in with extrapolated NaNs\r","\r","if nargin < 2\r","    type='natural';\r","end\r","\r","ml_out = ml_in;\r","\r","for lay = 1:ml_in.nlayer\r","    for waf = 1:ml_in.nwafer\r","        not_nans = find(~isnan(ml_in.layer(lay).wr(waf).dx));\r","        nans = find(isnan(ml_in.layer(lay).wr(waf).dx));\r","        Fx = scatteredInterpolant(ml_in.wd.xw(not_nans), ml_in.wd.yw(not_nans), ml_in.layer(lay).wr(waf).dx(not_nans), type);\r","        Fy = scatteredInterpolant(ml_in.wd.xw(not_nans), ml_in.wd.yw(not_nans), ml_in.layer(lay).wr(waf).dy(not_nans), type);\r","        \r","        ml_out.layer(lay).wr(waf).dx(nans) = Fx(ml_in.wd.xw(nans), ml_in.wd.yw(nans));\r","        ml_out.layer(lay).wr(waf).dy(nans) = Fy(ml_in.wd.xw(nans), ml_in.wd.yw(nans));\r","    end\r","end\r","\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[15,16,19,21,22,23,24,25,26,28,29],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}