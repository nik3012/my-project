var sourceData288 = {"FileContents":["classdef testBmmoGetDynamicFilterCoefficients < BMMO_XY.tools.testSuite\r","\r","    methods(Test)\r","        \r","        %% delta_t <= T1:\r","        function Case1(obj)            \r","            % Given\r","            filter_in = bmmo_get_empty_filter;            \r","            T1 = 7:19;\r","            T2 = 20;\r","            wafers_per_chuck = 3;            \r","            fn = fieldnames(filter_in);            \r","            for ii = T1\r","                delta_t = 0:ii;\r","                \r","                % When\r","                filter_out = bmmo_get_dynamic_filter_coefficients(filter_in, delta_t, wafers_per_chuck, ii, T2, 'OTAS');\r","                for jj = 1:length(delta_t)\r","                    for kk = 1:length(fn)\r","                        \r","                        % Then\r","                        obj.verifyWithinTol(filter_in.(fn{kk}), filter_out.(fn{kk})(jj));\r","                    end\r","                end\r","            end\r","        end\r","        \r","        %% delta_t >= T2;\r","        function Case2(obj)\r","            % Given\r","            filter_in = bmmo_get_empty_filter;            \r","            T1 = 7;\r","            T2 = 20:-1:8;\r","            wafers_per_chuck = 3;            \r","            fn = fieldnames(filter_in);            \r","            for ii = T2\r","                delta_t = ii:20;\r","                \r","                % When\r","                filter_out = bmmo_get_dynamic_filter_coefficients(filter_in, delta_t, wafers_per_chuck, T1, ii, 'OTAS');\r","                \r","                for jj = 1:length(delta_t)\r","                    for kk = 1:length(fn)\r","                        \r","                        % Then\r","                        obj.verifyWithinTol(filter_in.(fn{kk}), filter_out.(fn{kk})(jj));\r","                    end\r","                end\r","            end\r","        end\r","        \r","        %% delta_t between T1 and T2\r","        function Case3(obj)\r","            % Given\r","            filter_in = bmmo_get_empty_filter;            \r","            T1 = 7;\r","            T2 = 20;\r","            wafers_per_chuck = 3;            \r","            fn = fieldnames(filter_in);           \r","            delta_t = 7:20;\r","            \r","            % When\r","            filter_out = bmmo_get_dynamic_filter_coefficients(filter_in, delta_t, wafers_per_chuck, T1, T2, 'OTAS');            \r","            for kk = 1:length(fn)                                           % linearity check\r","                \r","                % Then\r","                obj.verifyTrue(all(abs(diff(diff(filter_out.(fn{kk})))) < eps));\r","            end\r","        end\r","        \r","        %% changing wafers per chuck\r","        function Case4(obj)\r","            % Given\r","            filter_in = bmmo_get_empty_filter;            \r","            T1 = 7;\r","            T2 = 20;\r","            fn = fieldnames(filter_in);            \r","            delta_t = 2;\r","            for iw = 1:3\r","                filter_out(iw) = bmmo_get_dynamic_filter_coefficients(filter_in, delta_t, iw, T1, T2, 'OTAS');\r","            end\r","            scale_test = sqrt(3 ./ [1 2 3]);                                % linearity check\r","            for kk = 1:length(fn)\r","                \r","                % When\r","                fv = [filter_out.(fn{kk})];\r","                fv = fv .* scale_test;\r","                \r","                % Then\r","                obj.verifyTrue(all(abs(fv - 1) < eps));\r","            end            \r","        end\r","        \r","        %% test case of four wafers per chuck        \r","        function Case5(obj)\r","            % Given\r","            filter_in = bmmo_get_empty_filter;            \r","            T1 = 7;\r","            T2 = 20;\r","            wafers_per_chuck = 4;            \r","            fn = fieldnames(filter_in);\r","            delta_t = 1:20;        \r","            \r","            % When\r","            filter_out = bmmo_get_dynamic_filter_coefficients(filter_in, delta_t, wafers_per_chuck, T1, T2, 'OTAS');            \r","            for kk = 1:length(fn)\r","                \r","                % Then\r","                obj.verifyTrue(all(filter_out.(fn{kk}) <= 1));\r","            end\r","        end\r","        \r","        %% test case for BL3/BMMO NXE in LIS + adjustable time filter\r","        function Case6(obj)\r","            % Given\r","            load([bmmo_testdata_root filesep 'adaptive_time_filter_BL3_LIS.mat']);            \r","            filter_in.WH = 0.1;\r","            filter_in.MI = 0.3;\r","            filter_in.BAO = 0.6;\r","            filter_in.KA = 0.4;\r","            filter_in.INTRAF = 0.5;\r","            filter_in.SUSD = 0.2;            \r","            T1 = 7;\r","            T2 = 20;\r","            wafers_per_chuck = [1 2 2];            \r","            fn = fieldnames(filter_in);\r","            delta_t = [6.4583 11.4583 20.4583];            \r","            for i = 1:length(wafers_per_chuck)\r","                \r","                % When\r","                filter_out = bmmo_get_dynamic_filter_coefficients(filter_in, delta_t(i), wafers_per_chuck(i), T1, T2, 'LIS');\r","                \r","                % Then\r","                obj.verifyWithinTol(filter_out, test_filter_out(i));\r","            end\r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,12,13,14,17,18,19,22,31,32,33,34,35,36,37,40,42,43,46,55,56,57,58,59,60,63,64,67,74,75,76,77,78,79,80,82,83,86,87,90,97,98,99,100,101,102,105,106,109,116,117,118,119,120,121,122,123,124,125,126,127,128,131,134],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,1,1,13,0,0,13,13,182,0,0,1092,0,0,0,0,0,0,0,0,1,1,1,1,1,1,13,0,0,13,0,13,91,0,0,546,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,6,0,0,0,0,0,0,1,1,1,1,1,1,3,0,1,1,0,0,6,6,0,0,6,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,6,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,3,0,0,3,0,0,0,0,0,0,0]}}