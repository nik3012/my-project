var sourceData322 = {"FileContents":["classdef testBmmoProcessOutput < BMMO_XY.tools.testSuite\r","    \r","    methods(Static)\r","        %% Sub function\r","        function stats_out = sub_add_type(stats_in)\r","            \r","            stats_out = stats_in;\r","            for il = 1:length(stats_in.layer)\r","                for iw = 1:length(stats_in.layer(il).wafer)\r","                    stats_out.layer(il).wafer(iw).type = ones(size(stats_in.layer(il).wafer(iw).x));\r","                end\r","            end\r","        end\r","        \r","        function KA_grid = sub_update_KA_model_result(KA_corr)\r","            \r","            ka_grid1 = bmmo_KA_corr_to_grid(KA_corr(1));\r","            ka_grid2 = bmmo_KA_corr_to_grid(KA_corr(2));\r","            KA_grid = [ka_grid1 ka_grid2];\r","        end\r","        \r","    end\r","    \r","    methods\r","        %% Setup\r","        function model_results = sub_update_model_results(obj, model_results)           \r","            model_results.KA.Calib_KA = obj.sub_update_KA_model_result(model_results.KA.Calib_KA);\r","            model_results.KA.Calib_KA_meas = obj.sub_update_KA_model_result(model_results.KA.Calib_KA_meas);\r","        end\r","        \r","    end\r","    \r","    methods(Test)\r","        \r","        %% regression-only test with 87-field 2de input\r","        % MI@M = MI@E and KA@M OFF\r","        function Case1(obj)\r","            % Given            \r","            load([bmmo_testdata_root filesep 'TC_output_processing_in.mat']);\r","            load([bmmo_testdata_root filesep 'TC_output_processing_out.mat']);            \r","            model_results.outlier_stats = stats;\r","            model_results.interfield_residual = model_results.BAO.interfield;\r","            model_results.INTRAF.residual = model_results.INTRAF.intrafield;\r","            model_results.MI.res = model_results.interfield_residual;\r","            model_results.outlier_stats = obj.sub_add_type(model_results.outlier_stats);            \r","            model_results.INTRAF = rmfield(model_results.INTRAF, 'Calib_Kfactors');\r","            tmp_options = bmmo_default_options_structure;\r","            for chuck_id = 1:2\r","                [~, model_results.INTRAF.Calib_Kfactors(chuck_id)] = bmmo_fit_model(model_results.INTRAF.Calib_intra(chuck_id), tmp_options, '20par');\r","            end            \r","            options.WH.use_input_fp                  = 0;\r","            options.WH.fp                            = [];\r","            options.WH.use_raw                       = 0;\r","            wh_fp = bmmo_construct_wh_fp(ml, options);            \r","            model_results.WH.fp_per_chuck = bmmo_average_chuck(wh_fp, options);\r","            tmp_options = bmmo_default_options_structure;\r","            options.filter = tmp_options.filter;\r","            options = bmmo_phase_2_options(options);\r","            options = bmmo_wh_options(ml, options);\r","            options.layer_fields = {1:87};\r","            options.no_layer_to_use = 1;\r","            options.bl3_model = 0;\r","            options.susd_control = 0;\r","            options.invert_MI_wsm_sign = 0;\r","            options.KA_control = 0;\r","            options.KA_measure_enabled = 0;\r","            options.IFO_scan_direction = [-1 1 -1 1];\r","            options.model_shift = tmp_options.model_shift;\r","            options.platform = tmp_options.platform;\r","            options.FIWA_mark_locations = tmp_options.FIWA_mark_locations;\r","            options = bmmo_options_intraf(options,3);\r","            options.KA_meas_start = tmp_options.KA_meas_start;\r","            \r","            mr = bmmo_default_model_result(ml, options);\r","            model_results.sub_model_input = mr.sub_model_input;\r","            model_results.KA.Calib_KA_meas = mr.KA.Calib_KA_meas;\r","            temp_out = bmmo_default_output_structure(options);\r","            submodels = {'WH', 'MI', 'KA', 'INTRAF', 'BAO'};        % add filter coefficients\r","            for isub = 1:length(submodels)\r","                options.filter_coefficients.(submodels{isub}) = 1;\r","            end            \r","            options.previous_correction.SUSD = temp_out.corr.SUSD;\r","            out.corr.SUSD = temp_out.corr.SUSD;\r","            model_results.SUSD.Monitor_SUSD = model_results.SUSD.Calib_SUSD;\r","            options.previous_correction.KA.grid_2dc = temp_out.corr.KA.grid_2dc;\r","            out.corr.KA.grid_2dc = temp_out.corr.KA.grid_2dc;\r","            options.undo_before_modelling = false;                  % add new flags\r","            options.parlist = bmmo_parlist;\r","            options.intraf_resample_options = tmp_options.intraf_resample_options;\r","            options.KA_actuation = tmp_options.KA_actuation;\r","            options.ERO = tmp_options.ERO;            \r","            model_results = obj.sub_update_model_results(model_results);            \r","            options.KA_actuation = tmp_options.KA_actuation;\r","            options.intraf_actuation = tmp_options.intraf_actuation;  \r","            \r","            % When\r","            test_out = bmmo_process_output(ml, model_results, options);            \r","            fn = fieldnames(test_out.corr.BAO);                     % obj.subtract previous correction from test_out\r","            for ic = 1:2                                            % (time filtering is not taken into account for test output data)\r","                for ifield = 1:length(fn)\r","                    test_out.corr.BAO(ic).(fn{ifield}) = test_out.corr.BAO(ic).(fn{ifield}) - options.previous_correction.BAO(ic).(fn{ifield});\r","                end\r","            end        \r","            \r","            % Then\r","            obj.verifyWithinTol(test_out.corr.IR2EUV, out.corr.IR2EUV);\r","            obj.verifyWithinTol(test_out.corr.BAO, out.corr.BAO);\r","            obj.verifyWithinTol(test_out.corr.MI, out.corr.MI);\r","            obj.verifyWithinTol(test_out.corr.KA, out.corr.KA);\r","            obj.verifyWithinTol(bmmo_ffp_to_ml_simple(test_out.corr.ffp), ovl_model(bmmo_ffp_to_ml_simple(out.corr.ffp), 'perwafer'));            \r","        end\r","        \r","        %% regression-only test with 87-field 2de input\r","        %  MI@M = -MI@E and KA@M ON\r","        function Case2(obj)\r","            % Given\r","            load([bmmo_testdata_root filesep 'TC_output_processing_in_1.mat']);\r","            load([bmmo_testdata_root filesep 'TC_output_processing_out_1.mat']);            \r","            model_results.outlier_stats = stats;\r","            model_results.interfield_residual = model_results.BAO.interfield;\r","            model_results.INTRAF.residual = model_results.INTRAF.intrafield;\r","            model_results.MI.res = model_results.interfield_residual;\r","            model_results.outlier_stats = obj.sub_add_type(model_results.outlier_stats);            \r","            model_results.INTRAF = rmfield(model_results.INTRAF, 'Calib_Kfactors');\r","            tmp_options = bmmo_default_options_structure;\r","            for chuck_id = 1:2\r","                [~, model_results.INTRAF.Calib_Kfactors(chuck_id)] = bmmo_fit_model(model_results.INTRAF.Calib_intra(chuck_id), tmp_options, '20par');\r","            end            \r","            options.WH.use_input_fp                  = 0;\r","            options.WH.fp                            = [];\r","            options.WH.use_raw                       = 0;\r","            wh_fp = bmmo_construct_wh_fp(ml, options);\r","            model_results.WH.fp_per_chuck = bmmo_average_chuck(wh_fp, options);\r","            tmp_options = bmmo_default_options_structure;\r","            options.filter = tmp_options.filter;\r","            options.invert_MI_wsm_sign = tmp_options.invert_MI_wsm_sign; % 1\r","            options.KA_control = 1;\r","            options.KA_measure_enabled = 1; %1\r","            options = bmmo_phase_2_options(options);\r","            options = bmmo_wh_options(ml, options);            \r","            options.layer_fields = {1:87};\r","            options.bl3_model = 0;\r","            options.no_layer_to_use = 1;\r","            options.susd_control = 0;\r","            options.IFO_scan_direction = [-1 1 -1 1];\r","            options.model_shift = tmp_options.model_shift;\r","            options.platform = tmp_options.platform;\r","            options.KA_meas_start = tmp_options.KA_meas_start;\r","            options = bmmo_options_intraf(options,3);            \r","            mr = bmmo_default_model_result(ml, options);\r","            model_results.sub_model_input = mr.sub_model_input;            \r","            temp_out = bmmo_default_output_structure(options);\r","            submodels = {'WH', 'MI', 'KA', 'INTRAF', 'BAO'};                % add filter coefficients\r","            for isub = 1:length(submodels)\r","                options.filter_coefficients.(submodels{isub}) = 1;\r","            end            \r","            options.previous_correction.SUSD = temp_out.corr.SUSD;\r","            out.corr.SUSD = temp_out.corr.SUSD;\r","            model_results.SUSD.Monitor_SUSD = model_results.SUSD.Calib_SUSD;            \r","            model_results = obj.sub_update_model_results(model_results);\r","            options.undo_before_modelling = false;                          % add new flags\r","            options.parlist = bmmo_parlist;\r","            options.intraf_resample_options = tmp_options.intraf_resample_options;\r","            options.KA_actuation = tmp_options.KA_actuation;\r","            options.intraf_actuation = tmp_options.intraf_actuation;\r","            options.ERO = tmp_options.ERO;\r","            \r","            % When\r","            test_out = bmmo_process_output(ml, model_results, options);            \r","            fn = fieldnames(test_out.corr.BAO);                             % subtract previous correction from test_out\r","            for ic = 1:2                                                    % (time filtering is not taken into account for test output data)\r","                for ifield = 1:length(fn)\r","                    test_out.corr.BAO(ic).(fn{ifield}) = test_out.corr.BAO(ic).(fn{ifield}) - options.previous_correction.BAO(ic).(fn{ifield});\r","                end\r","            end         \r","            \r","            % Then\r","            obj.verifyWithinTol(test_out.corr.IR2EUV, out.corr.IR2EUV);\r","            obj.verifyWithinTol(test_out.corr.BAO, out.corr.BAO);\r","            obj.verifyWithinTol(test_out.corr.MI, out.corr.MI);\r","            obj.verifyWithinTol(test_out.corr.KA, out.corr.KA);\r","            obj.verifyWithinTol(bmmo_ffp_to_ml_simple(test_out.corr.ffp), ovl_model(bmmo_ffp_to_ml_simple(out.corr.ffp), 'perwafer'));                    \r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[7,8,9,10,17,18,19,27,28,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,99,100,101,106,107,108,109,110,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,160,161,162,163,164,165,166,169,170,171,172,173,178,179,180,181,182],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,2,2,2,12,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,5,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,2,20,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,2,20,0,0,0,0,1,1,1,1,1,0,0,0,0,0]}}