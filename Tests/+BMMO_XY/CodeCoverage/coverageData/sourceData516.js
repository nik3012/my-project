var sourceData516 = {"FileContents":["function ml = bmmo_kt_process_adelwhc_input(mli, adelwhc, widmapping)\r","% function ml = bmmo_kt_process_adelwhc_input(mli, adelwhc)\r","%\r","% Given an ml structure, return the structure with added fields parsed from\r","% the given ADELwaferHeatingCorrectionsReport, as required by the BMMO-NXE drift control model\r","%\r","% Input\r","%   mli: standard input structure \r","%   adelwhc: full path of ADELwaferHeatingCorrectionsReport xml file\r","%\r","% Output\r","%   ml: input structure with added fields\r","%       ml.info.report_data.WH_K_factors\r","%       ml.info.report_data.IR2EUVsensitivity\r","%       ml.info.report_data.Rir2EUV\r","%       ml.info.report_data.r;\r","%       ml.info.report_data.t;\r","%       ml.info.report_data.Pdgl;\r","%       ml.info.report_data.SLIP;\r","%       ml.info.report_data.tret;\r","%\r","% 20160412 SBPR Creation\r","% 20200512 SELR Fix for 2L expose and 1L readout\r","\r","NM = 1e-9;\r","PPM = 1e-6;\r","URAD = 1e-6;\r","NM_CM2 = 1e-5;\r","NM_CM3 = 1e-3;\r","options = bmmo_default_options_structure;\r","\r","ml = mli;\r","\r","if nargin < 3\r","    widmapping = 1:mli.nwafer;\r","end\r","\r","% Read adel whc\r","whc = xml_load(adelwhc);\r","\r","% Read K-factors\r","wafer_results = [whc.Results.WaferResultsList.elt];\r","wafer_results = wafer_results(widmapping);\r","\r","totalsensitivity = 0;\r","\r","if isfield(mli, 'raw')\r","    nfield = mli.raw.nfield;\r","else\r","    nfield = mli.nfield;\r","end\r","\r","mean_slip_pw = ones(1, mli.nwafer);\r","\r","for iw = 1:mli.nwafer\r","   field_results = [wafer_results(iw).ImageResultsList.elt.ExposureResultList.elt];\r","   exposed_fields = length(field_results);\r","   % Load correct fields in case of 2L exp and 1L readout\r","   if  exposed_fields > nfield\r","       field_selection = [options.layer_fields{1} options.edge_fields];\r","   else\r","       field_selection = 1:nfield;\r","   end\r","   \r","   mean_slip_pw(iw) = mean(str2double({field_results.SLIP}));\r","   \r","   % make sure the fields are sorted by exposuresequence number\r","   exp_seq = str2double({field_results.ExposureSequenceNumber});\r","   [~, sortid] = sort(exp_seq);\r","   field_results = field_results(sortid);\r","   \r","   for ifield = 1:nfield\r","       linear = field_results(field_selection(ifield)).WaferHeatingCorrections.OverlayParameters.LinearIntraFieldCorrections;\r","       hoc = field_results(field_selection(ifield)).WaferHeatingCorrections.OverlayParameters.HigherOrderIntraFieldCorrections;\r","       \r","       kfactors.K1  = str2double(linear.Translation.X) * NM; \r","       kfactors.K2  = str2double(linear.Translation.Y) * NM;\r","       kfactors.ms  = str2double(linear.Magnification) * PPM;\r","       kfactors.ma  = str2double(linear.AsymMagnification) * PPM;\r","       kfactors.rs  = str2double(linear.Rotation) * URAD;\r","       kfactors.ra  = str2double(linear.AsymRotation) * URAD;\r","       \r","       kfactors.K7  = str2double(hoc.SecondOrderMagnification.X) * NM_CM2;\r","       kfactors.K8  = str2double(hoc.SecondOrderMagnification.Y) * NM_CM2;    \r","       kfactors.K9  = str2double(hoc.Trapezoid.X) * NM_CM2;\r","       kfactors.K10 = str2double(hoc.Trapezoid.Y) * NM_CM2;\r","       kfactors.K11 = str2double(hoc.Bow.X) * NM_CM2;\r","       kfactors.K12 = str2double(hoc.Bow.Y) * NM_CM2;\r","       \r","       kfactors.K14 = str2double(hoc.ThirdOrderMagnification.Y) * NM_CM3;\r","       kfactors.K15 = str2double(hoc.Accordion.X) * NM_CM3;\r","       kfactors.K16 = str2double(hoc.Accordion.Y) * NM_CM3;\r","       kfactors.K17 = str2double(hoc.CShapeDistortion.X) * NM_CM3;\r","       kfactors.K18 = str2double(hoc.CShapeDistortion.Y) * NM_CM3;\r","       kfactors.K19 = str2double(hoc.ThirdOrderFlow.X) * NM_CM3;\r","       \r","       ml.info.report_data.WH_K_factors.wafer(iw).field(ifield) = kfactors;\r","   end\r","   assertEqual(length(ml.info.report_data.WH_K_factors.wafer(iw).field), nfield)\r","   \r","   if isfield(wafer_results(iw).ImageResultsList.elt,'IR2EUVRatioScalingSensitivity') \r","      totalsensitivity = totalsensitivity + str2double(wafer_results(iw).ImageResultsList.elt.IR2EUVRatioScalingSensitivity);\r","   end\r","end\r","\r","ml.info.report_data.IR2EUVsensitivity = totalsensitivity / ml.nwafer;\r","ml.info.report_data.Rir2euv = str2double(whc.Input.LotSettings.WaferHeatingCorrections.IR2EUVRatio);\r","ml.info.report_data.r =  str2double(whc.Input.LotSettings.WaferHeatingCorrections.WaferIRReflectance);\r","ml.info.report_data.t =  str2double(whc.Input.LotSettings.WaferHeatingCorrections.WaferIRTransmittance);\r","ml.info.report_data.Pdgl = str2double(whc.Input.LotSettings.WaferHeatingCorrections.DGLPower);\r","ml.info.report_data.SLIP = mean(mean_slip_pw);\r",""],"CoverageData":{"CoveredLineNumbers":[25,26,27,28,29,30,32,34,39,42,43,45,47,49,50,53,55,56,57,59,60,61,62,65,68,69,70,72,73,74,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,97,99,101,102,106,107,108,109,110,111],"UnhitLineNumbers":[35,48],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,0,4,0,4,0,0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,0,0,4,0,4,14,14,0,14,10,4,4,0,0,14,0,0,14,14,14,0,14,1402,1402,0,1402,1402,1402,1402,1402,1402,0,1402,1402,1402,1402,1402,1402,0,1402,1402,1402,1402,1402,1402,0,1402,0,14,0,14,12,0,0,0,4,4,4,4,4,4,0]}}