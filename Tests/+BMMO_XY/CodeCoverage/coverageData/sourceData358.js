var sourceData358 = {"FileContents":["classdef bmmo_InlineSdmModelDefault < bmmo_InlineSdmModel\r","    %% bmmo_InlineSdmModelDefault BMMO & BL3 NXE inline SDM model.\r","    %\r","    % This class calculates the KPIs correction & residuals of the inline\r","    % SDM model. For details on the model see the EDS (D000347979)\r","    %\r","    % bmmo_InlineSdmModelDefault Properties:\r","    %   mlDistoIn       - SBC ffp in ml format, on XPA positions\r","    %   mlWaferIn       - Wafers to apply inline SDM correction on\r","    %   lensModel       - bmmo_LensModel object\r","    %   hocModel        - bmmo_HocModel object\r","    %   report          - inline SDM report with KPIs & reported residuals\r","    %   mlChuckCorr     - inline SDM correction per chuck\r","    %   mlWaferResidual - Residual of mlWaferIn after inline SDM correction\r","    %                       applied\r","    %\r","    % bmmo_InlineSdmModelDefault Methods:\r","    %   calcReport    - Calculate inline SDM report \r","    %   calcActuation - Calculate inline SDM correction\r","    %   run           - Calculate inline SDM report & correction\r","    %\r","    % See also:\r","    %   bmmo_InlineSdmModel\r","    \r","    properties\r","        % SBC ffp in ml format, on XPA positions\r","        mlDistoIn = ovl_average_fields(ovl_create_dummy(...\r","            '13x19', 'nlayer', 1, 'nwafer', 2));\r","        % Wafers to apply inline SDM correction on\r","        mlWaferIn = bmmo_process_input(bmmo_default_input);\r","    end\r","    \r","    properties (SetAccess = private)\r","        mlChuckCorr % Correction per chuck\r","        mlWaferResidual % Residual of mlWaferIn\r","        report % KPIs & reported residuals\r","    end\r","    \r","    methods\r","        function obj = bmmo_InlineSdmModelDefault(configuration, ...\r","                mlDisto, mlWafer)\r","            % bmmo_InlineSdmModelDefault constructs object\r","            %\r","            % Usage\r","            %\r","            %   obj = bmmo_InlineSdmModelDefault(configuration)\r","            %       Constructs the object, the inputs mlDisto & mlWafer can\r","            %       be set at a later time\r","            %\r","            %   obj = bmmo_InlineSdmModelDefault(configuration, mlDisto)\r","            %       Constructs the object with the mlDisto input. The\r","            %       report can be immediately generated from the object.\r","            %\r","            %   obj = bmmo_InlineSdmModelDefault(configuration, mlDisto, mlWafer)\r","            %       Constructs the object with both inputs. The\r","            %       correction & report can then be immediately generated\r","            %       from the object.\r","            %\r","            % Inputs\r","            %\r","            %   configuration   bmmo_Configuration object\r","            %   mlDisto         ml structure with 2 wafers & 1 field per wafer\r","            %          SBC ffp in ml format\r","            %          Default: all-zeros\r","            %   mlWaferIn       valid ml structure\r","            %          Wafers to apply the inline SDM correction on\r","            %          Default: bmmo_process_input(bmmo_default_input)\r","            %\r","            % Outputs\r","            %\r","            %   obj    created object\r","            %\r","            \r","            obj@bmmo_InlineSdmModel(configuration);\r","            \r","            switch nargin\r","                case 3\r","                    obj.mlDistoIn = mlDisto;\r","                    obj.mlWaferIn = mlWafer;\r","                case 2\r","                    obj.mlDistoIn = mlDisto;\r","            end\r","        end\r","        \r","        function run(obj)\r","            % bmmo_InlineSdmModelDefault method run\r","            %\r","            % Usage\r","            %\r","            %   obj.run()\r","            %       Run the inline SDM model and populate all the\r","            %       properties with model outputs\r"," \r","            obj.calcActuation();\r","            obj.calcReport();\r","        end\r","        \r","        function calcActuation(obj)\r","            % bmmo_InlineSdmModelDefault method calcActuation\r","            %\r","            % Usage\r","            %\r","            %   obj.calcActuation()\r","            %       Calculates and populates mlChuckCorr & mlWaferResidual\r","            %       properties \r","\r","            obj.lensModel.calcActuation();\r","            obj.hocModel.calcActuation();\r","            obj.mlChuckCorr = ...\r","                ovl_add(obj.hocModel.actuationOutput.mlHocChuckCorr, obj.lensModel.mlWaferOut);\r","            obj.mlWaferResidual = ...\r","                ovl_add(obj.mlWaferIn, obj.mlChuckCorr);\r","        end\r","        \r","        function calcReport(obj)\r","            % bmmo_InlineSdmModelDefault method calcReport\r","            %\r","            % Usage\r","            %\r","            %   obj.calcReport()\r","            %       Calculates the inline SDM report structure\r","\r","            obj.lensModel.calcReport();\r","            obj.hocModel.calcReport();\r","            obj.report.lens = obj.lensModel.report;\r","            obj.report.hoc  = obj.hocModel.report;\r","            obj.report.res = ovl_add(obj.hocModel.report.mlHocRes, ...\r","                obj.lensModel.mlRes);\r","            obj.report.cor = ovl_add(obj.report.hoc.mlHocCorr, ...\r","                obj.lensModel.mlOut);\r","            \r","            for ic =  1:obj.report.cor.nwafer\r","                obj.report.Kpi.maxTotalCorr(ic).dx = ...\r","                    max((abs(obj.report.cor.layer.wr(ic).dx)));\r","                obj.report.Kpi.maxTotalCorr(ic).dy = ...\r","                    max((abs(obj.report.cor.layer.wr(ic).dy)));\r","                \r","                obj.report.Kpi.maxTotalRes(ic).dx = ...\r","                    max((abs(obj.report.res.layer.wr(ic).dx)));\r","                obj.report.Kpi.maxTotalRes(ic).dy = ...\r","                    max((abs(obj.report.res.layer.wr(ic).dy)));\r","\r","            end\r","        end\r","    end\r","    \r","    methods (Static)\r","        function ffp = mlToFfp(ml)\r","            for i=1:ml.nwafer\r","                ffp(i).x =  ml.wd.xf;\r","                ffp(i).y =  ml.wd.yf;\r","                ffp(i).dx = ml.layer.wr(i).dx ;\r","                ffp(i).dy = ml.layer.wr(i).dy ;\r","            end\r","        end\r","    end\r","    \r","    methods % setters/getters\r","        function set.mlDistoIn(obj, val)\r","            obj.mlDistoIn           = val;\r","            obj.hocModel.mlDistoIn  = val;\r","            obj.lensModel.mlIn      = ovl_average(val);\r","        end\r","        \r","        function set.mlWaferIn(obj, val)\r","            obj.mlWaferIn          = val;\r","            obj.hocModel.mlWaferIn = val;\r","            obj.lensModel.mlWaferIn = val;\r","        end\r","    end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[74,76,77,78,79,80,81,94,95,107,108,109,110,111,112,123,124,125,126,127,128,129,130,132,133,134,135,136,138,139,140,141,149,150,151,152,153,160,161,162,166,167,168],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}