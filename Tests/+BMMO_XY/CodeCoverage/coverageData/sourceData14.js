var sourceData14 = {"FileContents":["function [ml_apply, ml_res] = bmmo_KA_33par_fingerprint(ka_grid, ml_input, options)\r","% function [ml_apply, ml_res] = bmmo_KA_33par_fingerprint(ka_grid, ml_input, options)\r","%\r","% Given the modelled KA grid in testlog format, get the KA fingerprint\r","% using 33par\r","%\r","% Input:\r","%   ka_grid: BMMO KA grid with interpolants (see bmmo_ka_grid)\r","%   ml_input: input ml structure\r","%   options: structure containing at least the following field:\r","%       fieldsize: 1 * 2 array with x and y fieldsize\r","%\r","% Output:\r","%   ml_apply: KA fingerprint\r","%   ml_res : KA actuaiton residual\r","%\r","%  NOTE:\r","%  According to the BMMO-NXE EDS, ml_input.info.F does not contain 'field_shift_Cn'\r","%  which ovl_metro_add_chuck_info used to determine field shifts for chuck\r","%  n. In addition, callers of this function are not necessarily aware of the\r","%  chuck context. Therefore, per-chuck field shifts should be applied\r","%  outside this function if necessary.\r","\r","ml_out = ovl_create_dummy(ml_input, 'edge', options.wafer_radius_in_mm);\r","ml_apply = ml_out;\r","\r","ml_out.layer.wr.dx = ka_grid.interpolant_x(ml_out.wd.xw, ml_out.wd.yw);\r","ml_out.layer.wr.dy = ka_grid.interpolant_y(ml_out.wd.xw, ml_out.wd.yw);\r","\r","[~, par] = ovl_model(ml_out, options.CET33par.name, 'perfield');\r","par = bmmo_add_field_positions_to_parlist(par, ml_apply);\r","ml_apply = ovl_model(ml_apply, 'apply', par);\r","\r","ml_res = ovl_sub(ml_out, ml_apply);\r",""],"CoverageData":{"CoveredLineNumbers":[24,25,27,28,30,31,32,34],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,0,16,16,0,16,16,16,0,16,0]}}