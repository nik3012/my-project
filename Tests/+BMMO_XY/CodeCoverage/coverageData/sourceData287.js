var sourceData287 = {"FileContents":["classdef testBmmoGetDesignMatrix < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% 1 test with small wd, known output matrices\r","        function Case1(obj)\r","            % Given\r","            wd.xc = [-3 -3 -3 0 0 0 3 3 3]';        % make a small wd structure\r","            wd.xf = [-1 0 1 -1 0 1 -1 0 1]';\r","            wd.xw = wd.xc + wd.xf;\r","            wd.yc = wd.xc;\r","            wd.yf = wd.xf;\r","            wd.yw = wd.xw;\r","            wds = size(wd.xc);\r","            expected_matrix_x = [ones(wds), zeros(wds), -wd.yf, -wd.yf, wd.xf, wd.xf, -wd.yc, -wd.yc, wd.xc, wd.xc];        %start with 10par: tx, ty, rs, ra, ms, ma, rws, rwa, mws, mwa\r","            expected_matrix_y = [zeros(wds), ones(wds), wd.xf, -wd.xf, wd.yf, -wd.yf, wd.xc, -wd.xc, wd.yc, -wd.yc];\r","            expected_matrix = [expected_matrix_x ; expected_matrix_y];\r","            options.parlist = bmmo_parlist;\r","            \r","            % When\r","            outmat_x = bmmo_get_design_matrix(wd, options, 'xonly', 'tx', 'ty', 'rs', 'ra', 'ms', 'ma', 'rws', 'rwa', 'mws', 'mwa');\r","            outmat_y = bmmo_get_design_matrix(wd, options, 'yonly', 'tx', 'ty', 'rs', 'ra', 'ms', 'ma', 'rws', 'rwa', 'mws', 'mwa');\r","            outmat = bmmo_get_design_matrix(wd, options, 'tx', 'ty', 'rs', 'ra', 'ms', 'ma', 'rws', 'rwa', 'mws', 'mwa');\r","            outmat10p = bmmo_get_design_matrix(wd, options, '10par');\r","            options = rmfield(options, 'parlist');\r","            outmat10p_default = bmmo_get_design_matrix(wd, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_matrix_x, outmat_x);\r","            obj.verifyWithinTol(expected_matrix_y, outmat_y);\r","            obj.verifyWithinTol(expected_matrix, outmat);\r","            obj.verifyWithinTol(outmat, outmat10p);\r","            obj.verifyWithinTol(outmat, outmat10p_default);\r","        end\r","        \r","        %% 2 test 6par with dummy\r","        function Case2(obj)\r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer',6,'nlayer', 1);\r","            wds = size(mld.wd.xc);\r","            options.parlist = bmmo_parlist;            \r","            expected_6par_out = [ones(wds), zeros(wds), -mld.wd.yc, -mld.wd.yc, mld.wd.xc, mld.wd.xc; ...\r","                zeros(wds), ones(wds), mld.wd.xc, -mld.wd.xc, mld.wd.yc, -mld.wd.yc];\r","            \r","            % When\r","            outmat = bmmo_get_design_matrix(mld.wd, options, 'tx', 'ty', 'rws', 'rwa', 'mws', 'mwa');\r","            outmat6p = bmmo_get_design_matrix(mld.wd, options, '6par');\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_6par_out, outmat);\r","            obj.verifyWithinTol(outmat, outmat6p);\r","        end\r","        \r","        %% 3 test K-factors with dummy\r","        function Case3(obj)\r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer',6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;            \r","            x_f = mld.wd.xf;\r","            y_f = mld.wd.yf;          \r","            expected_out = zeros(length(mld.wd.yc), 10);                                                                                        % odd K-factors have no dy component\r","            \r","            % When\r","            outmat = bmmo_get_design_matrix(mld.wd, options, 'yonly', 'K1', 'K3', 'K5', 'K7', 'K9', 'K11', 'K13', 'K15', 'K17', 'K19');\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, outmat);            \r","            \r","            % When\r","            outmat = bmmo_get_design_matrix(mld.wd, options, 'xonly', 'K2', 'K4', 'K6', 'K8', 'K10', 'K12', 'K14', 'K16', 'K18', 'K20');        % even K-factors have no dx component\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, outmat);\r","            \r","            % Given\r","            expected_out =[ones(size(x_f)), x_f, y_f, x_f.^2, x_f.*y_f, y_f.^2, x_f.^3, x_f.^2.*y_f, x_f.*y_f.^2, y_f.^3];                      % odd K-factors dx\r","            \r","            % When\r","            outmat = bmmo_get_design_matrix(mld.wd, options, 'xonly', 'K1', 'K3', 'K5', 'K7', 'K9', 'K11', 'K13', 'K15', 'K17', 'K19');\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, outmat);         \r","            \r","            % Given\r","            expected_out =[ones(size(y_f)), y_f, x_f, y_f.^2, y_f.*x_f, x_f.^2, y_f.^3, y_f.^2.*x_f, y_f.*x_f.^2, x_f.^3];                      % even K-factors dy\r","            \r","            % When\r","            outmat = bmmo_get_design_matrix(mld.wd, options, 'yonly', 'K2', 'K4', 'K6', 'K8', 'K10', 'K12', 'K14', 'K16', 'K18', 'K20');\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, outmat);\r","        end\r","        \r","    end\r","    \r","end\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,29,30,31,32,33,39,40,41,42,43,46,47,50,51,57,58,59,60,61,64,67,70,73,76,79,82,85,88,91],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0]}}