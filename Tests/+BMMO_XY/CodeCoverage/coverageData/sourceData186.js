var sourceData186 = {"FileContents":["function results_out = bmmo_sub_model_WH(results_in, options)\r","% function results_out = bmmo_sub_model_WH(results_in, options)\r","%\r","% The WH sub-model\r","%\r","% Input:\r","%   results_in: structure containing intermediate models and results\r","%   This structure must at least contain the following fields:\r","%           ml_outlier_removed: input data with, if specified, outliers removed\r","%   options: options structure\r","%   This structure must at least contain the following fields:\r","%           IR2EUVsensitivity: (double) drdl value for WH calibration\r","%           WH.input_fp_per_chuck: input WH fingerprint averaged per chuck\r","%           chuck_usage.chuck_id_used: chuck ids used, in usage order\r","%\r","%   Output:\r","%   results_out: structure containing intermediate models and results\r","%       This function adds or modifies the following fields:\r","%           WH.residual: input, averaged per chuck after WH fingerprint removed\r","%           WH.FPS: raw fingerprints for WH combined model\r","%           WH.fit_coeffs: fit coefficients for each fingerprint\r","%           WH.fitted_fps: fitted fingerprints from WH combined model\r","%           WH.Calib_WH: IR2EUV ratio\r","%           WH.lambda: WH lambda value\r","%           WH.fp: fitted WHFP per chuck\r","%           WH.ml_7x7: input resampled to 7x7 (can be reused by SUSD model)\r","\r","FIRST_CHUCK = 1; % index of first chuck in options.chuck_usage_chuck_id_used\r","model = 'WH';\r","\r","% Initialise output\r","results_out = results_in;\r","mli = results_in.WH.input;\r","\r","% Switch WH fp for modelling into options\r","options.WH.input_fp_per_chuck = results_in.WH.model_fp;\r","\r","% Initialise combined model, resampled to 7x7\r","if ~isfield(results_out.WH, 'ml_7x7') | ~isfield(results_out.WH, 'FPS') % these fields may already have been initialised in the SUSD submodel\r","    [results_out.WH.ml_7x7, results_out.WH.FPS, C] = bmmo_setup_combined_model(mli, options, model);\r","end\r","\r","% Calculate WH and SUSD calibration using combined model\r","% [results_out.WH.Calib_WH, ~, results_out.WH.fitted_fps, ~, ...\r","%     results_out.WH.fit_coeffs, results_out.SUSD.Calib_SUSD, results_out.SUSD.fitted_fp]...\r","%     = bmmo_combined_model_WH_DD(results_out.WH.ml_7x7, results_out.WH.FPS, options, model);\r","\r","% Run the combined model\r","[fit_coeffs, fitted_fps] = bmmo_combined_model(results_out.WH.ml_7x7, results_out.WH.FPS, options, C);\r","\r","% gather the WH output\r","results_out.WH.fit_coeffs = [fit_coeffs.WH{:}];\r","results_out.WH.fitted_fps = fitted_fps.WH(1);\r","\r","results_out.WH.Calib_WH = options.IR2EUVsensitivity * results_out.WH.fit_coeffs(options.chuck_usage.chuck_id_used(1)); % this is the delta update\r","\r","ch = options.chuck_usage.chuck_id_used(FIRST_CHUCK);\r","results_out.WH.lambda = results_out.WH.fit_coeffs(ch);\r","\r","% Switch WH fp for residual into options\r","options.WH.input_fp_per_chuck = results_in.WH.res_fp;\r","\r","% remove full WH fingerprint from input ml structure\r","for ic = options.chuck_usage.chuck_id_used\r","    results_out.WH.fp(ic) = ovl_combine_linear(options.WH.input_fp_per_chuck(ic), results_out.WH.lambda);\r","    results_out.interfield_residual(ic) = ovl_sub(results_out.interfield_residual(ic),results_out.WH.fp(ic));\r","end\r","\r","results_out.WH.residual = results_out.interfield_residual;"],"CoverageData":{"CoveredLineNumbers":[28,29,32,33,36,39,40,49,52,53,55,57,58,61,64,65,66,69],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,78,0,0,78,78,0,0,78,0,0,78,78,0,0,0,0,0,0,0,0,78,0,0,78,78,0,78,0,78,78,0,0,78,0,0,78,150,150,0,0,78]}}