var sourceData732 = {"FileContents":["function isSame = bmmo_cmp_data(A, B, prec, varname, show_output)\r","% Compare two double-valued scalars, vectors, or matrices, A and B,\r","% according precision PREC, with variable name VARNAME and write to file\r","% identifier FID.\r","%\r","%\r","% Author     Martin Hammer (MHcu)\r","% Created    2014-01-08\r","%\r","% History\r","%   2014-01-08 Creation\r","%   2018-05-01 SBPR refactored, cleanup\r","%\r","% Copyright (C) ASML Holding N.V., 2014\r","% ASML Confidential\r","\r","% handle double/single and logicals differently\r","str = {'NOK', 'OK'};\r","isSame = true;\r","\r","if ~isequal(class(A), class(B))\r","    isSame = false;\r","    bmmo_fprintf(show_output, '%3s : (%-7s) ( %-18s )  %s\\n', 'NOK', '', 'type mismatch', varname);\r","    \r","elseif isa(A, 'function_handle') && isa(B, 'function_handle')\r","\r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', '--', '', 'not compared', varname);\r","    \r","elseif isobject(A) && isobject(B)\r","    isSame = isequal(A, B);\r","    type_A = class(A);\r","    if length(type_A) >= 8\r","        type_A = type_A(1:8);\r","        type_A(7:8) = '..';\r","    end\r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-8s; %-8s )  %s\\n', str{isSame+1}, 'cmp obj', type_A, type_A, varname);\r","   \r","elseif xor(isempty(A),isempty(B)) % empty field present in either A or B\r","\r","    isSame = false;\r","    if isempty(A)\r","        bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', '<-- empty field', varname);\r","    else\r","        bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', 'empty field -->', varname);\r","    end\r","    \r","elseif isempty(A) && isempty(B)\r","\r","    isSame = true;    \r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'OK', '', 'both empty fields', varname);\r","\r","elseif ischar(A) && ischar(B) % compare strings\r","\r","    isSame = strcmp(A,'*') || strcmp(B,'*') || strcmp(A, B);\r","    if strcmp(A,'*')\r","        strA = '*';\r","    else\r","        strA = sprintf('%2d chars',numel(A));\r","    end\r","    if strcmp(B,'*')\r","        strB = '*';\r","    else\r","        strB = sprintf('%2d chars',numel(B));\r","    end\r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %s; %s )  %s\\n', str{isSame+1}, '', strA, strB, varname);\r","\r","elseif numel(A) ~= numel(B) % variables not of same size\r","\r","    isSame = false;\r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', '', 'diff. size', varname);\r","    \r","\r","elseif all([sum(isnan(A(:))) sum(isnan(B(:)))]==numel(A)) % variables of same size and all NaNs\r","    \r","    isSame = true;\r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) (%-9s; %-9s)  %s\\n', 'OK', 'same', 'all NaNs', 'all NaNs', varname);\r","    \r","elseif (isa(A,'double') && isa(B,'double')) || (isa(A,'single') && isa(B,'single')) % double- or single-precision\r","    \r","    if any(xor(isnan(A(:)),isnan(B(:)))) % if either is NaN, but other not\r","        isSame = false;\r","        bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', 'NOK', 'NaN', '', varname);\r","        \r","    else\r","        [diffAB,ind] = max( abs(A(:) - B(:)) ); % max of all dims (max ignores NaNs)\r","        isSame = diffAB < prec;\r","        if show_output\r","            diffAB = diffAB * sign(A(ind)-B(ind));\r","            sub_print_vec(show_output, A, B, diffAB, str{isSame+1}, varname);\r","        end\r","    end\r","    \r","elseif (isa(A,'logical')&&isa(B,'logical')) % binary data\r","    \r","    diffAB = all(~xor(A(:),B(:))); % all entries identical\r","    isSame = diffAB;\r","    sub_print_vec(show_output, A, B, diffAB, str{isSame+1}, varname);\r","    \r","else\r","    bmmo_fprintf(show_output, '%3s : ( %-7s ) ( %-18s )  %s\\n', '--', '', 'not compared', varname);\r","end\r","\r","\r","function sub_print_vec(show_output, A, B, diffAB, str, varname)\r","\r","if numel(A)>1 % is matrix\r","    str_dims = sprintf('%dx', size(A)); % string of matrix dimensions\r","    bmmo_fprintf(show_output, '%3s : (%+8.2e) ( %-18s )  %s\\n', str, diffAB, str_dims(1:end-1), varname);\r","else % is scalar\r","    bmmo_fprintf(show_output, '%3s : (%+8.2e) (%+8.2e; %+8.2e)  %s\\n', str, diffAB, A, B, varname);\r","end\r","    \r","\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[18,19,21,22,23,25,27,29,30,31,32,33,34,36,38,40,41,42,43,44,47,49,50,52,54,55,56,57,58,60,61,62,63,65,67,69,70,73,75,76,78,80,81,82,84,85,86,87,88,89,93,95,96,97,99,100,106,107,108,109,110],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}