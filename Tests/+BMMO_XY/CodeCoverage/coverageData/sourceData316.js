var sourceData316 = {"FileContents":["classdef testBmmoOrganiseModelResults < BMMO_XY.tools.testSuite\r","    \r","    methods(Static)\r","        \r","        %% Sub Functions\r","        function out = sub_set_configurations(in, options)            \r","            out = in;\r","            out.corr.Configurations.KA_start_x  = options.KA_start;\r","            out.corr.Configurations.KA_start_y  = options.KA_start;\r","            out.corr.Configurations.KA_steps_x  = options.KA_length;\r","            out.corr.Configurations.KA_steps_y  = options.KA_length;\r","            out.corr.Configurations.KA_pitch_x  = options.KA_pitch;\r","            out.corr.Configurations.KA_pitch_y  = options.KA_pitch;\r","            out.corr.Configurations.MI_start    = options.map_param.start_position;\r","            out.corr.Configurations.MI_steps    = options.map_table_length;\r","            out.corr.Configurations.MI_pitch    = options.map_param.pitch;\r","        end\r","        \r","        function out = sub_get_nonzero_output(out_zero, options, wh, mi, ka, bao, intraf, susd)            \r","            out = out_zero;                 % fill in structure with nonzero values\r","            fn = fieldnames(out.corr.BAO);\r","            out.corr.IR2EUV = 1 * wh;\r","            for ic = 1:2\r","                out.corr.MI.wse(ic).x_mirr.dx =  out.corr.MI.wse(ic).x_mirr.dx + (1e-9 * mi);\r","                out.corr.MI.wse(ic).y_mirr.dy =  out.corr.MI.wse(ic).y_mirr.dy + (1e-9 * mi);\r","                out.corr.KA.grid_2de(ic).dx = out.corr.KA.grid_2de(ic).dx + (1e-9 * ka);\r","                out.corr.KA.grid_2de(ic).dy = out.corr.KA.grid_2de(ic).dy + (1e-9 * ka);\r","                out.corr.ffp(ic).dx = out.corr.ffp(ic).dx + (1e-9 * intraf);\r","                out.corr.ffp(ic).dy = out.corr.ffp(ic).dy + (1e-9 * intraf);\r","                for ifield = 1:length(fn)\r","                    out.corr.BAO(ic).(fn{ifield}) = out.corr.BAO(ic).(fn{ifield}) + (1e-9 * bao);\r","                end\r","            end\r","            for ic_sd = 1:4\r","                out.corr.SUSD(ic_sd).TranslationY = 1e-9*susd*(-1)^ic_sd;\r","            end            \r","            for ic = 1:2\r","                if options.invert_MI_wsm_sign\r","                    out.corr.MI.wsm(ic).x_mirr.dx = -1 * out.corr.MI.wse(ic).x_mirr.dx;\r","                    out.corr.MI.wsm(ic).y_mirr.dy = -1 * out.corr.MI.wse(ic).y_mirr.dy;\r","                else\r","                    out.corr.MI.wsm      =      out.corr.MI.wse;\r","                end\r","            end            \r","            out.corr.ffp = bmmo_model_10par_ffp(out.corr.ffp, options);\r","        end\r","        \r","        function filter = sub_get_filter(wh, mi, ka, bao, intraf, susd)\r","            \r","            filter.WH = 1 * wh;\r","            filter.MI = 1 * mi;\r","            filter.KA = 1 * ka;\r","            filter.BAO = 1 * bao;\r","            filter.INTRAF = 1 * intraf;\r","            filter.SUSD = 1 * susd;\r","        end\r","        \r","        function model_results = sub_get_model_results(ml, options, wh, mi, ka, bao, intraf, susd)\r","            \r","            model_results = bmmo_default_model_result(ml, options);\r","            \r","            out = bmmo_default_output_structure(options);\r","            defaultBAO = out.corr.BAO(1);\r","            baofields = fieldnames(defaultBAO);\r","            for ibao = 1:length(baofields)\r","                defaultBAO.(baofields{ibao}) = defaultBAO.(baofields{ibao}) + (1e-9 * bao);\r","            end\r","            parlist = bmmo_BAO_to_10par(defaultBAO);\r","            model_results.WH.Calib_WH = wh;         % Generate example model results\r","            \r","            fn = fieldnames(model_results.BAO.correction(1));\r","            for ic = 1:2\r","                model_results.MI.Calib_MI(ic).x_mirr.dx = model_results.MI.Calib_MI(ic).x_mirr.dx + (1e-9 * mi);\r","                model_results.MI.Calib_MI(ic).y_mirr.dy = model_results.MI.Calib_MI(ic).y_mirr.dy + (1e-9 * mi);\r","                model_results.KA.Calib_KA(ic).dx = model_results.KA.Calib_KA(ic).dx + (1e-9 * ka);\r","                model_results.KA.Calib_KA(ic).dy = model_results.KA.Calib_KA(ic).dy + (1e-9 * ka);\r","                model_results.INTRAF.Calib_intra(ic).layer.wr.dx = model_results.INTRAF.Calib_intra(ic).layer.wr.dx + (1e-9 * intraf);\r","                model_results.INTRAF.Calib_intra(ic).layer.wr.dy = model_results.INTRAF.Calib_intra(ic).layer.wr.dy + (1e-9 * intraf);\r","                for ibao = 1:length(fn)\r","                    model_results.BAO.correction(ic).(fn{ibao}) = parlist.(fn{ibao});\r","                end\r","                model_results.SUSD.Calib_SUSD(ic) = model_results.SUSD.Calib_SUSD(ic) + (1e-9 * susd);\r","                model_results.MI.Calib_MI_wsm(ic) = model_results.MI.Calib_MI(ic);\r","                if options.invert_MI_wsm_sign\r","                    model_results.MI.Calib_MI_wsm(ic).x_mirr.dx = -1 * model_results.MI.Calib_MI(ic).x_mirr.dx;\r","                    model_results.MI.Calib_MI_wsm(ic).y_mirr.dy = -1 * model_results.MI.Calib_MI(ic).y_mirr.dy;\r","                end\r","            end\r","        end\r","        \r","    end\r","    \r","    methods(TestClassSetup)\r","        \r","        %% Test Setup\r","        function setup(obj)\r","            ml = bmmo_default_input;\r","            ml = bmmo_turn_off_l2(ml);\r","            corr = bmmo_default_output_structure(bmmo_default_options_structure);\r","            ml.info.previous_correction = corr.corr;\r","            ml.configurable_options.mark_type = 'udbo';\r","            ml.configurable_options.layer_fields = { 1:89 };\r","            mli = bmmo_phase_2_input(ml);\r","            [obj.setup_data.mli, obj.setup_data.options] = bmmo_process_input(mli);\r","        end\r","        \r","    end\r","    \r","    properties\r","        \r","        setup_data\r","    \r","    end\r","    \r","    methods(Test)\r","        \r","        %% case 1: all-zero previous correction and all-zero results\r","        function Case1(obj)\r","            % Given\r","            mli = obj.setup_data.mli;\r","            options = obj.setup_data.options;            \r","            out = bmmo_default_output_structure(options);\r","            out = obj.sub_set_configurations(out, options);\r","            options.previous_correction = out.corr;            \r","            model_results = bmmo_default_model_result(mli, options); \r","            \r","            % When\r","            test_out = bmmo_organize_model_results(model_results,options);\r","            test_out.corr = bmmo_KA_remove_interpolants(test_out.corr);\r","            \r","            % Then\r","            obj.verifyWithinTol(out, test_out);\r","        end\r","        \r","        %% case 2: nonzero previous correction and all-zero results. Also checks if previous SUSD and KA is neutralized when disabled\r","        function Case2(obj)\r","            % Given\r","            mli = obj.setup_data.mli;\r","            options = obj.setup_data.options;            \r","            out = bmmo_default_output_structure(options);            \r","            out = obj.sub_get_nonzero_output(out, options, 1, 2, 0, -1, 3, 0);            \r","            options.previous_correction = out.corr;\r","            model_results = bmmo_default_model_result(mli, options);            \r","            test_out = bmmo_organize_model_results(model_results,options);\r","            \r","            % When\r","            out.corr.Configurations = test_out.corr.Configurations;\r","            test_out.corr = bmmo_KA_remove_interpolants(test_out.corr);\r","            \r","            % Then\r","            obj.verifyWithinTol(out, test_out);\r","        end\r","        \r","        %% case 3: all-zero previous correction and non-zero results, unitary time filter scaling\r","        function Case3(obj)\r","            % Given\r","            mli = obj.setup_data.mli;\r","            options = obj.setup_data.options;\r","            options.susd_control = 1;            \r","            tmp_out = bmmo_default_output_structure(options);\r","            options.previous_correction = tmp_out.corr;\r","            options.filter_coefficients = obj.sub_get_filter(1,1,1,1,1,1);            \r","            out = obj.sub_get_nonzero_output(tmp_out, options, 1, 1, 1, 1, 1, 1);           % Generate expected output\r","            model_results = obj.sub_get_model_results(mli, options, -1,-1,-1,-1,-1,-1);     % generate example model results            \r","            test_out = bmmo_organize_model_results(model_results,options);\r","            \r","            % When\r","            out.corr.Configurations = test_out.corr.Configurations;\r","            test_out.corr = bmmo_KA_remove_interpolants(test_out.corr);\r","            \r","            % Then\r","            obj.verifyWithinTol(out, test_out);\r","        end\r","        \r","        %% case 4: all-zero previous correction and non-zero results, varied time filter scaling\r","        function Case4(obj)\r","            % Given\r","            mli = obj.setup_data.mli;\r","            options = obj.setup_data.options;\r","            options.susd_control = 1;            \r","            out = bmmo_default_output_structure(options);\r","            options.previous_correction = out.corr;\r","            options.filter.coefficients = obj.sub_get_filter(6,5,4,2,3,7);                  % scale the different results            \r","            out = obj.sub_get_nonzero_output(out, options, 6,5,4,2,3,7);\r","            model_results = obj.sub_get_model_results(mli, options, -1,-1,-1,-1,-1,-1);     % Generate example model results            \r","            test_out = bmmo_organize_model_results(model_results,options);\r","            % When\r","            out.corr.Configurations = test_out.corr.Configurations;\r","            test_out.corr = bmmo_KA_remove_interpolants(test_out.corr);\r","            \r","            % Then\r","            obj.verifyWithinTol(out, test_out);\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[7,8,9,10,11,12,13,14,15,16,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,38,39,40,45,50,51,52,53,54,55,60,62,63,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,97,98,99,100,101,102,103,104,120,121,122,123,124,125,128,129,132,138,139,140,141,142,143,144,147,148,151,157,158,159,160,161,162,163,164,165,168,169,172,178,179,180,181,182,183,184,185,186,188,189,192],"UnhitLineNumbers":[41,42],"HitCount":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,3,3,3,3,6,6,6,6,6,6,6,60,0,0,3,12,0,3,6,6,6,0,0,0,0,3,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,0,2,2,2,2,20,0,2,2,0,2,2,4,4,4,4,4,4,4,40,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0]}}