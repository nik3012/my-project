var sourceData554 = {"FileContents":["\r","% Create Job control file for recover/control job\r","%\r","%   input\r","%       path: path of the folder with ADELler, ADELmetrology and Job\r","%       control template\r","%\r","%   Optional input\r","%     job_type = 1, Recover to baseline (default)\r","%     job_type = 2, Control to baseline\r","%\r","%   output\r","%     Updated Job control file with same name and path as the input\r","%     Conditional output: Updated ADELler with wafer Ids if not already present\r","\r","\r","\r","\r","function adel_jbctrl =  bmmo_create_job_control(path, time_filter)\r","\r","if nargin < 2\r","    time_filter = 0;\r","end\r","\r","if nargin < 1\r","    path = pwd;\r","end\r","\r","% Find necessary ADELs\r","adels_to_find = {'ADELmetrology', 'ADELler','ADELbmmoOverlayJobControl'};\r","adel_fields = {'adelmet', 'adeller', 'jbctrl'};\r","adels = bmmo_find_adels(path, adels_to_find, adel_fields);\r","\r","% load xml files\r","adel_met = xml_load(adels.adelmet);\r","adel_adeller = xml_load(adels.adeller);\r","adel_jbctrl = xml_load(adels.jbctrl);\r","\r","% get WEC ids from adelmetrology\r","ml_all     = bmmo_process_adelmetrology(adels.adelmet);\r","wid_id     =  strcmp({ml_all.targetlabel}, 'WID_UP');\r","wids = bmmo_get_wid(ml_all(wid_id));\r","\r","% update exposure context equipment and lot id\r","adel_jbctrl.Job.ExposureContext.EquipmentId  = adel_adeller.Header.MachineID;\r","adel_jbctrl.Job.ExposureContext.LotId        = adel_adeller.Input.LotId;\r","% update metology context equipment and lot id\r","adel_jbctrl.Job.MetrologyContext.EquipmentId =  adel_met.Header.MachineID;\r","adel_jbctrl.Job.MetrologyContext.LotId       =  adel_met.Input.LotId;\r","rand_uid = erase(num2str(floor(clock)), ' ');\r","max_length = min(length(rand_uid), 8);\r","adel_jbctrl.Header.DocumentId(1:max_length) = rand_uid(end-max_length+1:end);\r","\r","% Update type of job\r","if time_filter\r","    adel_jbctrl.Job.ControlMode = 'Control to baseline';\r","else\r","    adel_jbctrl.Job.ControlMode = 'Recover to baseline';\r","end\r","\r","% check if Wafer ids are present in ADELLer or else create them\r","if isempty(adel_adeller.Results.WaferResultList(1).elt.WaferId)\r","    warning('No Wafer Ids found in ADELler, creating default Ids to 1,2,3..');\r","    for ii = 1:length(adel_adeller.Results.WaferResultList)\r","        adel_adeller.Results.WaferResultList(ii).elt.WaferId = num2str(ii);\r","    end\r","    \r","    % create new ADELler\r","    recipe_version = adel_adeller.Header.DocumentTypeVersion;\r","    str1='xmlns:ADELler=\"http://www.asml.com/XMLSchema/MT/Generic/ADELler/vx.x.x\"';\r","    str2='xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"';\r","    str3='xsi:schemaLocation=\"http://www.asml.com/XMLSchema/MT/Generic/ADELler/vx.x.x ADELler.xsd\"';\r","    schema_info =compose(str1+\"\\n\"+str2+\"\\n\"+str3);\r","    schema_info = strrep(schema_info, 'vx.x.x', recipe_version);\r","    bmmo_xml_save(adels.adeller, adel_adeller, 'ADELler:Report', schema_info);\r","end\r","\r","% copy ADEller, ADELmetrology and WEC wafer Ids to Job control\r","nwafer = length(adel_met.Results.WaferResultList); % number of readout wafers\r","for i = 1:nwafer\r","    adel_jbctrl.Job.WaferContextList(i).WaferContext.ExposureContext.WaferId = adel_adeller.Results.WaferResultList(i).elt.WaferId;\r","    adel_jbctrl.Job.WaferContextList(i).WaferContext.MetrologyContext.WaferId = adel_met.Results.WaferResultList(i).WaferResult.WaferId;\r","    adel_jbctrl.Job.WaferContextList(i).WaferContext.WaferErrorCorrection.SubstrateWaferId = wids{i};\r","end\r","\r","% create Job control xml\r","recipe_version = adel_jbctrl.Header.DocumentTypeVersion;\r","str1='xmlns:ADELbmmoOverlayJobControl=\"http://www.asml.com/XMLSchema/MT/Generic/ADELbmmoOverlayJobControl/vx.x\"';\r","str2='xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"';\r","str3='xsi:schemaLocation=\"http://www.asml.com/XMLSchema/MT/Generic/ADELbmmoOverlayJobControl/vx.x ADELbmmoOverlayJobControl_vx.x.xsd\"';\r","schema_info =compose(str1+\"\\n\"+str2+\"\\n\"+str3);\r","schema_info = strrep(schema_info, 'vx.x', recipe_version);\r","bmmo_xml_save(adels.jbctrl, adel_jbctrl, ['ADELbmmoOverlayJobControl:JobControl' newline], schema_info);\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[21,22,25,26,30,31,32,35,36,37,40,41,42,45,46,48,49,50,51,52,55,56,57,58,62,63,64,65,69,70,71,72,73,74,75,79,80,81,82,83,87,88,89,90,91,92,93],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}