var sourceData281 = {"FileContents":["classdef testBmmoGaussInterp2 < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% First test: interpolate 8x8 grid to 4x4 with gridsize 2\r","        function Case1(obj)\r","            % Equally-spaced interpolation points as below\r","            % All interpolated values should be equal\r","            %\r","            %\r","            %      1     1     1     1     1     1     1     1\r","            %         .           .           .           .\r","            %      1     2     2     1     1     2     2     1\r","            %\r","            %      1     2     2     1     1     2     2     1\r","            %         .           .           .           .\r","            %      1     1     1     1     1     1     1     1\r","            %\r","            %      1     1     1     1     1     1     1     1\r","            %         .           .           .           .\r","            %      1     2     2     1     1     2     2     1\r","            %\r","            %      1     2     2     1     1     2     2     1\r","            %         .           .           .           .\r","            %      1     1     1     1     1     1     1     1\r","            % generate the 8x8 matrix of input values\r","            \r","            % Given\r","            inx = ones(4);\r","            inx(2:3, 2:3) = 2;\r","            inx = repmat(inx, 2, 2);\r","            [ingx, ingy] = meshgrid(1:8, 1:8);                  % generate the input meshgrid\r","            [ogx, ogy] = meshgrid(1.5:2:7.5, 1.5:2:7.5);        % generate the output meshgrid\r","            d = 2;\r","            \r","            % When\r","            [ovx, ovy] = bmmo_gauss_interp2(ingx, ingy, inx, inx, ogx, ogy, d);\r","            \r","            % Then\r","            obj.verifyTrue(all(all(ovx == ovy)));\r","            obj.verifyTrue(all(all(ovx > 1 & ovx < 2)));\r","            obj.verifyTrue(all(all(ovx == ovx(1))));\r","        end\r","        \r","        %% Second test: interpolate 7x7 grid to 3x3 with gridsize 1\r","        function Case2(obj)\r","            % Equally-spaced interpolation points (*) as below\r","            % All interpolated values should be equal to 1\r","            %      0     1      0     1      0     1      0\r","            %      1     1*     1     1*     1     1*     1\r","            %      0     1      0     1      0     1      0\r","            %      1     1*     1     1*     1     1*     1\r","            %      0     1      0     1      0     1      0\r","            %      1     1*     1     1*     1     1*     1\r","            %      0     1      0     1      0     1      0\r","            % generate the 7x7 grid\r","            \r","            % Given\r","            grid = ones(7);\r","            zindex1 = repmat([1 3 5 7]', 1, 4);\r","            zindex2 = repmat([0 14 28 42], 4, 1);\r","            zindex = zindex1 + zindex2;\r","            grid(zindex) = 0;\r","            [ingx, ingy] = meshgrid(1:7, 1:7);                  % generate the input meshgrid\r","            [ogx, ogy] = meshgrid([2 4 6], [2 4 6]);            % generate the output meshgrid\r","            d = 1;                                              % when d == 1, only the non-zero values are interpolated, and the output should be all 1    \r","            \r","            % When\r","            [ovx, ovy] = bmmo_gauss_interp2(ingx, ingy, grid, grid, ogx, ogy, d);\r","            expected_out = ones(3);\r","            \r","            % Then\r","            obj.verifyWithinTol(ovx, expected_out);\r","            obj.verifyWithinTol(ovy, expected_out);\r","            \r","            %%\r","            % Given\r","            d = 4;                                              % when d == 4, edge and corner values will be interpolated from relatively more zeros\r","            \r","            % When\r","            [ovx, ovy] = bmmo_gauss_interp2(ingx, ingy, grid, grid, ogx, ogy, d);\r","            \r","            % Then\r","            obj.verifyWithinTol(ovx, ovy);\r","            \r","            %%\r","            % When\r","            tolerance = 1e-15;                                  % there will be some rounding errors\r","            \r","            % Then\r","            obj.verifyWithinTol(ovx(1), ovx(3),  'tol', tolerance);    % Check that corner values are equal\r","            obj.verifyWithinTol(ovx(7) , ovx(9), 'tol', tolerance);\r","            obj.verifyWithinTol(ovx(1) , ovx(9), 'tol', tolerance);\r","            obj.verifyWithinTol(ovx(2) , ovx(8), 'tol', tolerance);    % Check that non-corner edge values are equal\r","            obj.verifyWithinTol(ovx(4) , ovx(6), 'tol', tolerance);\r","            obj.verifyWithinTol(ovx(2) , ovx(4), 'tol', tolerance);\r","            obj.verifyTrue(ovx(2) > ovx(1));                    % Check that edge values are greater than corner values\r","            obj.verifyTrue(ovx(5) > ovx(2));                    % Check that the centre value is greatest\r","            obj.verifyTrue(all(all(ovx > 0 & ovx < 1)));        % Check that all values are between 0 and 1\r","        end\r","        \r","    end\r","    \r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[29,30,31,32,33,34,37,40,41,42,59,60,61,62,63,64,65,66,69,70,73,74,78,81,84,88,91,92,93,94,95,96,97,98,99],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]}}