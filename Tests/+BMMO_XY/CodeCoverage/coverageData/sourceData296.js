var sourceData296 = {"FileContents":["classdef testBmmoInterp2Dxdydz < BMMO_XY.tools.testSuite\r","\r","    methods(Test)\r","        \r","        %% first testset: interpolate 8x8 input grid to 4x4\r","        function Case1(obj)            \r","            % Given\r","            ilsize = 8;                                             % make an input layout\r","            [ilayout.meshgrid.x, ilayout.meshgrid.y] = meshgrid(1:ilsize, 1:ilsize);\r","            ilayout.idx = 1:(ilsize*ilsize);\r","            ilayout.idx = reshape(ilayout.idx, [ilsize, ilsize]);\r","            olsize = 4;                                             % make an output layout\r","            olayout.n = olsize * olsize;\r","            [olayout.meshgrid.x, olayout.meshgrid.y] = meshgrid(1.5:2:7.5, 1.5:2:7.5);\r","            olayout.idx = 1:olayout.n;\r","            olayout.idx = reshape(olayout.idx, [olsize, olsize]);\r","            inx = ones(4);                                          % make an input mesh, % see illustration in test_bmmo_gauss_interp_r13\r","            inx(2:3, 2:3) = 2;\r","            inx = repmat(inx, 2, 2);\r","            input_mesh.dx = inx;\r","            input_mesh.dy = inx;            \r","            options.gauss_radius = 0.03;                            % make the options structure            \r","            options.interp_type = 'linear';\r","            \r","            % When\r","            [dx, dy] = bmmo_interp2_dxdydz(input_mesh, ilayout, olayout, options);      \r","            \r","            % Then\r","            obj.verifyTrue(isequal(dx, dy), 'isequal(dx, dy)');     % test the output\r","            \r","            %%\r","            % Given\r","            dxl = interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, input_mesh.dx, olayout.meshgrid.x, olayout.meshgrid.y, 'linear');\r","            linindex = (1:olayout.n)';\r","            \r","            % When\r","            dxl = dxl(linindex);\r","            \r","            % Then\r","            obj.verifyTrue(isequal(dx, dxl), 'isequal(dx, dxl)');\r","        end\r","        \r","        %% second testset: interpolate to non-square grid with zeros in layout index\r","        function Case2(obj)\r","            % Given\r","            % Input grid:\r","            %       1.5   3.5   5.5\r","            % 1      0     1     0\r","            % 2.5    1     2     1\r","            % 4      2     4     2\r","            % 5.5    1     2     1\r","            % 7      0     1     0\r","            xs = 1.5:2:5.5;\r","            ys = 1:1.5:7;\r","            [ilayout.meshgrid.x, ilayout.meshgrid.y] = meshgrid(xs, ys);\r","            inx = ones(size(ilayout.meshgrid.x));\r","            inx(1,:) = [0,1,0];\r","            inx(2,:) = [1,2,1];\r","            inx(3,:) = [2,4,2];\r","            inx(4,:) = [1,2,1];\r","            inx(5,:) = [0,1,0];\r","            input_mesh.dx = inx;\r","            input_mesh.dy = inx;\r","            % Output map:\r","            %    1   2   3   4   5   6\r","            % 1  .   .   5  13   .   .\r","            % 2  .   .   6  14   .   .\r","            % 3  .   .   7  15   .   .\r","            % 4  1   3   8  16  21  23\r","            % 5  2   4   9  17  22  24\r","            % 6  .   .  10  18   .   .\r","            % 7  .   .  11  19   .   .\r","            % 8  .   .  12  20   .   .\r","            olayout.n = 24;\r","            [olayout.meshgrid.x, olayout.meshgrid.y] = meshgrid(1:6, 1:8);\r","            olayout.idx = zeros(size(olayout.meshgrid.x));\r","            olayout.idx(4,:) = [1 3 8 16 21 23];\r","            olayout.idx(5,:) = [2 4 9 17 22 24];\r","            olayout.idx(:,3) = (5:12)';\r","            olayout.idx(:,4) = (13:20)';            \r","            options.gauss_radius = 0.03;                                            % make the options structure\r","            options.interp_type = 'linear';\r","            \r","            % When\r","            [dx, dy] = bmmo_interp2_dxdydz(input_mesh, ilayout, olayout, options);            \r","            \r","            % Then\r","            obj.verifyTrue(length(dx) == olayout.n, 'length(dx) == olayout.n');     % check that the output is the right length            \r","           \r","            %%\r","            % Given\r","            tmpidx = olayout.idx;                                                   % make a 6*8 grid of the output, compare with the output of interp2\r","            tlidx = olayout.idx > 0;\r","            tmpidx(~tlidx) = 1;\r","            dxtmp = dx(tmpidx);\r","            dxtmp(~tlidx) = NaN;            \r","            \r","            % When\r","            dxo = interp2(ilayout.meshgrid.x, ilayout.meshgrid.y, input_mesh.dx, olayout.meshgrid.x, olayout.meshgrid.y, 'linear');\r","            \r","            % Then\r","            obj.verifyTrue(isequalwithequalnans(dxo(tlidx), dxtmp(tlidx)), 'isequalwithequalnans(dxo(tlidx), dxtmp(tlidx))')\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,29,33,34,37,40,53,54,55,56,57,58,59,60,61,62,63,74,75,76,77,78,79,80,81,82,85,88,92,93,94,95,96,99,102],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0]}}