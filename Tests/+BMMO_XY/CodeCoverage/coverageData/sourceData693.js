var sourceData693 = {"FileContents":["function test_suite = test_bmmo_parse_configurable_options\r","\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","\r","\r","function test_empty_co_structure\r","\r","options = bmmo_default_options_structure;\r","options = rmfield(options, 'submodels'); % bmmo_assert_equal has problems with fn handles\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","fake_options = struct;\r","\r","options_out = bmmo_parse_configurable_options(options, fake_options);\r","\r","bmmo_assert_equal(options, options_out);\r","\r","\r","function test_empty_options_structure\r","\r","options = bmmo_default_options_structure;\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","options = rmfield(options, 'submodels');\r","\r","bad_options = struct;\r","bad_options.invalidfield1 = 'invalid_string';\r","bad_options.invalidarray = [3.4 5.6 7.8];\r","bad_options.badfield.data = {'data1', 'data2', 0.0123, 7};\r","bad_options.map_param.invalid = 50;\r","\r","options_out = bmmo_parse_configurable_options(options, bad_options);\r","\r","bmmo_assert_equal(options, options_out);\r","\r","\r","function test_intersecting_fields\r","\r","options = bmmo_default_options_structure;\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","options = rmfield(options, 'submodels');\r","\r","% some valid values\r","ok_options.KA_orders = [2 3 4];\r","ok_options.fid_intrafield = [30 31 32 33 60 61 62 63];\r","ok_options.map_param.pitch = 2e-3;\r","\r","% some invalid values\r","ok_options.map_param.invalid = 50;\r","ok_options.unread = 'unread';\r","ok_options.KA_invalid_corr = [4 5 1 43];\r","ok_options.KA_resample_options = 17;\r","\r","options_out = bmmo_parse_configurable_options(options, ok_options);\r","\r","expected_options = options;\r","expected_options.KA_orders = [2 3 4];\r","expected_options.fid_intrafield = [30 31 32 33 60 61 62 63];\r","expected_options.map_param.pitch = 2e-3;\r","\r","bmmo_assert_equal(options_out, expected_options);\r","\r","\r","function test_intersecting_sub_fields\r","\r","options = bmmo_default_options_structure;\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","options = rmfield(options, 'submodels');\r","\r","bad_options = struct;\r","bad_options.map_param.invalid = 50;\r","bad_options.xty_spline_params.nr_sgements = 17; % deliberate typo\r","bad_options.ytx_spline_params.delta = 1e4;\r","bad_options.KA_resample_options.unneeded = 'none';\r","\r","options_out = bmmo_parse_configurable_options(options, bad_options);\r","\r","bmmo_assert_equal(options, options_out);\r","\r","\r","function test_intersecting_conflicting_data\r","\r","options = bmmo_default_options_structure;\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","options = rmfield(options, 'submodels'); % bmmo_assert_equal has problems with fn handles\r","\r","bad_options = struct;\r","bad_options.map_param = 50;\r","bad_options.xty_spline_params.nr_segments.top = 17; \r","\r","options_out = bmmo_parse_configurable_options(options, bad_options);\r","\r","bmmo_assert_equal(options, options_out);\r","\r","\r","function test_intersecting_sub_field_mixed_data\r","\r","options = bmmo_default_options_structure;\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","options = rmfield(options, 'submodels'); % bmmo_assert_equal has problems with fn handles\r","\r","% some valid values\r","ok_options.map_param.pitch = 2e-3;\r","\r","% some invalid values\r","ok_options.map_param.invalid = 50;\r","ok_options.unread = 'unread';\r","ok_options.KA_invalid_corr = [4 5 1 43];\r","\r","options_out = bmmo_parse_configurable_options(options, ok_options);\r","\r","expected_options = options;\r","expected_options.map_param.pitch = 2e-3;\r","\r","bmmo_assert_equal(options_out, expected_options);\r","\r","\r","function test_both_structures_equal\r","\r","options = bmmo_default_options_structure;\r","if isfield(options, 'parlist')\r","    options = rmfield(options, 'parlist');\r","end\r","options = rmfield(options, 'submodels'); % bmmo_assert_equal has problems with fn handles\r","\r","\r","options_new = options;\r","\r","options_out = bmmo_parse_configurable_options(options, options_new);\r","\r","bmmo_assert_equal(options, options_out);\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[3,4,5,6,7,13,14,15,16,18,20,22,27,28,29,31,33,34,35,36,37,39,41,46,47,48,50,53,54,55,58,59,60,61,63,65,66,67,68,70,75,76,77,79,81,82,83,84,85,87,89,94,95,96,98,100,101,102,104,106,111,112,113,115,118,121,122,123,125,127,128,130,135,136,137,139,142,144,146],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}