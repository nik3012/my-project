var sourceData286 = {"FileContents":["classdef testBmmoGetCmOptions < BMMO_XY.tools.testSuite\r","\r","    methods(Test)\r","        \r","        %% 1. \r","        function Case1(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            options = bmmo_set_model_configuration(options);\r","            cm = bmmo_get_cm_options(options);\r","            f = fieldnames(cm);\r","            \r","            % When\r","            for icms = 1:length(f)\r","                cm_fpts = fieldnames(cm.(f{icms}))';                \r","                \r","                % Then\r","                obj.verifyTrue(all(isequal(cm_fpts, options.combined_model_contents.(f{icms}))));       % Check that all the elements (and only the elements) in \r","                                                                                                        % options.combined_model_contents are represented\r","                % When\r","                for ifield = 1:length(cm_fpts)\r","                    fname = cm_fpts{ifield};\r","                    f_info = functions(cm.(f{icms}).(fname).fnhandle);\r","                    \r","                    % Then\r","                    obj.verifyTrue(isstruct(f_info));                                                   % check that the fn handle actually is a function\r","                    obj.verifyTrue(ischar(f_info.function));\r","                    obj.verifyTrue(ischar(f_info.type));\r","                    obj.verifyTrue(ischar(f_info.file));\r","                    obj.verifyTrue(cm.(f{icms}).(fname).length > 0);                                    % check that the length is positive\r","                end\r","            end\r","        end\r","        \r","        %% 2. test with empty combined model contents structure\r","        function Case2(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            options = bmmo_set_model_configuration(options);            \r","            cms = fieldnames(options.combined_model_contents);\r","            for icms = 1:length(cms)\r","                options.combined_model_contents.(cms{icms}) = {};\r","                cm = bmmo_get_cm_options(options);\r","                \r","                % When\r","                f = fieldnames(cm.(cms{icms}));        \r","                \r","                % Then\r","                obj.verifyTrue(isempty(f));                                                          % Check that the structure is empty\r","            end\r","        end\r","        \r","        %% 3. test with invalid combined model contents structure\r","        function Case3(obj)\r","            % Given\r","            options = bmmo_default_options_structure;\r","            options = bmmo_set_model_configuration(options);\r","            options.combined_model_contents.OR = {'INVALID'};\r","            \r","            % When\\ Then\r","            obj.verifyError(@() bmmo_get_cm_options(options), '');\r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,14,15,18,21,22,23,26,27,28,29,30,38,39,40,41,42,43,46,49,56,57,58,61],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,0,0,1,6,0,0,6,0,0,6,21,21,0,0,21,21,21,21,21,0,0,0,0,0,0,0,1,1,1,1,6,6,0,0,6,0,0,6,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0]}}