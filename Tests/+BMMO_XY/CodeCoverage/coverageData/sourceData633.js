var sourceData633 = {"FileContents":["function test_suite = test_bmmo_chuck_operation\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","\r","% test for bmmo chuck operation\r","\r","% 1. test that model runs with single wafer on chuck 1\r","function test_bmmo_chuck_operation_case1\r","\r","ml = bmmo_default_input;\r","ml = bmmo_add_random_noise(ml, 'mark');\r","ml1w = bmmo_get_wafers(ml, 1);\r","\r","out = bmmo_nxe_drift_control_model(ml1w);\r","\r","out_zero = bmmo_default_output_structure(bmmo_default_options_structure);\r","\r","\r","bmmo_assert_equal(out.corr.BAO(2), out_zero.corr.BAO(2));\r","bmmo_assert_equal(out.corr.KA.grid_2de(2), out_zero.corr.KA.grid_2de(2));\r","bmmo_assert_equal(out.corr.ffp(2), out_zero.corr.ffp(2));\r","bmmo_assert_equal(out.corr.MI.wse(2), out_zero.corr.MI.wse(2));\r","\r","% 2. test that model runs with single wafer on chuck 2\r","function test_bmmo_chuck_operation_case2\r","\r","ml = bmmo_default_input;\r","ml = bmmo_add_random_noise(ml, 'mark');\r","ml2w = bmmo_get_wafers(ml, 2);  \r","    \r","out = bmmo_nxe_drift_control_model(ml2w);\r","out_zero = bmmo_default_output_structure(bmmo_default_options_structure);\r","\r","bmmo_assert_equal(out.corr.BAO(1), out_zero.corr.BAO(2));\r","bmmo_assert_equal(out.corr.KA.grid_2de(1), out_zero.corr.KA.grid_2de(2));\r","bmmo_assert_equal(out.corr.ffp(1), out_zero.corr.ffp(2));\r","bmmo_assert_equal(out.corr.MI.wse(1), out_zero.corr.MI.wse(2));\r","\r","    \r","% 3. test that same results are found when the same single wafer is on\r","% chucks 1 and 2\r","function test_bmmo_chuck_operation_case3\r","\r","ml = bmmo_default_input;\r","ml = bmmo_add_default_whff(ml);\r","noise = 1;\r","ml = bmmo_simulate_random_input(ml, 'WSMKBI', noise);\r","\r","ml1w = bmmo_get_wafers(ml, 1);  \r","   \r","ml2w = ml1w;\r","ml2w.info.F.chuck_id = {'CHUCK_ID_2'};\r","\r","out1 = bmmo_nxe_drift_control_model(ml1w);\r","out2 = bmmo_nxe_drift_control_model(ml2w);\r","\r","bmmo_assert_equal(out1.corr.IR2EUV, out2.corr.IR2EUV, 5e-11);\r","bmmo_assert_equal(out1.corr.SUSD(1), out2.corr.SUSD(3));\r","bmmo_assert_equal(out1.corr.SUSD(2), out2.corr.SUSD(4));\r","bmmo_assert_equal(out1.corr.MI.wse(1), out2.corr.MI.wse(2));\r","bmmo_assert_equal(out1.corr.KA.grid_2de(1), out2.corr.KA.grid_2de(2));\r","bmmo_assert_equal(out1.corr.BAO(1), out2.corr.BAO(2));\r","bmmo_assert_equal(out1.corr.ffp(1), out2.corr.ffp(2));\r","\r","\r","% 4. Test that the correct previous_correction is applied, per chuck\r","function test_bmmo_chuck_operation_case4\r","\r","ml = bmmo_default_input;\r","\r","pc = bmmo_default_output_structure(bmmo_default_options_structure);\r","\r","% fill in nonzero correction for chuck 1\r","pc.corr.BAO(1).TranslationX = 1e-8;\r","pc.corr.BAO(1).TranslationY = -1e-8;\r","pc.corr.MI.wse(1).y_mirr.dy = pc.corr.MI.wse(1).y_mirr.x .^ 2 * 1e-6;\r","pc.corr.MI.wsm = pc.corr.MI.wse;\r","pc.corr.KA.grid_2de(1).dx = (pc.corr.KA.grid_2de(1).x.^3 +  pc.corr.KA.grid_2de(1).y) * 1e-6;\r","pc.corr.ffp(1).dx = (pc.corr.ffp(1).x.^2 +  pc.corr.ffp(1).y.^2) * 1e-6;\r","ml.info.previous_correction = pc.corr;\r","ml.info.configuration_data.KA_correction_enabled = 1;\r","ml.info.configuration_data.susd_correction_enabled = 1;\r","out = bmmo_nxe_drift_control_model(ml);\r","bmmo_assert_equal(out.corr.BAO, pc.corr.BAO);\r","bmmo_assert_equal(out.corr.MI, pc.corr.MI);\r","valid_grid = ~isnan(out.corr.KA.grid_2de(1).dx);\r","bmmo_assert_equal(out.corr.KA.grid_2de(1).dx(valid_grid), pc.corr.KA.grid_2de(1).dx(valid_grid));\r","bmmo_assert_equal(out.corr.KA.grid_2de(1).dy(valid_grid), pc.corr.KA.grid_2de(1).dy(valid_grid));\r","bmmo_assert_equal(out.corr.KA.grid_2de(2).dx(valid_grid), pc.corr.KA.grid_2de(2).dx(valid_grid));\r","bmmo_assert_equal(out.corr.KA.grid_2de(2).dy(valid_grid), pc.corr.KA.grid_2de(2).dy(valid_grid));\r","%bmmo_assert_equal(out.corr.ffp, pc.corr.ffp);\r","\r","% now remove 10 par from output\r","ml1 = bmmo_ffp_to_ml_simple(out.corr.ffp);\r","ml2 = bmmo_ffp_to_ml_simple(pc.corr.ffp);\r","bmmo_assert_equal(ml1, ovl_model(ml2, 'perwafer'));\r","\r","% test with inverted chuck order\r","ml2 = ml;\r","ml2.info.F.chuck_id = {'CHUCK_ID_2', 'CHUCK_ID_1', 'CHUCK_ID_2', 'CHUCK_ID_1','CHUCK_ID_2', 'CHUCK_ID_1'};\r","\r","out2 = bmmo_nxe_drift_control_model(ml);\r","bmmo_assert_equal(out.corr, out2.corr);\r","\r","% verify complete output intact for single-chuck input structures\r","function test_bmmo_chuck_operation_case5\r","\r","ind = bmmo_default_input;\r","in1 = bmmo_get_wafers(ind, [1 3 5]);\r","in2 = bmmo_get_wafers(ind, [2 4 6]);\r","\r","outd = bmmo_nxe_drift_control_model(ind);\r","out1 = bmmo_nxe_drift_control_model(in1);\r","out2 = bmmo_nxe_drift_control_model(in2);\r","\r","bmmo_assert_equal(outd.corr, out1.corr);\r","%bmmo_assert_equal(outd.report, out1.report);\r","bmmo_assert_equal(outd.corr, out2.corr);\r","%bmmo_assert_equal(outd.report, out2.report);\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[2,3,4,5,6,14,15,16,18,20,23,24,25,26,31,32,33,35,36,38,39,40,41,48,49,50,51,53,55,56,58,59,61,62,63,64,65,66,67,73,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,103,104,106,107,112,113,114,116,117,118,120,122],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}