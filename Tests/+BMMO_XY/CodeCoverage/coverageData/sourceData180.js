var sourceData180 = {"FileContents":["function results_out = bmmo_sub_model_MI(results_in, options)\r","% function results_out = bmmo_sub_model_MI(results_in, options)\r","%\r","% The MI sub-mdel\r","%\r","% Input:\r","%   results_in: structure containing at least the following fields:\r","%           interfield_residual: 1 * max_chuck structure array of chuck-averaged\r","%           overlay structures. This is the input to the MI sub-model.\r","%   options: options structure\r","%\r","% Output:\r","%   results_out: structure containing intermediate models\r","%       This function modifies the following fields:\r","%           MI.res: 1*max_chuck array of ml structures; residual per\r","%               chuck id after fitting mirror model.\r","%           MI.Calib_MI: 1 * max chuck array of MI calibrations\r","%           interfield_residual: equal to MI.res\r","%           BAO.tenpar_before_MI: 10 par parameters removed before\r","%               mirror is modelled\r","%\r","%   *** N.B. ***\r","%   MI(2) is the structure for chuck id 2, even if chuck id 2 is the\r","%   only chuck id used\r","\r","model = 'MI';\r","results_out = results_in;\r","\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    % initialize input (per-chuck residual of WH model)\r","    mi_input(chuck_id) = results_out.interfield_residual(chuck_id);\r","    \r","    % remove average field\r","    mi_input(chuck_id) = bmmo_remove_average_field(mi_input(chuck_id), options); \r","    \r","    if ~isempty(options.fid_intrafield)\r","        out_ml_new(chuck_id) = bmmo_convert_layout2_7(mi_input(chuck_id),'x', options.fid_intrafield);\r","        out_ml_new(chuck_id) = bmmo_convert_layout2_7(out_ml_new(chuck_id),'y', options.fid_intrafield);\r","    else\r","        out_ml_new(chuck_id) = mi_input(chuck_id);\r","    end\r","    if ~isempty(options.fid_left_right_edgefield)\r","        mli_MIX(chuck_id) = bmmo_convert_layout2_7(out_ml_new(chuck_id),'y', options.fid_left_right_edgefield);\r","    else\r","        mli_MIX(chuck_id)  = out_ml_new(chuck_id) ;\r","    end\r","    if ~isempty(options.fid_top_bottom_edgefield)\r","        mli_MIY(chuck_id) = bmmo_convert_layout2_7(out_ml_new(chuck_id),'x', options.fid_top_bottom_edgefield);\r","    else\r","        mli_MIY(chuck_id) = out_ml_new(chuck_id) ;\r","    end\r","    \r","    mli_MI(chuck_id) = mi_input(chuck_id);\r","    mli_MI(chuck_id).layer.wr.dx = mli_MIX(chuck_id).layer.wr.dx;\r","    mli_MI(chuck_id).layer.wr.dy = mli_MIY(chuck_id).layer.wr.dy;\r","end\r","\r","[fps, C] = bmmo_construct_FPS(mli_MI, options, model);\r","fit_coeffs = bmmo_combined_model(mli_MI, fps, options, C);\r","\r","for chuck_id = options.chuck_usage.chuck_id_used\r","    % model mirror maps (spline fit)\r","    [~, results_out.MI.Calib_MI(chuck_id)] = bmmo_generate_mirrors(mi_input(chuck_id), fit_coeffs.MIX{chuck_id}, fit_coeffs.MIY{chuck_id}, options);\r","    \r","    % find the linear terms in the resulting maps when interpolated to 7x7\r","    % layout\r","    fp_tmp = bmmo_mirror_fingerprint(bmmo_get_layout(mi_input(chuck_id), options.reduced_reticle_layout, options), results_out.MI.Calib_MI(chuck_id), options);\r","    % get fp on meas layout\r","    fp_tmp = ovl_combine_linear(fp_tmp, 1, mi_input(chuck_id), 0);\r","    [~, pars(chuck_id)] = bmmo_fit_model(fp_tmp, options, 'tx', 'rxwfr', 'ty', 'rwy');\r","    \r","    % Remove linear terms from mirror maps\r","    [results_out.MI.Calib_MI(chuck_id).x_mirr, results_out.MI.Calib_MI(chuck_id).y_mirr] = bmmo_model_map_parms(results_out.MI.Calib_MI(chuck_id).x_mirr, results_out.MI.Calib_MI(chuck_id).y_mirr, options, pars(chuck_id));\r","    \r","    % Apply exposure side mirror maps to measure side\r","    if options.invert_MI_wsm_sign\r","        results_out.MI.Calib_MI_wsm(chuck_id).x_mirr.dx = -1 * results_out.MI.Calib_MI(chuck_id).x_mirr.dx;\r","        results_out.MI.Calib_MI_wsm(chuck_id).y_mirr.dy = -1 * results_out.MI.Calib_MI(chuck_id).y_mirr.dy;\r","    else\r","        results_out.MI.Calib_MI_wsm(chuck_id) = results_out.MI.Calib_MI(chuck_id);\r","    end\r","    \r","    % FF BAO Correction\r","    results_out.BAO.ff_6par(chuck_id) = bmmo_ff_bao_correction(results_out.MI.Calib_MI_wsm(chuck_id), results_out.KA.Calib_KA_meas(chuck_id), options);\r","    \r","    % Calculate mirror fingerprint (for debugging purposes)\r","    results_out.MI.fp(chuck_id) = bmmo_mirror_fingerprint(mi_input(chuck_id), results_out.MI.Calib_MI(chuck_id), options);\r","    \r","    % Calculate mirror residual (for KPI)\r","    results_out.MI.res(chuck_id) = ovl_sub(mi_input(chuck_id), results_out.MI.fp(chuck_id));    \r","    results_out.interfield_residual(chuck_id) = ovl_sub(results_out.interfield_residual(chuck_id), results_out.MI.fp(chuck_id));\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[26,27,29,31,34,36,37,38,42,43,47,48,53,54,55,58,59,61,63,67,69,70,73,76,77,78,84,87,90,91],"UnhitLineNumbers":[39,40,44,45,49,50,79,80],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,113,0,113,0,220,0,0,220,0,220,220,220,0,0,0,220,220,0,0,0,220,220,0,0,0,0,220,220,220,0,0,113,113,0,113,0,220,0,0,0,220,0,220,220,0,0,220,0,0,220,220,220,0,0,0,0,0,220,0,0,220,0,0,220,220,0,0,0]}}