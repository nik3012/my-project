var sourceData96 = {"FileContents":["function [res, coeff] = bmmo_fit_parms(overlay_in, wd, options, varargin)\r","% function [res, coeff] = bmmo_fit_parms(overlay_in, wd, options, varargin)\r","%\r","% Fit the given parameters to the input overlay, yielding residuals res and\r","% fit coefficients coeff\r","%\r","% This is an implementation of fitting the overlay model in \r","% http://techwiki.asml.com/index.php/Overlay_model\r","% It implements \r","%   b = pinv(C) * y\r","% and\r","%   e =  y - (C * b) \r","% where e = res, y = overlay_in, b = coeff, and the design matrix C is either\r","% given as wd, or calculated from wd and varargin\r","% \r","%  \r","% Inputs:\r","%   overlay_in: (n * m) double matrix of input overlay \r","%   wd:    Two possibilities:\r","%           1) structure of layout marks (from ml structure)\r","%           2) design matrix from bmmo_get_design_matrix\r","%   options: options structure containing parameter table\r","%  \r","% Optional Inputs:\r","%   varargin: a variable number (possibly 0) of parameter names and\r","%            options, including the following:\r","%           '10par': fit 10par\r","%           '6par': fit 6par\r","%           'tx', 'ty', etc: parameters to fit\r","%\r","%\r","% Output: \r","%   res: (n * m) double matrix of output residuals\r","%   coeff: q * m double matrix of fit coefficients, where q is the number of\r","%       parameters\r","%\r","% NB Make sure to call this function with valid parameter lists!\r","% NO checking is done on parameter order, duplication or validity\r","\r","if( ~isnumeric(wd) )\r","    % construct design matrix\r","    C = bmmo_get_design_matrix(wd, options, varargin);\r","else\r","    % design matrix already given\r","    C = wd;\r","end\r","\r","% remove all-NaN rows in overlay_in\r","overlay_nans = isnan(overlay_in);\r","validindex = ~all(overlay_nans, 2);\r","\r","% remove rows with NaNs from the design matrix\r","validC = ~isnan(C);\r","validC = all(validC, 2);\r","validindex = validindex & validC;\r","\r","Cvalid = C(validindex, :);\r","\r","% allocate the residual input\r","res = zeros(size(overlay_in)) * NaN;\r","\r","% check if the only nans in the input are in all-nan rows\r","% if so, the computation of coefficients can be vectorized\r","if isequal(all(overlay_nans, 2), any(overlay_nans, 2))\r","    ovalid = overlay_in(validindex, :);\r","    coeff = pinv(Cvalid) * ovalid;\r","    res(validindex, :) = ovalid - (Cvalid * coeff);\r","else\r","    % otherwise, we compute coefficients column by column\r","    input_cols = size(overlay_in, 2);\r","    \r","    % allocate the coefficients structure\r","    coeff = zeros(size(Cvalid, 2), input_cols);\r","    \r","    for ic = 1:input_cols\r","        %remove nans from the input\r","        ov_c = overlay_in(:, ic);\r","        valid_index_c = ~isnan(ov_c);\r","        ov_c = ov_c(validindex);\r","        valid_ov_c = ~isnan(ov_c);\r","        ov_c = ov_c(valid_ov_c);\r","        Cv_c = Cvalid(valid_ov_c, :);\r","        \r","        coeff(:, ic) = pinv(Cv_c) * ov_c;\r","        res(valid_index_c, ic) = ov_c - (Cv_c * coeff(:, ic));\r","    end\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[40,42,43,45,49,50,53,54,55,57,60,64,65,66,67,68,70,73,75,77,78,79,80,81,82,84,85],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2232,0,2231,1,0,1,0,0,0,2232,2232,0,0,2232,2232,2232,0,2232,0,0,2232,0,0,0,2232,2231,2231,2231,1,0,1,0,0,1,0,1,0,264,264,264,264,264,264,0,264,264,0,0,0,0]}}