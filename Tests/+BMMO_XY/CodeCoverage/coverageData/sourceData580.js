var sourceData580 = {"FileContents":["function [mlo, sbc_out, job_report, invalids, bar_struct, wdm_xml] = bmmo_read_lcp_output(dirname, wec_dirname, filter, bar_struct)\r","% function [mlo, sbc_out, job_report, invalids, bar_struct, wdm_xml] = bmmo_read_lcp_output(dirname, wec_dirname, filter, bar_struct)\r","%\r","% Reads a directory containing LCP/VCP job ADEL files and converts them into\r","% a valid bmmo-nxe drift control model input structure\r","%\r","% Input: dirname: directory containing ADEL files (can be downloaded as a .zip file from\r","% job report in LCP/VCP)\r","%\r","% Optional Input:\r","%   wec_dirname: dirname of wec files (if different)\r","%   filter: flag to set time filtering \r","%       0: recover to baseline\r","%       1: control to baseline\r","%       2: use filter from LCP/VCP Job report (default)\r","%   bar_struct: progress bar structure with following fields\r","%       h: handle to progress bar\r","%       total: total progress\r","%       curr: current progress\r","%       update: handle to update function\r","%\r","% Output: mlo: valid input structure for bmmo_nxe_drift_control_model\r","%         sbc_out: BMMO-NXE sbc2 structure from SBC output\r","%         job_report: Parsed LCP/VCP job report structure\r","%         invalids: Parsed Invalidated Data structure\r","%         bar_struct: updated progress bar structure or []\r","%         wdm_xml: xml loaded ADELwaferdatamap (optional)\r","%\r","% Note on the job_report:\r","% use the bmmo_parse_kpi* functions to get the kpi values. This will:\r","% * convert the text to numerical values\r","% * for OTAS data: field names like 'Max99.7' converted to something that \r","%   Matlab can handle properly. That is, the 99.7 part is translated to a \r","%   name with _997 in it.\r","% See e.g. bmmo_parse_kpi_res.m how this is done.\r","\r","\r","if nargin < 2\r","    disp(['Using wec_dirname as \"' dirname '\"']);\r","    wec_dirname = dirname;\r","end\r","% if not provided use filter from Job report\r","if nargin < 3  \r","    use_report_filter = 1; \r","else\r","   if filter < 2\r","        disp(['Overriding LCP Job Report: setting time filtering to ' num2str(filter)]);\r","        use_report_filter = 0;\r","   else\r","       use_report_filter  = 1;\r","   end\r","end\r","\r","% empty if not provided\r","if nargin < 4\r","    bar_struct = [];\r","end\r","\r","% Find the ADEL files in the directory\r","bar_struct = bmmo_log_progress('Finding ADELs', bar_struct);\r","adels      = bmmo_find_adels(dirname);\r","\r","% Parse the LCP job report\r","try\r","    [job_report, sbc_out, filter, mapped_wids, exposure_wids, settings] = bmmo_parse_job_report(adels.adellcp,use_report_filter, bar_struct);\r","    % for output arguments other than BMMO MATLAB input\r","    if nargout > 1\r","        % Parse the output sbc correction\r","        bar_struct = bmmo_log_progress('Parsing ADELsbcOverlayDriftControlNxe', bar_struct);\r","        sbc_out    = bmmo_kt_process_SBC2([dirname filesep sbc_out]);\r","\r","        % parse invalidated data\r","        if ~isempty(adels.adelinv)\r","            bar_struct = bmmo_log_progress('Parsing ADELsubstrateInvalidatedDataReport', bar_struct);\r","            invalids   = xml_load(adels.adelinv);\r","        else\r","            invalids = [];\r","        end\r","    end\r","    % Optional output: ADELwaferdatamap xml loaded\r","    if nargout > 5\r","         bar_struct = bmmo_log_progress('Parsing ADELwaferdatamap', bar_struct);\r","         wdm_xml = xml_load(adels.adelwdm);\r","    end\r","catch\r","    warning('Erorr in parsing, all output arguments except BMMO input will be empty')\r","    % default sbc output structure with zeroes\r","    tmp      = bmmo_default_output_structure(bmmo_default_options_structure);\r","    sbc_out  = tmp.corr;\r","    \r","    % emty other outputs\r","    invalids                    = [];\r","    job_report                  = [];\r","    mapped_wids                 = [];\r","    exposure_wids               = [];\r","    settings.configuration_data = [];\r","    wdm_xml                     = [];\r","end\r","\r","% Parse ADEL files to produce BMMO MATLAB input\r","[mlo, bar_struct] = bmmo_input_from_adels(adels.adelmet, adels.adeller, adels.adelsbcrep,  adels.adelwhc,...\r","                    adels.adelrec, wec_dirname, filter, bar_struct, mapped_wids, exposure_wids, adels.adelmcl);     \r","                \r","% Parse ADELexposureTrajectoriesReport & ADELwaferGridResidualReport                \r"," if ~isempty(adels.adelexp)\r","    [ml_cet_residual, adelexp_wids] = bmmo_read_adelexposetrajectories(adels.adelexp);\r","    \r","    if ~isempty(exposure_wids)\r","        nwids = find(contains(adelexp_wids, exposure_wids) == 1);\r","    else\r","        nwids = 1:ml_cet_residual.nwafer;\r","    end\r","    \r","    % get same wafers as readout for ADELexp outputs\r","    mlo.info.report_data.cet_residual = ovl_get_wafers(ml_cet_residual, nwids);\r","    \r","    % Get 1L CET NCE if readout is 1L\r","    options = bmmo_default_options_structure;\r","    field_ids = [options.layer_fields{1} options.edge_fields];\r","    N_F_L1  = numel(field_ids);\r","    N_SMF_L2 = 7672; \r","    if mlo.nfield < N_SMF_L2  && mlo.info.report_data.cet_residual.nfield > N_F_L1 \r","        mlo.info.report_data.cet_residual =  ovl_get_fields(mlo.info.report_data.cet_residual, field_ids);\r","    end\r","    \r","    % ADELwaferGridResidualReport parsing\r","    if ~isempty(adels.adelwfrgridNCE)\r","        [ml_KA_cet_corr, ml_KA_cet_nce, ~, settings.configuration_data.KA_actuation]  = bmmo_read_adelwafergridresidual(adels.adelwfrgridNCE, ml_cet_residual);\r","        % get same wafers as readout for ADELwfrgrid outputs\r","        mlo.info.report_data.KA_cet_corr   = ovl_get_wafers(ml_KA_cet_corr, nwids);\r","        mlo.info.report_data.KA_cet_nce    = ovl_get_wafers(ml_KA_cet_nce, nwids);\r","       \r","    % Get 1L KA correction & NCE if readout is 1L \r","        if mlo.nfield < N_SMF_L2 && mlo.info.report_data.KA_cet_corr.nfield > N_F_L1 \r","            mlo.info.report_data.KA_cet_corr =  ovl_get_fields(mlo.info.report_data.KA_cet_corr, field_ids);\r","            mlo.info.report_data.KA_cet_nce  =  ovl_get_fields(mlo.info.report_data.KA_cet_nce, field_ids);\r","        end\r","        \r","    end\r"," end              \r","\r","% Copy configuration options from settings to mlo\r","bar_struct = bmmo_log_progress('Copying configuration options (SUSD/KA/Timefilter) to input', bar_struct);\r","mlo.info.configuration_data = settings.configuration_data;\r","% in case of Adapative filter\r","if isfield(settings, 'report_data')\r","    mlo.info.report_data.adaptive_time_filter_enabled = settings.report_data.adaptive_time_filter_enabled;\r","    mlo.info.report_data.T_previous_expose            = settings.report_data.T_previous_expose;\r","    mlo.info.report_data.T_current_expose             = settings.report_data.T_current_expose;\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[38,43,45,46,49,50,55,60,61,64,65,67,69,70,73,74,75,76,77,81,101,102,105,143,144,146],"UnhitLineNumbers":[39,40,44,47,48,56,82,83,85,86,88,89,92,93,94,95,96,97,106,108,109,110,111,115,118,119,120,121,122,123,127,128,130,131,134,135,136,147,148,149],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,4,4,0,0,4,4,0,0,0,0,4,0,0,0,0,4,4,0,0,4,4,0,4,0,4,4,0,0,4,2,2,2,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,0,0]}}