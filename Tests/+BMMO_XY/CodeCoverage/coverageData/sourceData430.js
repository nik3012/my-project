var sourceData430 = {"FileContents":["classdef bmmoLisDevbenchRunner < handle\r","%% <help_update_needed>\r","%  for the class and for the function\r","%\r","%\r","\r","    %%\r","    properties\r","        devbench % devbench object\r","        lis\r","        lisHttp\r","        http     % http object\r","        sftp\r","        current_sbc\r","        current_fms\r","    end\r","        \r","    properties (Access = private)\r","       initialization_state \r","    end\r","\r","    %%    \r","    % (offline: start a KT devbench, get its IP addr)\r","    methods\r","        function obj = bmmoLisDevbenchRunner(devbench, lis)\r","           obj.devbench = devbench;\r","           obj.http = bmmoDevbenchHTTPInterface();\r","           obj.sftp = bmmoDevbenchSFTPInterface();\r","           obj.initialization_state = false;\r","           obj.lis = lis;\r","           obj.lisHttp = bmmoLISHTTPInterface();\r","        end\r","    end\r","    \r","    %%\r","    methods\r","        function setDevbench(obj, devbench)\r","            obj.devbench = devbench;\r","            obj.initialization_state = false;\r","        end\r","        \r","        function verifyInitialized(obj)\r","            if ~obj.initialization_state\r","                % (set the FMS state on the devbench so that it uses this report)\r","                disp('Retrieving Devbench Fine Metrology State');\r","                % get the FMS of the devbench\r","                try\r","                    [fms_data, fms_txt] = obj.http.get_last_adel_from_ip('ADELfineMetrologyOverlayState', 'EDI', obj.devbench.ip_address);\r","                catch err\r","                    disp('Please set the Fine Metrology State of the devbench using the command \"python KT/tstpkg/KTMI_BMMO_set_fms.py\"');\r","                    rethrow(err);\r","                end\r","                obj.devbench.fms = fms_data.FineMetrologyOverlayState.CalibrationState;\r","                \r","                % Upload FMS to LIS\r","                adelfms_filename = 'ADELfineMetrologyOverlayState.xml';\r","                obj.writeAdel(adelfms_filename, fms_txt);\r","                response = obj.lisHttp.send_adel_to_ip(adelfms_filename, obj.lis.ip_address);\r","                \r","                % Log the FMS for use in creating an SBC\r","                obj.initialization_state = true;\r","            end\r","        end\r","        \r","        function runBl3Loop(obj, iterations, initial_sbc, timefilter, first_iteration)         \r","            obj.verifyInitialized();\r","            \r","            if nargin < 5\r","                first_iteration = 1;\r","            end\r","            \r","            disp('About to run BMMO control loop. Please ensure the TwinScan software is running and has been initialized correctly (see https://techwiki.asml.com/index.php/BMMO_NXE_Overlay_Devbench_procedure)');\r","            \r","            adel_sbc = bmmoADELSBC();\r","           \r","            mkdir(sprintf('iteration_%d', first_iteration));\r","            if ~ischar(initial_sbc)\r","                fprintf('\\nBuilding ADELsbcOverlayDriftControlNxe from sbc input\\n');\r","                adel_sbc.create_SBC_from_corr(initial_sbc);\r","                adel_sbc.set_fms(obj.devbench.fms);\r","                adel_sbc.set_machine_name(obj.devbench.machine_name);\r","                adel_sbc.setRecipeName(sprintf('sbc_iteration_%d', first_iteration));\r","                sbc_file = sprintf('iteration_%d\\\\ADELsbcOverlayDriftControlNxe.xml', first_iteration);\r","                adel_sbc.write(sbc_file);\r","            else\r","                % to do, copy file to iteration directory\r","                sbc_file = initial_sbc;\r","            end\r","            \r","            % to do add BL3 neutral           \r","            for ii = first_iteration:(first_iteration + (iterations-1))\r","                fprintf('\\nIteration %d\\n==========\\n', ii);\r","                currentdir = sprintf('iteration_%d', ii);\r","                fprintf('\\n - Upload the SBC file %s to the Devbench using http://%s:8080/EDI/baselinermmonxe.html\\n', sbc_file, obj.devbench.ip_address);\r","                fprintf(' - Run a BMMO-NXE lot with SBC recipe sbc_iteration_%d and press a key when ready\\n', ii);\r","                \r","                pause;\r","                obj.getBl3AdelsFromDevbench(currentdir);\r","                obj.uploadBl3AdelsToLis(currentdir);\r","                adeljct = obj.generateAdelJobControl(currentdir, timefilter);\r","                \r","                disp('running BaseLiner 3 model on LIS');\r","                \r","                %to do, handle response\r","                response = obj.lisHttp.send_adel_control_to_ip([currentdir filesep adeljct], obj.lis.ip_address);\r","                disp(['LIS Job Created: ' char(datetime)]);\r","                \r","                %to do: automate sbc download\r","                mkdir(sprintf('iteration_%d', ii+1));\r","                fprintf('\\n - Download the generated SBC file from LIS and place it in the folder iteration_%d\\n', ii+1);\r","                fprintf('Make sure the file is named ADELsbcOverlayDriftControlNxe.xml\\n');\r","                \r","                pause;               \r","            end           \r","        end\r","        \r","        function getBl3AdelsFromDevbench(obj, currentdir)\r","                disp('retrieving ADELler');\r","                [adeller, adeller_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELler', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELler with timestamp %s\\n', adel_date);\r","                adeller_filename = [pwd filesep sprintf('%s%sADELler.xml', currentdir, filesep)];\r","                obj.writeAdel(adeller_filename, adeller_txt);\r","                \r","                disp('retrieving ADELsbcOverlayDriftControlNxerep');\r","                [~, adelsbcrep_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELsbcOverlayDriftControlNxerep', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELsbcOverlayDriftControlNxerep with timestamp %s\\n', adel_date);\r","                adelsbcrep_filename = [pwd filesep sprintf('%s%sADELsbcOverlayDriftControlNxerep.xml', currentdir, filesep)];\r","                obj.writeAdel(adelsbcrep_filename, adelsbcrep_txt);\r","\r","                disp('retrieving ADELexposureTrajectoriesReportProtected');\r","                [~, adelexp_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELexposureTrajectoriesReportProtected', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELexposureTrajectoriesReportProtected with timestamp %s\\n', adel_date);\r","                adelexp_filename = [pwd filesep sprintf('%s%sADELexposureTrajectoriesReport.xml', currentdir, filesep)];\r","                obj.writeAdel(adelexp_filename, adelexp_txt);\r","                \r","                disp('retrieving ADELwaferGridResidualReportProtected');\r","                [~, adelwfrgridNCE_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELwaferGridResidualReportProtected', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELwaferGridResidualReportProtected with timestamp %s\\n', adel_date);\r","                adelwfrgridNCE_filename = [pwd filesep sprintf('%s%sADELwaferGridResidualReport.xml', currentdir, filesep)];\r","                obj.writeAdel(adelwfrgridNCE_filename, adelwfrgridNCE_txt);\r","                \r","                disp('retrieving ADELwaferHeatingCorrectionsReport');\r","                [~, adelwhc_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELwaferHeatingCorrectionsReport', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELwaferHeatingCorrectionsReport with timestamp %s\\n', adel_date);\r","                adelwhc_filename = [pwd filesep sprintf('%s%sADELwaferHeatingCorrectionsReport.xml', currentdir, filesep)];\r","                obj.writeAdel(adelwhc_filename, adelwhc_txt);\r","                \r","                disp('retrieving KT_wafers_out');\r","                bmmoDevbenchSFTPInterface.get_file_from_devbench('KT/KT_wafers_out', obj.devbench.machine_name, obj.devbench.ip_address, currentdir);\r","                KT_wo = sprintf('%s%sKT_wafers_out', currentdir, filesep);\r","                \r","                disp('generating ADELmetrology');\r","                bmmo_generate_ADELmetrology_simple(KT_wo, adeller);\r","                movefile('ADELmetrology*', currentdir)              \r","        end\r","        \r","        function uploadBl3AdelsToLis(obj, currentdir)\r","            allFiles = dir (fullfile(currentdir, '**', '*ADEL*'));\r","            \r","            for i = 1:length(allFiles)\r","                disp(['Uploading ' allFiles(i).name])\r","                adel_path = [allFiles(i).folder filesep allFiles(i).name];\r","                response(i) = obj.lisHttp.send_adel_to_ip(adel_path, obj.lis.ip_address);\r","            end                       \r","        end\r","        \r","        function adeljct = generateAdelJobControl(obj, currentdir, timefilter)\r","            % todo more robust way of using job control template\r","            adeljcttemp = '\\\\asml.com\\eu\\shared\\nl011052\\BMMO_NXE_TS\\03-Integration\\302-Integration_Milestones\\LIS_job_for_VCP\\TPS\\Templates\\ADELbmmoOverlayJobControl.xml';\r","            copyfile(adeljcttemp, currentdir)\r","            bmmo_create_job_control(currentdir, timefilter);\r","            [~, name,ext] = fileparts(adeljcttemp);\r","            adeljct = [name ext];      \r","            \r","        end\r","        \r","        function writeAdel(obj, filename, adel_txt)\r","                fid = fopen(filename, 'w');\r","                fprintf(fid, '%s', adel_txt);\r","                fclose(fid);\r","        end\r","        \r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[26,27,28,29,30,31,38,39,43,45,47,48,49,50,51,53,56,57,58,61,66,68,69,72,74,76,77,78,79,80,81,82,83,84,85,87,91,92,93,94,95,97,98,99,100,102,105,106,109,110,111,113,118,119,120,121,122,124,125,126,127,128,130,131,132,133,134,136,137,138,139,140,142,143,144,145,146,148,149,150,152,153,154,158,160,161,162,163,169,170,171,172,173,178,179,180],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}