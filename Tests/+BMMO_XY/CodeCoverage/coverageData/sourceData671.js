var sourceData671 = {"FileContents":["%% testcases for function: bmmo_interp_nans\r","%\r","%    test_bmmo_interp_nans_r13\r","%\r","%% last modified:\r","%   20150814  SBPR creation\r","%   20150901  SBPR adapted for R13 compatibility testing\r","%   20181213  SELR added testcase 5\r","\r","function test_suite = test_bmmo_interp_nans\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","\r","\r","function test_bmmo_interp_nans_case1 %#ok<DEFNU>\r","%% test with all-nan input (should return a zero matrix)\r","M = zeros(10) * nan;\r","Z = zeros(10);\r","X = (1:10)';\r","Y = X;\r","out = bmmo_interp_nans(M, X, Y);\r","assert(isequal(out, Z));\r","%% test with no nans in the input (should return an identical matrix)\r","M = ones(10);\r","out = bmmo_interp_nans(M, X, Y);\r","assert(isequal(out, M));\r","\r","\r","function test_bmmo_interp_nans_case2 %#ok<DEFNU>\r","%% test a 3x3 ones matrix with a single NaN in the centre\r","M = ones(3);\r","M(2,2) = NaN;\r","% updown neighbourhood, uniform weight\r","X = (1:3)';\r","Y = X;\r","out = bmmo_interp_nans(M, X, Y);\r","assert(out(2,2) == 1);\r","% updown neighbourhood, unequal weights\r","X = [1,7,8]';\r","Y = [5,8,20]';\r","out = bmmo_interp_nans(M, X, Y);\r","assert(out(2,2) == 1);\r","% diagonal neighbourhood, unequal weights\r","out = bmmo_interp_nans(M, X, Y, 'diagonal');\r","assert(out(2,2) == 1);\r","\r","\r","function test_bmmo_interp_nans_case3 %#ok<DEFNU>\r","%% test a 3x3 Matrix with larger values on the diagonals\r","M = [100 1 100; 1 NaN 1; 100 1 100];\r","X = (1:3)';\r","Y = X;\r","% the diagonal interpolation should reflect these larger values\r","out_u = bmmo_interp_nans(M, X, Y);\r","out_d = bmmo_interp_nans(M, X, Y, 'diagonal');\r","assert(out_d(2,2) > out_u(2,2));\r","% change the weights so that diagonals are relatively remote\r","Y = (0:50:100)';\r","out_d2 = bmmo_interp_nans(M, X, Y, 'diagonal');\r","assert(out_d2(2,2) < out_d(2,2));\r","\r","\r","function test_bmmo_interp_nans_case4 %#ok<DEFNU>\r","%% test a large matrix with mostly NaNs\r","% Make sure there are no NaNs left in the matrix\r","% updown neighbourhood, uniform weight\r","M = zeros(99) * NaN;\r","M(50,50) = 1;\r","M(1,1) = 0;\r","M(1,99) = 0;\r","M(99,1) = 0;\r","M(99,99) = 0;\r","X = (1:99)';\r","Y = X;\r","out = bmmo_interp_nans(M, X, Y);\r","assert(~any(any(isnan(out))));\r","% diagonal neighbourhood, step, uniform weight\r","out = bmmo_interp_nans(M, X, Y, 'diagonal', 1);\r","assert(~any(any(isnan(out))));\r","\r","\r","function test_bmmo_interp_nans_case5 %#ok<DEFNU>\r","%% check max loop input\r","M = ones(3);\r","M(2,2) = NaN;\r","% updown neighbourhood, uniform weight\r","X = (1:3)';\r","Y = X;\r","out = bmmo_interp_nans(M, X, Y, 'diagonal', 1, 1000);\r","out2 = bmmo_interp_nans(M, X, Y, 'diagonal', 1, 0);\r","\r","assert(out(2,2) == 1);\r","assert(out2(2,2) == 1);"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[11,12,13,14,15,21,22,23,24,25,26,28,29,30,35,36,38,39,40,41,43,44,45,46,48,49,54,55,56,58,59,60,62,63,64,71,72,73,74,75,76,77,78,79,80,82,83,88,89,91,92,93,94,96,97],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}