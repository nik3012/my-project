var sourceData650 = {"FileContents":["%% 1 test with simple translation of small structure\r","function test_suite = test_bmmo_fit_model_perfield \r","suite = initTestSuite2016(localfunctions);","if nargout==0","    suite.run();","else","    test_suite = suite;","end","\r","function test_allTestCases\r","%% 1. test against ovl_model 10par with random large structure, single wafer\r","\r","\r","mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 1,'nlayer', 1);\r","options.parlist = bmmo_parlist;\r","\r","mld.layer.wr.dx = 1e-9 * randn(size(mld.layer.wr.dx));\r","mld.layer.wr.dy = 1e-9 * randn(size(mld.layer.wr.dx));\r","\r","options.parlist = bmmo_parlist;\r","\r","[mlo, c1] = ovl_model(mld, '10par', 'perwafer', 'perfield');\r","\r","[ml_out, c2] = bmmo_fit_model_pw_perfield(mld, options, '10par');\r","\r","bmmo_assert_equal(ml_out, mlo);\r","\r","\r","%% 2. test against ovl_model 10par with random large structure, multiple\r","%% wafers\r","\r","mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","options.parlist = bmmo_parlist;\r","\r","for iw = 1:6\r","    mld.layer.wr(iw).dx = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","    mld.layer.wr(iw).dy = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","end\r","    \r","options.parlist = bmmo_parlist;\r","\r","mlo = ovl_model(mld, '10par', 'perwafer', 'perfield');\r","\r","%[mlo_metro, coeff_metro] = ovl_metro_model(mld, '10par');\r","\r","\r","\r","% entire structure\r","\r","ml_out = bmmo_fit_model_pw_perfield(mld, options, '10par');\r","\r","bmmo_assert_equal(mlo, ml_out);\r","\r","%% 3. test with random NaNs in input\r","\r","mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","options.parlist = bmmo_parlist;\r","\r","for iw = 1:6\r","    mld.layer.wr(iw).dx = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","    mld.layer.wr(iw).dy = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","end\r","\r","for iw = 1:6\r","   % generate a random number of NaNs\r","   nans_this_wafer = randi(1000);\r","   nanids = unique(randi(length(mld.layer.wr(iw).dx), 1, nans_this_wafer));\r","   mld.layer.wr(iw).dx(nanids) = NaN;\r","   mld.layer.wr(iw).dy(nanids) = NaN;\r","end\r","    \r","options.parlist = bmmo_parlist;\r","\r","mlo = ovl_model(mld, '10par', 'perwafer', 'perfield');\r","\r","% entire structure\r","\r","ml_out = bmmo_fit_model_pw_perfield(mld, options, '10par');\r","\r","bmmo_assert_equal(mlo, ml_out);\r","\r","\r"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[3,4,5,6,7,14,15,17,18,20,22,24,26,32,33,35,36,37,40,42,50,52,56,57,59,60,61,64,66,67,68,69,72,74,78,80],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}