var sourceData655 = {"FileContents":["function test_suite = test_bmmo_gauss_interp2\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","function test_bmmo_gauss_interp2_case1 %#ok<DEFNU>\r","% First test: interpolate 8x8 grid to 4x4 with gridsize 2\r","% Equally-spaced interpolation points as below\r","% All interpolated values should be equal\r","% \r","%\r","%      1     1     1     1     1     1     1     1\r","%         .           .           .           .\r","%      1     2     2     1     1     2     2     1\r","%\r","%      1     2     2     1     1     2     2     1\r","%         .           .           .           .\r","%      1     1     1     1     1     1     1     1\r","%        \r","%      1     1     1     1     1     1     1     1\r","%         .           .           .           .\r","%      1     2     2     1     1     2     2     1\r","%         \r","%      1     2     2     1     1     2     2     1\r","%         .           .           .           .\r","%      1     1     1     1     1     1     1     1\r","% generate the 8x8 matrix of input values\r","inx = ones(4);\r","inx(2:3, 2:3) = 2;\r","inx = repmat(inx, 2, 2);\r","% generate the input meshgrid\r","[ingx, ingy] = meshgrid(1:8, 1:8);\r","% generate the output meshgrid\r","[ogx, ogy] = meshgrid(1.5:2:7.5, 1.5:2:7.5);\r","d = 2;\r","[ovx, ovy] = bmmo_gauss_interp2(ingx, ingy, inx, inx, ogx, ogy, d);\r","assert(all(all(ovx == ovy)));\r","assert(all(all(ovx > 1 & ovx < 2)));\r","assert(all(all(ovx == ovx(1))));\r","function  test_bmmo_gauss_interp2_case2 %#ok<DEFNU>\r","% Second test: interpolate 7x7 grid to 3x3 with gridsize 1\r","% Equally-spaced interpolation points (*) as below\r","% All interpolated values should be equal to 1\r","%      0     1      0     1      0     1      0\r","%      1     1*     1     1*     1     1*     1\r","%      0     1      0     1      0     1      0\r","%      1     1*     1     1*     1     1*     1\r","%      0     1      0     1      0     1      0\r","%      1     1*     1     1*     1     1*     1\r","%      0     1      0     1      0     1      0\r","% generate the 7x7 grid\r","grid = ones(7);\r","zindex1 = repmat([1 3 5 7]', 1, 4);\r","zindex2 = repmat([0 14 28 42], 4, 1);\r","zindex = zindex1 + zindex2;\r","grid(zindex) = 0;\r","% generate the input meshgrid\r","[ingx, ingy] = meshgrid(1:7, 1:7);\r","% generate the output meshgrid\r","[ogx, ogy] = meshgrid([2 4 6], [2 4 6]);\r","% when d == 1, only the non-zero values are interpolated, and the output \r","% should be all 1\r","d = 1;\r","[ovx, ovy] = bmmo_gauss_interp2(ingx, ingy, grid, grid, ogx, ogy, d);\r","expected_out = ones(3);\r","bmmo_assert_equal(ovx, expected_out);\r","bmmo_assert_equal(ovy, expected_out);\r","% when d == 4, edge and corner values will be interpolated from relatively\r","% more zeros\r","d = 4;\r","[ovx, ovy] = bmmo_gauss_interp2(ingx, ingy, grid, grid, ogx, ogy, d);\r","bmmo_assert_equal(ovx, ovy);\r","tolerance = 1e-15; % there will be some rounding errors\r","% Check that corner values are equal\r","bmmo_assert_equal(ovx(1), ovx(3), tolerance); \r","bmmo_assert_equal(ovx(7) , ovx(9), tolerance);\r","bmmo_assert_equal(ovx(1) , ovx(9), tolerance);\r","% Check that non-corner edge values are equal\r","bmmo_assert_equal(ovx(2) , ovx(8), tolerance);\r","bmmo_assert_equal(ovx(4) , ovx(6), tolerance);\r","bmmo_assert_equal(ovx(2) , ovx(4), tolerance);\r","% Check that edge values are greater than corner values\r","assert(ovx(2) > ovx(1));\r","% Check that the centre value is greatest\r","assert(ovx(5) > ovx(2));\r","% Check that all values are between 0 and 1\r","assert(all(all(ovx > 0 & ovx < 1)));"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[2,3,4,5,6,30,31,32,34,36,37,38,39,40,41,54,55,56,57,58,60,62,65,66,67,68,69,72,73,74,75,77,78,79,81,82,83,85,87,89],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}