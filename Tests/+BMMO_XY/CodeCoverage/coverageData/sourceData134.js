var sourceData134 = {"FileContents":["function [M, y, ovl_vec ,valid]= bmmo_get_poly_linear_system(ml, n)\r","% function [M, y, ovl_vec ,valid]= bmmo_get_poly_linear_system(ml, n)\r","%\r","% Get a linear system for polynomial fitting\r","%\r","% Input: \r","%   ml: ml structure with 1 layer and 1 wafer\r","%   n: order of polynomial to fit\r","%\r","% Output:\r","%   M: design matrix of linear system, NaNs removed\r","%   y: overlay vector with NaNs removed\r","%   ovl_vec: overlay vector (inlcuding NaNs)\r","%   valid: valid indices of overlay vector\r","\r","% Allocate the KA matrix\r","ka_size = sum(1:(n+1));\r","ka_mat = zeros(length(ml.wd.xw), ka_size);\r","\r","for in = 0:n\r","    % Get a basic matrix of polynomials for order n\r","    % this is a m*(n+1) matrix, where m is the total number of marks in ml\r","    ka_mat(:, sub_get_cols(in)) = bmmo_get_ka_matrix(ml, in);    \r","end\r","\r","% Create a zero matrix for tiling\r","zero_mat = zeros(size(ka_mat));\r","\r","% Build the design matrix M \r","M = [ka_mat, zero_mat; zero_mat, ka_mat];\r","\r","% Build the overlay vector y\r","% First allocate an output for the fit\r","ovl_vec = [ml.layer.wr.dx; ml.layer.wr.dy];\r","\r","% Remove NaNs from y and M\r","valid = ~isnan(ovl_vec);\r","y = ovl_vec(valid);\r","M = M(valid, :);\r","\r","\r","\r","function v = sub_get_cols(n)\r","\r","min = sum(0:n)+1;\r","max = sum(0:n+1);\r","v = min:max;\r",""],"CoverageData":{"CoveredLineNumbers":[17,18,20,23,27,30,34,37,38,39,45,46,47],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,6,0,0,34,0,0,0,6,0,0,6,0,0,0,6,0,0,6,6,6,0,0,0,0,0,34,34,34,0]}}