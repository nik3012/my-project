var sourceData534 = {"FileContents":["classdef bmmoADELexpTrajectories < bmmoADELfile\r","%% <help_update_needed>\r","%  for the class and for the function\r","%\r","%   \r","\r","    %%\r","    properties (GetAccess = public, SetAccess = protected)\r","       % these properties are mutually dependent\r","       ml_residual\r","       cet_residual\r","    end\r","    \r","    properties (Constant, Hidden)\r","       MM = 1e3;\r","       NM = 1e9;\r","       NUMBER_CHUCKS = 2;\r","    end    \r","    \r","    %%\r","    methods\r","        function obj = bmmoADELexpTrajectories(config)\r","            obj.xml_data = [];\r","            obj.ml_residual = [];\r","            obj.cet_residual = [];\r","        end\r","    end\r","    \r","    %%\r","    methods        \r","        % read ADELexposureTrajectoriesReportProtected file\r","        function read(obj, filename)\r","          [obj.cet_residual, obj.ml_residual, obj.xml_data] = bmmo_read_adelexposetrajectories(filename);\r","        end\r","        \r","        % set machine name\r","        function setMachineId(obj, machine_name)\r","            obj.xml_data.Header.MachineID = machine_name;\r","        end\r","        \r","        function setVersion(obj, version)\r","           obj.xml_data.Header.DocumentTypeVersion = version;\r","        end \r","        \r","        function create(obj, adel_version)\r","            if nargin < 2\r","                adel_version = 'v1.2';\r","            end\r","            adel_if = bmmoGenericAdelInterface([]);\r","            SINGLE_REPETITION = 1;\r","            obj.xml_data = adel_if.getAdelInstance('ADELexposureTrajectoriesReport', adel_version, SINGLE_REPETITION);          \r","            [obj.cet_residual, obj.ml_residual] = bmmo_parse_adelexposetrajectories(obj.xml_data);\r","        end\r","        \r","        function setXmlData(obj, xml_data)\r","           obj.xml_data = xml_data;\r","           [obj.cet_residual, obj.ml_residual] = bmmo_parse_adelexposetrajectories(obj.xml_data);\r","        end\r","        \r","        function write(obj, filename)\r","            docversion = obj.xml_data.Header.DocumentTypeVersion;\r","            schema_info = sprintf('xsi:schemaLocation=\"http://www.asml.com/XMLSchema/MT/Generic/ADELexposureTrajectoriesReport/%s ADELexposureTrajectoriesReport.xsd\" xmlns:ADELexposureTrajectoriesReport=\"http://www.asml.com/XMLSchema/MT/Generic/ADELexposureTrajectoriesReport/%s\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"', docversion, docversion);\r","            bmmo_xml_save(filename, obj.xml_data, 'ADELexposureTrajectoriesReport:Report', schema_info);            \r","        end\r","\r","        function writeNew(obj, filename)\r","           obj.update_header();\r","           obj.write(filename);\r","        end\r","        \r","        function setMl(obj, ml)\r","           if isempty(obj.xml_data)\r","              obj.create(); \r","           end\r","           obj.ml_residual = ml;\r","           obj.updateXMLFromMl();\r","           obj.cet_residual = bmmo_parse_adelexposetrajectories(obj.xml_data);\r","        end\r","        \r","        function fixCETGrid(obj)\r","           obj.setCETgrid();\r","           [obj.cet_residual, obj.ml_residual] = bmmo_parse_adelexposetrajectories(obj.xml_data);\r","        end\r","        \r","        function updateFromAdeller(obj, adeller)\r","           if isempty(obj.xml_data)\r","               obj.create();\r","           end\r","           obj.updateXMLDataFromAdeller(adeller);\r","        end\r","    end\r","     \r","    %%\r","    methods (Access = private)\r","        function doctime = update_header(obj)\r","\r","            machine_id = obj.xml_data.Header.MachineID;\r","            doctime = now;\r","      \r","            doc_timestr = datestr(doctime, obj.DOCID_DATEFORMAT);        \r","            obj.xml_data.Header.DocumentId = sprintf('ADELexp2-%s-%s', machine_id, doc_timestr);\r","\r","        end\r","        \r","        function setCETgrid(obj)\r","             [xg, yg] = bmmo_cet_grid();\r","             \r","             obj.xml_data.Input.GridList = [];\r","             obj.xml_data.Input.GridList(1).elt.GridId = '1'; % single grid\r","             for ii = 1:numel(xg)\r","                 obj.xml_data.Input.GridList(1).elt.GridDefinition(ii).elt.X = sprintf('%.9f', xg(ii) * obj.MM);\r","                 obj.xml_data.Input.GridList(1).elt.GridDefinition(ii).elt.Y = sprintf('%.9f', yg(ii) * obj.MM);\r","             end\r","             \r","             for iw = 1:numel(obj.xml_data.Results.WaferResultList)\r","                for ifield = 1:numel(obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList)\r","                   \r","                    field_data = ovl_get_fields(ovl_get_wafers(obj.ml_residual, iw), ifield);\r","                    [xgm, ygm, gridmap_index] = bmmo_fix_nd_grid(field_data.wd.xf, field_data.wd.yf);\r","                    dxvec = field_data.layer.wr.dx(gridmap_index);\r","                    dyvec = field_data.layer.wr.dy(gridmap_index);\r","                    \r","                    interp_fn_dx = griddedInterpolant(xgm, ygm, dxvec, 'linear');\r","                    interp_fn_dy = griddedInterpolant(xgm, ygm, dyvec, 'linear');\r","                    dx_new = interp_fn_dx(xg, yg);\r","                    dy_new = interp_fn_dy(xg, yg);\r","                    \r","                    dx_new(isnan(dx_new)) = 0;\r","                    dy_new(isnan(dy_new)) = 0;\r","                    for imark = 1:obj.ml_residual.nmark\r","                       \r","                       obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.Residuals(imark).elt.Dx = sprintf('%.3f', dx_new(imark) * obj.NM);\r","                       obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.Residuals(imark).elt.Dy = sprintf('%.3f', dy_new(imark) * obj.NM);\r","                    end\r","                    \r","                end\r","             end\r","        end\r","         \r","        function updateXMLFromMl(obj)\r","             \r","             % update grid\r","             field_data = ovl_get_fields(ovl_get_wafers(obj.ml_residual, 1), 1);\r","             [xg, yg, gridmap_index] = bmmo_fix_nd_grid(field_data.wd.xf, field_data.wd.yf);\r","             \r","             obj.xml_data.Input.GridList = [];\r","             obj.xml_data.Input.GridList(1).elt.GridId = '1'; % single grid\r","             for ii = 1:numel(xg)\r","                 obj.xml_data.Input.GridList(1).elt.GridDefinition(ii).elt.X = sprintf('%.9f', xg(ii) * obj.MM);\r","                 obj.xml_data.Input.GridList(1).elt.GridDefinition(ii).elt.Y = sprintf('%.9f', yg(ii) * obj.MM);\r","             end\r","             \r","             obj.xml_data.Results.WaferResultList = repmat(obj.xml_data.Results.WaferResultList(1), 1, obj.ml_residual.nwafer);\r","             \r","             % write residuals per wafer\r","             for iw = 1:obj.ml_residual.nwafer\r","                % write residuals per field\r","                obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList = ...\r","                  repmat(obj.xml_data.Results.WaferResultList(1).elt.ImageResultList(1).elt.ExposureResultList(1), 1, obj.ml_residual.nfield);\r","                \r","                for ifield = 1:obj.ml_residual.nfield\r","                   field_data = ovl_get_fields(ovl_get_wafers(obj.ml_residual, iw), ifield);\r","                   obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.FieldPosition.X = sprintf('%.7f', mean(field_data.wd.xc) * obj.MM);\r","                   obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.FieldPosition.Y = sprintf('%.7f', mean(field_data.wd.yc) * obj.MM);\r","                   obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.GridId = '1';\r","                   residual_data = repmat(obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.Residuals(1), 1, obj.ml_residual.nmark);\r","                   dxvec = field_data.layer.wr.dx(gridmap_index);\r","                   dyvec = field_data.layer.wr.dy(gridmap_index);\r","                   dxvec(isnan(dxvec)) = 0;\r","                   dyvec(isnan(dyvec)) = 0;\r","                   for imark = 1:obj.ml_residual.nmark\r","                       \r","                       residual_data(imark).elt.Dx = sprintf('%.3f', dxvec(imark) * obj.NM);\r","                       residual_data(imark).elt.Dy = sprintf('%.3f', dyvec(imark) * obj.NM);\r","                   end\r","                   obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.Residuals = residual_data;\r","                   obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(ifield).elt.Corrections = residual_data; % in case some validation is done\r","                end\r","             end\r","         end\r","         \r","         \r","         function updateXMLDataFromAdeller(obj, adeller)\r","             if ischar(adeller)\r","                adeller = xml_load(adeller); \r","             end\r","             \r","             obj.xml_data.Header.MachineID = adeller.Header.MachineID;\r","             obj.xml_data.Header.MachineType = adeller.Header.MachineType;\r","             obj.xml_data.Header.MachineCustomerName = adeller.Header.MachineCustomerName;\r","             obj.xml_data.Header.CreateTime = adeller.Header.CreateTime;\r","             obj.xml_data.Header.SoftwareRelease = adeller.Header.SoftwareRelease;\r","             \r","             obj.xml_data.DocumentMetaData.LotId = adeller.Input.LotId;\r","             all_reports = [adeller.Results.DataReportList.elt];\r","             adelexp_index = find(strcmp({all_reports.DocumentType}, 'ADELexposureTrajectoriesReportProtected'));\r","             if ~isempty(adelexp_index)\r","                 obj.xml_data.Header.DocumentId = all_reports(adelexp_index(1)).ReportUuid;\r","             else\r","                obj.xml_data.Header.DocumentId = sprintf('%s', obj.xml_data.Header.MachineID);\r","             end\r","                 \r","             nwafer = numel(adeller.Results.WaferResultList);\r","             assert(nwafer == numel(obj.xml_data.Results.WaferResultList), 'Mismatch in number of wafers');\r","             for iw = 1:nwafer\r","                obj.xml_data.Results.WaferResultList(iw).elt.WaferId = adeller.Results.WaferResultList(iw).elt.WaferId;\r","                obj.xml_data.Results.WaferResultList(iw).elt.WaferSeqNr = adeller.Results.WaferResultList(iw).elt.WaferSeqNr;\r","                obj.xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ImageId = adeller.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ImageId;\r","             end\r","         end\r","     end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[23,24,25,33,38,42,46,47,49,50,51,52,56,57,61,62,63,67,68,72,73,75,76,77,81,82,86,87,89,97,98,100,101,106,108,109,110,111,112,115,116,118,119,120,121,123,124,125,126,128,129,130,132,133,143,144,146,147,148,149,150,153,156,158,159,161,162,163,164,165,166,167,168,169,170,171,173,174,176,177,184,185,188,189,190,191,192,194,195,196,197,198,199,200,203,204,205,206,207,208],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}