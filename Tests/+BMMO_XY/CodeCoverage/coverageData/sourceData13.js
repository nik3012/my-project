var sourceData13 = {"FileContents":["function [mlo, ml_intra] = bmmo_INTRAF_par_fingerprint(mli, fingerprint, options)\r","% function [mlo, ml_intra] = bmmo_INTRAF_par_fingerprint(mli, fingerprint, options)\r","%\r","% This function returns an ml structure corresponding to the input SBC\r","% INTRAF fingerprint. It will calculate 18par or 33par of the input\r","% fingerprint, depending on options.intraf_CETpar.name, and distribute it\r","% onto mli.\r","%\r","% Input:\r","% mli: input ml structure\r","% fingerprint: INTRAF fingerprint (1x2 struct array)\r","% options: BMMO/BL3 options structure\r","%\r","% Output:\r","% mlo: output ml structure containing the INTRAF fingerprint in the same layout as mli\r","% ml_intra: INTRAF fingerprint in same layout as mli, averaged per chuck\r","\r","mlo = mli;\r","\r","for ichuck = options.chuck_usage.chuck_id_used\r","    % get the 18/33 par correctible\r","    ml_field_avg_chk  = sub_ffp_2_ml(fingerprint(ichuck));\r","    [~, parlist] = ovl_model(ml_field_avg_chk, options.intraf_CETpar.name);\r","  \r","    % add 18/33 pars to the input structure\r","    wafer_on_this_chuck = find(options.chuck_usage.chuck_id == ichuck);\r","    for iwafer = 1:length(wafer_on_this_chuck)\r","        for ilayer = 1:length(mli.layer)\r","            corr_FP = ovl_combine_linear(ovl_get_subset(mli, 1, wafer_on_this_chuck(iwafer)), 0);\r","            corr_FP = ovl_model(corr_FP, 'apply', parlist);\r","            mlo.layer(ilayer).wr(wafer_on_this_chuck(iwafer)).dx = corr_FP.layer.wr.dx;\r","            mlo.layer(ilayer).wr(wafer_on_this_chuck(iwafer)).dy = corr_FP.layer.wr.dy;\r","        end\r","    end\r","    ml_intra(ichuck) = ovl_average_fields(corr_FP);\r","end\r","\r","\r","function ml = sub_ffp_2_ml(ffp)\r","\r","ml.wd.xf = ffp.x;\r","ml.wd.yf = ffp.y;\r","ml.wd.xc = zeros(size(ffp.x));\r","ml.wd.yc = ml.wd.xc;\r","ml.wd.xw = ml.wd.xf;\r","ml.wd.yw = ml.wd.yf;\r","\r","ml.nwafer = 1;\r","ml.nlayer = 1;\r","ml.nmark = length(ml.wd.xf);\r","ml.nfield = 1;\r","ml.tlgname = '';\r","\r","ml.layer.wr.dx = ffp.dx;\r","ml.layer.wr.dy = ffp.dy;\r",""],"CoverageData":{"CoveredLineNumbers":[18,20,22,23,26,27,28,29,30,31,32,35,41,42,43,44,45,46,48,49,50,51,52,54,55],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,518,0,518,0,1012,1012,0,0,1012,1012,2660,2660,2660,2660,2660,0,0,1012,0,0,0,0,0,1012,1012,1012,1012,1012,1012,0,1012,1012,1012,1012,1012,0,1012,1012,0]}}