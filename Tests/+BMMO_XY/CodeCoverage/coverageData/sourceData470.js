var sourceData470 = {"FileContents":["function [fp_struct, ff_6p] = bmmo_apply_SBC_core(mlp, corr, factor, options)\r","% function fp_struct = bmmo_apply_SBC(ml_template, corr, factor)\r","%\r","% Core function to simulate SBC actuation. Do not use this function\r","% directly, but call it's wrapper functions (e.g. bmmo_apply_SBC)\r","%\r","% Input: \r","%   mlp: template ml structure\r","%   corr: a valid correction set from the BMMO-NXE drift control model,\r","%       e.g. the output of bmmo_nxe_drift_control_model (out.corr) or\r","%       bmmo_kt_process_SBC2\r","%   factor: A constant factor to apply to the fingerprints (default = 1)\r","%   options: bmmo/bl3 options structure\r","%\r","% Output:\r","%   fp_struct: structure containing the following (all ml structures, same layout as ml_template)\r","%       WH: wafer heating fingerprint\r","%       MI:  Mirror fingerprint \r","%       KA: KA fingerprint \r","%       BAO:  BAO fingerprint \r","%       INTRAF: INTRAF fingerprint\r","%       TotalSBCcorrection: sum of the other fingerprints\r","%   ff_6p: 6par feedforward BAO fingerprint from MI@M & KA@M corrections\r","%\r","\r","wafer_radius_in_m = options.wafer_radius_in_mm*1e-3;\r","mlo = ovl_create_dummy(mlp);\r","\r","% Backward compatibility check, to be removed in later update\r","if isfield(corr, 'SUSD')\r","    fp_struct.SUSD = bmmo_SUSD_SBC_fingerprint(mlp, corr.SUSD, options);\r","    mlo = ovl_add(mlo, fp_struct.SUSD);\r","end\r","\r","fp_struct.KA = ovl_remove_edge(bmmo_KA_SBC_fingerprint(mlp, corr.KA.grid_2de, options), wafer_radius_in_m);\r","mlo = ovl_add(mlo, fp_struct.KA);\r","\r","fp_struct.MI = ovl_remove_edge(bmmo_MI_SBC_fingerprint(mlp, corr.MI.wse, options), wafer_radius_in_m);\r","mlo = ovl_add(mlo, fp_struct.MI);\r","\r","fp_struct.BAO = ovl_remove_edge(bmmo_BAO_SBC_fingerprint(mlp, corr.BAO, options), wafer_radius_in_m);\r","mlo = ovl_add(mlo, fp_struct.BAO);\r","\r","fp_struct.INTRAF = ovl_remove_edge(bmmo_INTRAF_SBC_fingerprint(mlp, corr.ffp, options), wafer_radius_in_m);\r","mlo = ovl_add(mlo, fp_struct.INTRAF);\r","\r","options.previous_correction.IR2EUV = corr.IR2EUV;\r","fp_struct.WH = ovl_remove_edge(bmmo_WH_SBC_fingerprint(mlp, options), wafer_radius_in_m);\r","mlo = ovl_add(mlo, fp_struct.WH);\r","\r","% subtract the ff 6par correction\r","ff_6p = bmmo_ff_6par_fingerprint(mlp, corr.MI.wsm, corr.KA.grid_2dc, options);\r","mlo = ovl_sub(mlo, ff_6p);\r","fp_struct.BAO = ovl_sub(fp_struct.BAO, ff_6p);\r","\r","fp_struct.TotalSBCcorrection = mlo;\r","\r","% apply a constant factor (e.g. -1) to the fingerprints if specified\r","fn = fieldnames(fp_struct);\r","for ifield = 1:length(fn)\r","    fp_struct.(fn{ifield}) = ovl_combine_linear(fp_struct.(fn{ifield}), factor);\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[26,27,30,31,32,35,36,38,39,41,42,44,45,47,48,49,52,53,54,56,59,60,61],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,0,0,29,29,29,0,0,29,29,0,29,29,0,29,29,0,29,29,0,29,29,29,0,0,29,29,29,0,29,0,0,29,29,203,0,0]}}