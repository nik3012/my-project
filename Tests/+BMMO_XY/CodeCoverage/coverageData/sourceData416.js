var sourceData416 = {"FileContents":["function [found, reticle_layout, x_shift, y_shift] = bmmo_guess_reticle_layout(mli)\r","% function [found, reticle_layout, x_shift, y_shift] = bmmo_guess_reticle_layout(mli)\r","%\r","% Guess the reticle layout of the input overlay structure by comparing with\r","% supported layouts in ovl_create_dummy\r","%\r","% The supported layouts are\r","% '13X19', '13X7', '25', '5X7', '7X7', '14X21', '12X18', '7X19', 'S-5', '25-SMALL', ...\r","% '83', '5-SMALL', 'S-4X4', '13X10', ...\r","% 'BA-XY-SGV'                'BA-XY-SGV-FF'            'BA-XY-SGV-FF-ALL', ...\r","%    'BA-XY-SGV-4'              'BA-XY-STAT-13X1'         'BA-XY-STAT-13X3', ...\r","%    'BA-XY-STAT-13X3_WIDE'     'BA-XY-STAT-13X7'         'BA-XY-STAT-46', ...\r","%    'XY49-SLT-5X5'             'BA-XY-NARROW-7X19'       'BA-SUSD-FULL'\r","%\r","% If the layout is not found, a layout based on the xf.yf values of the\r","% input will be used.\r","%\r","% Input: \r","%   mli: overlay structure\r","%\r","% Output\r","%   found: boolean flag to indicate if supported layout is found\r","%   reticle_layout: reticle_layout value compatible with ovl_create_dummy\r","%       input\r","%   x_shift: x field shift from origin, assuming symmetric layout, in\r","%       metres\r","%   y_shift: y field shift from origin, assuming symmetric layout, in\r","%       metres\r","%\r","% 20170519 SBPR Added documentation\r","    \r","\r","ml_field = ovl_get_fields(ovl_get_wafers(ovl_get_layers(mli, 1),1),1);\r","\r","% layouts taken from ovl_create_dummy_definition\r","supported_layouts = {'13X19', '13X7', '25', '5X7', '7X7', '14X21', '12X18', '7X19', 'S-5', '25-SMALL', ...\r","'83', '5-SMALL', 'S-4X4', '13X10', ...\r","'BA-XY-SGV'                'BA-XY-SGV-FF'            'BA-XY-SGV-FF-ALL', ...\r","   'BA-XY-SGV-4'              'BA-XY-STAT-13X1'         'BA-XY-STAT-13X3', ...\r","   'BA-XY-STAT-13X3_WIDE'     'BA-XY-STAT-13X7'         'BA-XY-STAT-46', ...\r","   'XY49-SLT-5X5'             'BA-XY-NARROW-7X19'       'BA-SUSD-FULL' };  \r","\r","\r","reticle_layout = '';\r","found = 0;\r","i_layout = 1;\r","mlo = mli;\r","\r","[x_shift, y_shift] = sub_find_shift_layout(ml_field);\r","\r","while(~found && i_layout <= length(supported_layouts)) \r","    dummy_field = ovl_get_fields(ovl_create_dummy('marklayout', supported_layouts{i_layout}, 'nwafer', 1, 'nlayer', 1),1);\r","    \r","    found = sub_map_field_layouts(ml_field, dummy_field, x_shift, y_shift);\r","    \r","    if(found)\r","        reticle_layout = supported_layouts{i_layout};        \r","    end\r","    i_layout = i_layout + 1;\r","end\r","\r","if ~found\r","    warning('layout not found in supported layouts within tolerance level 12: using basic layout');\r","    reticle_layout = [ml_field.wd.xf ml_field.wd.yf] * 1e3; % convert to mm for ovl_create_dummy\r","    x_shift = 0;\r","    y_shift = 0;\r","    found = 1;\r","end\r","\r","\r","function [x_shift, y_shift] = sub_find_shift_layout(ml_field)\r","\r","x_shift = mean(ml_field.wd.xf);\r","y_shift = mean(ml_field.wd.yf);\r","\r","function [found, sortid] = sub_map_field_layouts(ml_field, dummy_field, x_shift, y_shift)\r","\r","TOL = 12;\r","\r","xf_shifted = ml_field.wd.xf - x_shift;\r","yf_shifted = ml_field.wd.yf - y_shift;\r","\r","xfyf = [xf_shifted yf_shifted];\r","\r","xfdyfd = [dummy_field.wd.xf, dummy_field.wd.yf];\r","\r","[test_membership, sortid] = ismember(round(xfyf,TOL), round(xfdyfd, TOL), 'rows');\r","test_reverse = ismember(round(xfdyfd,TOL), round(xfyf, TOL), 'rows');\r","\r","found = all(test_membership) & all(test_reverse);\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[33,36,44,45,46,47,49,51,52,54,56,57,59,62,63,64,65,66,67,73,74,78,80,81,83,85,87,88,90],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}