var sourceData106 = {"FileContents":["function [ml_res, ka_grid_out, ml_KA] = bmmo_generate_grid(mli, fit_coeffs, options)\r","% function [ml_res, ka_grid_out, ml_KA] = bmmo_generate_grid(mli, fit_coeffs, options)\r","%\r","% This function evaluates the fitted KA coefficients on to te KA grid\r","% layout. It uses the same algorithm as NXE3400/3600 for actuating KA\r","% corrections\r","%\r","% Input:\r","% mli: input ml struct\r","% fit_coeffs: KA fit coefficients from as ouput by bmmo_combined_model\r","% options\r","%\r","% Output:\r","% ml_res: Residue after KA model\r","% ka_grid_out: modeled KA grid\r","% ml_KA:  modeled KA fpt on mli layout\r","%\r","% For details of the model and definitions of in/out interfaces, refer to\r","% D000810611 EDS BMMO NXE drift control model\r","\r","if nargin < 3\r","    options = bmmo_default_options_structure;\r","end\r","\r","% create zeroed KA grid using defined KA pitch\r","ka_grid = bmmo_KA_grid(options.KA_start, options.KA_pitch);\r","\r","ml_target = bmmo_KA_grid_to_ml(ka_grid);\r","\r","if any(contains(options.submodel_sequence,'MIKA_EDGE'))\r","    fps_ka = bmmo_construct_FPS_KA(ml_target, options);\r","    fps_edge = bmmo_construct_FPS_GaussianEDGE(ml_target, options);\r","    fps = [fps_ka fps_edge];\r","else\r","    fps = bmmo_construct_FPS_KA(ml_target, options);\r","end\r","\r","for i = 1:length(fps)\r","    M(:, i) = sub_make_columns(fps{i});\r","end\r","\r","ovl = M*fit_coeffs;\r","\r","% copy distortion map from resampled input into KA grid\r","ml_target.layer.wr.dx = ovl(1:length(ovl)/2);\r","ml_target.layer.wr.dy = ovl(length(ovl)/2 + 1:end);\r","\r","if any(contains(options.submodel_sequence,'MIKA_EDGE'))\r","    ml_target = ovl_remove_edge(ml_target, options.edge_clearance);\r","    ml_target = bmmo_extrapolate_nan(ml_target, 'nearest');\r","    [~, coeff_10par_KA_bound] = bmmo_fit_model(ovl_remove_edge(ml_target, options.KA.BAO_edge_removal), options, '10par');\r","    ml_target = bmmo_apply_model(ml_target, coeff_10par_KA_bound, -1, options);\r","    ml_target = ovl_remove_edge(ml_target, options.KA_bound); % in case EFO workaround implemeted on LCP\r","else\r","    ml_target = bmmo_fit_model(ml_target, options, '10par');\r","end\r","\r","ka_grid_out = bmmo_mlKA_to_grid(ml_target);\r","\r","% subtract the modelled KA grid to get the residual\r","ml_KA = feval(options.KA_actuation.fnhandle, ka_grid_out, mli, options);\r","ml_res = ovl_sub(mli, ml_KA);\r","\r","function o = sub_make_columns(mli)\r","\r","o = [mli.layer.wr.dx ; mli.layer.wr.dy];"],"CoverageData":{"CoveredLineNumbers":[21,26,28,30,34,35,38,39,42,45,46,48,54,55,58,61,62,66],"UnhitLineNumbers":[22,31,32,33,49,50,51,52,53],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,14,0,14,0,14,0,0,0,14,14,0,0,14,392,0,0,14,0,0,14,14,0,14,0,0,0,0,0,14,14,0,0,14,0,0,14,14,0,0,0,392]}}