var sourceData318 = {"FileContents":["classdef testBmmoParsToKFactorMatrix < BMMO_XY.tools.testSuite\r","    \r","    methods(Static)\r","        \r","        %% Sub function\r","        function pars = sub_get_pars(val)\r","            parnames = {'K1', 'K2', 'ms', 'ma', 'rs', 'ra', 'K7', 'K8', 'K9', 'K10', ...     % return a valid parameter structure with all fields filled in with\r","                'K11', 'K12', 'K14', 'K15', 'K16', 'K17', 'K18', 'K19'};                     % incremental numbers starting from val + 1\r","            for ik = 1:length(parnames)\r","                pars.(parnames{ik}) = val + ik;\r","            end\r","        end\r","        \r","    end\r","    \r","    methods(Test)\r","        \r","        %% sanity check on data\r","        function Case1(obj)\r","            % Given\r","            numk = 18;\r","            nfield = 89;\r","            nmark = 247;\r","            UM = 1;         % SBPR 20160412: remove scaling\r","            for ifield = nfield:-1:1\r","                wafer.field(ifield) = obj.sub_get_pars(ifield * numk);\r","            end\r","            kmatrix  = bmmo_pars_to_k_factor_matrix(wafer.field, nmark, nfield);\r","            \r","            % When\r","            [nrow, ncol] = size(kmatrix);\r","            \r","            % Then\r","            obj.verifyTrue(nrow == numk);\r","            obj.verifyTrue(ncol == nfield * nmark);\r","            \r","            %%\r","            % Given\r","            for ik = 3:6                        % check that conversion is correct\r","                krow = kmatrix(ik, :)';         % get the values per field\r","                krow_fields = reshape(krow, nmark, nfield);\r","                krow_fields = krow_fields(1, :);\r","                for ifield = 1:nfield\r","                    ms = (ifield * numk) + 3;   % get the base values of this par per field\r","                    ma = (ifield * numk) + 4;\r","                    rs = (ifield * numk) + 5;\r","                    ra = (ifield * numk) + 6;\r","                    switch ik\r","                        case 3                            \r","                            % When\r","                            k3 = (ms + ma) * UM;\r","                            \r","                            % Then\r","                            obj.verifyTrue(abs(krow_fields(ifield) - k3) < eps);\r","                            \r","                            %%\r","                        case 4                            \r","                            % When\r","                            k4 = (ms - ma) * UM;\r","                            \r","                            % Then\r","                            obj.verifyTrue(abs(krow_fields(ifield) - k4) < eps);\r","                            \r","                            %%\r","                        case 5                            \r","                            % When\r","                            k5 = (-rs -ra) * UM;\r","                            \r","                            % Then\r","                            obj.verifyTrue(abs(krow_fields(ifield) - k5) < eps);\r","                            \r","                            %%\r","                        case 6                            \r","                            % When\r","                            k6 = (rs - ra) * UM;\r","                            \r","                            % Then\r","                            obj.verifyTrue(abs(krow_fields(ifield) - k6) < eps);\r","                    end\r","                end\r","            end\r","            \r","            %%\r","            for ik = [1:2, 7:18]                \r","                % When\r","                sortedrow = sort(kmatrix(ik, :));       % check that order of fields in remaining matrix is correct becase of\r","                                                        % the initialised par values, each row should already be in sorted order\r","                % Then\r","                obj.verifyTrue(isequal(sortedrow, kmatrix(ik, :)));\r","            end\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[7,9,10,21,22,23,24,25,26,28,31,34,35,39,40,41,42,43,44,45,46,47,48,49,51,54,57,59,62,65,67,70,73,75,78,84,86,89],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,89,0,89,1602,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,89,0,1,0,0,1,0,0,1,1,0,0,0,1,4,4,4,4,356,356,356,356,356,356,0,89,0,0,89,0,0,267,0,89,0,0,89,0,0,178,0,89,0,0,89,0,0,89,0,89,0,0,89,0,0,0,0,0,1,0,14,0,0,14,0,0,0,0,0,0]}}