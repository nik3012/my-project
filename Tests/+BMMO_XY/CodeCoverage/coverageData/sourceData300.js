var sourceData300 = {"FileContents":["classdef testBmmoInvalidInput < BMMO_XY.tools.testSuite\r","    \r","    %% Sub function\r","    methods(Static)\r","        \r","        function mlo = sub_set_wafers_nan(ml, wafers)\r","            \r","            mlo = ml;\r","            for iw = 1:length(wafers)\r","                mlo.layer.wr(wafers(iw)).dx = nan *  ml.wd.xw;\r","                mlo.layer.wr(wafers(iw)).dy = nan * ml.wd.xw;\r","            end\r","        end\r","        \r","    end\r","    \r","    methods(Test)\r","        \r","        %% All marks NaN on one wafer\r","        function test_bmmo_one_invalid_wafer(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);            \r","            for iw = 1:ml.nwafer\r","                \r","                % When\r","                mlt = obj.sub_set_wafers_nan(ml, iw);\r","                \r","                % Then\r","                out = bmmo_nxe_drift_control_model(mlt);    %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);\r","            end\r","        end\r","        \r","        %% All marks NaN on one wafer per chuck\r","        function test_bmmo_one_invalid_per_chuck(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);                 % generate permutations of chuck wafers\r","            c1 = [1 3 5];\r","            c2 = [2 4 6];\r","            [c1g, c2g] = meshgrid(c1, c2);\r","            w_perm = [c1g(:) c2g(:)];            \r","            for iw = 1:size(w_perm, 1)\r","                \r","                % When\r","                mlt = obj.sub_set_wafers_nan(ml, w_perm(iw, :));\r","                \r","                % Then\r","                out = bmmo_nxe_drift_control_model(mlt);    %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);                \r","            end\r","        end\r","        \r","        %% Two wafers NaN on a chuck\r","        function test_bmmo_two_invalid_on_chuck(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);                 % generate permutations of 2 wafers on a single chuck\r","            c1 = combnk([1 3 5], 2);\r","            c2 = combnk([2 4 6], 2);\r","            w_perm = [c1; c2];            \r","            for iw = 1:size(w_perm, 1)\r","                \r","                % When\r","                mlt = obj.sub_set_wafers_nan(ml, w_perm(iw, :));\r","                \r","                % Then\r","                out = bmmo_nxe_drift_control_model(mlt);    %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);                \r","            end\r","        end\r","        \r","        %% Two wafers NaN on two chucks\r","        function test_bmmo_two_invalid_both_chuck(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml);            \r","            p = combnk([1 3 5], 2);                         % generate permutations of 2 wafers on two chucks\r","            q = combnk([2 4 6], 2);\r","            [t1, t2] = meshgrid(1:3, 1:3);\r","            t = [t1(:) t2(:)];\r","            w_perm = [p(t(:,1), :) q(t(:,2), :)];            \r","            for iw = 1:size(w_perm, 1)\r","                \r","                % When\r","                mlt = obj.sub_set_wafers_nan(ml, w_perm(iw, :));\r","                \r","                % Then\r","                out = bmmo_nxe_drift_control_model(mlt);    %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);        \r","            end            \r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,22,23,24,27,30,37,38,39,40,41,42,43,46,49,56,57,58,59,60,61,64,67,74,75,76,77,78,79,80,81,84,87],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,30,30,72,72,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,6,0,0,6,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,9,0,0,9,0,0,0,0,0,0,1,1,1,1,1,1,0,0,6,0,0,6,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,9,0,0,9,0,0,0,0,0,0,0]}}