var sourceData232 = {"FileContents":["function xmlFileDecrypted = decrypt(xmlFile)\r","% function xmlFileDecrypted = decrypt(xmlFile)\r","%\r","% Function that takes a protected ADEL or IDAT and decrypts it using\r","% ADELDecryptor, ADD or the XMLschema ADELdecryptor and outputs the\r","% full path of the decrypted file\r","%\r","% Input:\r","% xmlFile               [ char array ]        full path of the protected ADEL- or IDAT-file\r","%\r","% Output:\r","% xmlFileDecrypted      [ char array ]        full path of the decrypted ADEL- or IDAT-file\r","%\r","\r","\r","% Get the paths the ADEL/IDAT file to decrypt and create the names of the\r","% decrypted files\r","[~, xmlFileDecrypted, ~] = sub_getDecrypedFilePath(xmlFile, tempdir);\r","\r","% Check whether the decrypted file already exists in the folder, then no\r","% decryption is required.\r","if isfile(xmlFileDecrypted)\r","    return\r","end\r","\r","% Load the configuration\r","config = bmmoDecrypterConfig('decrypterConfiguration.json');\r","\r","% Create the input for the decryption and the output file-location for when there\r","% is no write-access in the folder and do the decryption\r","switch config.decryptionMethod\r","    case 'ADELDecryptor'\r","        xmlFileDecrypted = sub_winDecryption(config.decrypterExecutable, xmlFile, '\"%s\" -i:\"%s\" -o:\"%s\"', tempdir);\r","    case 'ADD'\r","        xmlFileDecrypted = sub_winDecryption(config.decrypterExecutable, xmlFile, '\"%s\" -i \"%s\" -o \"%s\"', getenv('TMP'));\r","    otherwise\r","        xmlFileDecrypted = sub_linuxDecryption(config.token, config.comment, xmlFile, tempdir);\r","end\r","\r","end\r","\r","\r","function xmlFileDecrypted = sub_winDecryption(decrypterExecutable, xmlFile, decryptionInput, tempdirPath)\r","\r","import BMMO_XY.tools.*\r","\r","% Get the filepath and construct the paths for the decrypted file\r","[filePath, xmlFileDecrypted, xmlFileDecryptedTemp] = sub_getDecrypedFilePath(xmlFile, tempdirPath);\r","\r","% Decrypt and place the file in the same location as the protected file\r","[~, ~] = system(sprintf(decryptionInput, decrypterExecutable, xmlFile, filePath));\r","\r","% If there is no write-access, status code 20 will be thrown for\r","% ADELdecryptor. Currently (15-12-2022), ADD is bugged and will always\r","% throw status code 0, therefore we check whether the decrypted file\r","% exists, instead of checking the status.\r","\r","if ~isfile(xmlFileDecrypted)\r","    \r","    % Check if the file exists in the temporary directory, delete it if it does\r","    if isfile(xmlFileDecryptedTemp)\r","        delete(xmlFileDecryptedTemp);\r","    end\r","    \r","    % Decrypt and place the file in the temp directory\r","    [status, ~] = system(sprintf(decryptionInput, decrypterExecutable, xmlFile, tempdirPath));\r","    \r","    if isfile(xmlFileDecryptedTemp)\r","        xmlFileDecrypted = xmlFileDecryptedTemp;\r","\r","        warning('No write access to folder of inputfile, placed decrypted file in folder: %s', tempdirPath);\r","    else\r","        error(getErrorId('noFile'), 'Decryption was unsuccessful, status code: %s (%s)', string(status), decrypterExecutable);\r","    end\r","end\r","\r","end\r","\r","\r","function xmlFileDecrypted = sub_linuxDecryption(token, comment, xmlFile, tempdirPath)\r","\r","import BMMO_XY.tools.*\r","\r","% Get the filepath and construct the paths for the decrypted file\r","[~, xmlFileDecrypted, xmlFileDecryptedTemp] = sub_getDecrypedFilePath(xmlFile, tempdirPath);\r","\r","% URL of the decryption service\r","url = 'https://crypto.asml.com/ADD/decrypt';\r","\r","% Construct the command to decrypt\r","baseCommand = sprintf('curl -A \"FC-065/%s\" -H \"token: %s\" -H \"streaming: yes\" -F \"file=@%s\" -o %s %s', ...\r","                      comment, ...\r","                      token, ...\r","                      '%s', ...\r","                      '%s', ...\r","                      url);\r","\r","% Construct the full command\r","shellCommand = sprintf(baseCommand, xmlFile, xmlFileDecrypted);\r","\r","% Decrypt and place the file in the same location as the protected file\r","[status, msg] = system(shellCommand);\r","\r","% If the status is 23, that means that the output directory is read only\r","if status == 23\r","\r","    % Construct the full command with the output located in the temporary\r","    % directory\r","    shellCommand = sprintf(baseCommand, xmlFile, xmlFileDecryptedTemp);\r","\r","    % Decrypt and place the file in the temp directory\r","    [status, msg] = system(shellCommand);\r","\r","    % Point to the temporary directory\r","    xmlFileDecrypted = xmlFileDecryptedTemp;\r","    \r","    warning('No write access to folder of inputfile, placed decrypted file in folder: %s', tempdirPath);\r","end\r","\r","% Print debug information to STDOUT\r","debugEnv = getenv('BMMO_XY_DECRYPT_DEBUG');\r","if ~isempty(debugEnv) && strcmp(debugEnv, 'true')\r","    disp([newline newline 'BMMO_XY_DECRYPT_DEBUG output:' newline shellCommand newline]);\r","end\r","\r","if status ~= 0\r","    error(getErrorId('nonZeroStatus'), 'Decryption was unsuccessful, status code: %s, message: %s (%s)', string(status), msg, url);\r","end\r","\r","end\r","\r","\r","function [filePath, xmlFileDecrypted, xmlFileDecryptedTemp] = sub_getDecrypedFilePath(xmlFile, tempdirPath)\r","\r","[filePath, fileName, fileExt] = fileparts(xmlFile);\r","\r","xmlFileDecrypted     = [filePath filesep fileName '_decrypted' fileExt];\r","xmlFileDecryptedTemp = [tempdirPath filesep fileName '_decrypted' fileExt];\r","\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[18,22,27,31,32,34,35,48,51,58,135,137,138],"UnhitLineNumbers":[23,33,36,37,61,62,66,68,69,71,72,73,85,88,91,92,93,96,99,102,105,109,112,115,117,121,122,123,126,127],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,3,0,0,0,3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,0]}}