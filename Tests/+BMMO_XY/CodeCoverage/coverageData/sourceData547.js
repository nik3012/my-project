var sourceData547 = {"FileContents":["function [ml_all, invalids] = bmmo_convert_wdm_to_ml(adelwdm, load_invalids, use_meas_layout, skip_reconstruction)\r","% function ml_all = bmmo_convert_wdm_to_ml(adel_wdm)\r","%\r","% Load all the waferdata maps from an ADELwaferdatamap xml file into an ml\r","% structure\r","%\r","% If the function is run without any input, a dialog box is opened to choose the\r","% options\r","%\r","% Input:    adelwdm: full path of ADEL_waferdatamap file\r","%           load_invalids: If set to 1, the invalid measurements will be\r","%                          loaded as valids\r","%           use_meas_layout: If set to 1, uses the RIT target as center,\r","%                            otherwise XPA\r","%\r","% Output:   ml_all:  matlab struct containing all the different waferdatamaps\r","%                    as substructures in the ml format\r","%\r","% 20190726 SELR creation based on code from JIMI\r","\r","if nargin < 2\r","    load_invalids = 0;\r","end\r","if nargin < 3\r","    use_meas_layout = 1;\r","end\r","if nargin < 4\r","    skip_reconstruction = 0;\r","end\r","\r","\r","if ischar(adelwdm)\r","    data = xml_load(adelwdm);\r","else\r","    data = adelwdm;\r","end\r","\r","if length(data.Body.WaferLayoutDefinitionList) > 1\r","    WL_data = data.Body.WaferLayoutDefinitionList(2).elt.FieldList;\r","else\r","    WL_data = data.Body.WaferLayoutDefinitionList.elt.FieldList;\r","end\r","for ii=1:length(WL_data)\r","    f_id = str2double(WL_data(ii).elt.Id);\r","    xc_F(f_id) = str2double(WL_data(f_id).elt.Position.X)*1e-3;\r","    yc_F(f_id) = str2double(WL_data(f_id).elt.Position.Y)*1e-3;\r","end\r","\r","ml_all=[];\r","ml_all.mid = data.Header.MachineID;\r","if isfield(data.Body, 'JobId')\r","    ml_all.jid = data.Body.JobId;\r","end\r","\r","Allmaps= data.Body.WaferDataSetList;\r","% clear data\r","\r","for i=1:length(Allmaps)\r","    \r","    if length(Allmaps(i).elt.WaferDataList) == 2 \r","        Chk_all = sub_get_ChuckId(Allmaps(i).elt.WaferDataList);\r","    else\r","        Chk_all = sub_get_WaferId(Allmaps(i).elt.WaferDataList);\r","    end\r","    \r","    MapName = matlab.lang.makeValidName(Allmaps(i).elt.Definition.Name);\r","    for j = 1:length(Allmaps(i).elt.WaferDataList)\r","        \r","        Chk = Chk_all(j);\r","        map = Allmaps(i).elt.WaferDataList(Chk).elt.DataValueList;\r","        mlt=sub_get_ml(map, xc_F, yc_F);\r","        \r","        % Load invalids\r","        invalidx = arrayfun(@(x) isfield(x.elt.Overlay.X, 'InvalidationReasonId'), map);\r","        invalidy = arrayfun(@(x) isfield(x.elt.Overlay.Y, 'InvalidationReasonId'), map);\r","        \r","        invalidx = invalidx';\r","        invalidy = invalidy';\r","        \r","        invalidation_reason_id = arrayfun(@(x) str2double(x.elt.Overlay.X.InvalidationReasonId), map(invalidx));\r","        invalidation_reason_id2 = arrayfun(@(x) str2double(x.elt.Overlay.Y.InvalidationReasonId), map(invalidy));\r","\r","        if ~load_invalids\r","            mlt.layer.wr.dx(invalidx) = NaN;\r","            mlt.layer.wr.dy(invalidy) = NaN;\r","        end\r","        \r","        \r","        if ~skip_reconstruction\r","            dummy_in = bmmo_default_input;\r","            mlt.expinfo = dummy_in.expinfo;\r","            options = bmmo_default_options_structure;\r","            try\r","                options = bmmo_get_xy_shift(mlt, options);\r","            catch\r","                warning('You better be importing s2f data or something :)')\r","            end\r","            mlo = bmmo_field_reconstruction(mlt, options);\r","            if use_meas_layout\r","                mlo = bmmo_shift_fields(mlo, options.x_shift, options.y_shift);\r","            end\r","        else\r","            mlo = mlt;\r","        end\r","        \r","        try\r","            for iwafer = 1:mlo.nwafer\r","                assert(sum(~isnan(mlo.layer.wr(iwafer).dx)) == sum(~isnan(mlt.layer.wr(iwafer).dx)));\r","            end\r","        catch\r","            warning('Some marks were lost during mapping')\r","        end\r","        \r","        ml_all.(MapName)(j) = mlo;\r","        invalid = invalidx & invalidy;\r","        if sum(invalid) > 0\r","            wc_invalid = [invalidation_reason_id' mlt.wd.xw(invalid), mlt.wd.yw(invalid) invalidation_reason_id2'];\r","            invalids.(MapName)(j).invalid = wc_invalid;\r","            invalids.(MapName)(j).chk = Chk;\r","        end\r","        \r","    end\r","end\r","if exist('invalids','var')\r","ml_all.invalids = invalids;\r","end\r","\r","\r","function mlo = sub_get_ml(data, xc_F, yc_F)\r","map=data;\r","nwafer=1;\r","for kk=1:length(map)\r","    f_id = str2double(map(kk).elt.IntrafieldPosition.FieldId);\r","    xf(kk) = str2double(map(kk).elt.IntrafieldPosition.Position.X)*1e-3;\r","    yf(kk) = str2double(map(kk).elt.IntrafieldPosition.Position.Y)*1e-3;\r","    if ~isempty(map(kk).elt.Overlay.X)\r","        dx(kk) = str2double(map(kk).elt.Overlay.X.Value) * 1e-9;\r","    else\r","        dx(kk) = NaN;\r","    end\r","    if ~isempty(map(kk).elt.Overlay.Y)\r","        dy(kk) = str2double(map(kk).elt.Overlay.Y.Value) * 1e-9;\r","    else\r","        dy(kk) = NaN;\r","    end\r","    xc(kk) = xc_F(f_id);\r","    yc(kk) = yc_F(f_id);\r","end\r","numtargets=1;\r","mlo = repmat(struct('nwafer', nwafer, 'layer', [], 'wd', [], 'nmark', 1, 'nfield', 0, 'nlayer', 1, 'tlgname', ''), 1, numtargets);\r","\r","mlo.wd.xc = xc';\r","mlo.wd.yc = yc';\r","mlo.wd.xf = xf';\r","mlo.wd.yf = yf';\r","mlo.wd.xw = mlo.wd.xc + mlo.wd.xf;\r","mlo.wd.yw = mlo.wd.yc + mlo.wd.yf;\r","\r","mlo.nfield = length(mlo.wd.xc);\r","\r","mlo.layer.wr.dx = dx';\r","mlo.layer.wr.dy = dy';\r","\r","\r","\r","function Chk =  sub_get_WaferId(map)\r","\r","for i =  1:length(map)\r","    if isfield(map(1).elt, 'WaferId')   \r","        wid(i) = str2double(map(i).elt.WaferId(end-1:end));\r","    elseif isfield(map(1).elt, 'ChuckId')\r","        wid(i) = str2double(map(i).elt.ChuckId(end));\r","    else\r","        wid(i) = i;\r","    end\r","end\r","[~, Chk] = sort(wid);\r","\r","\r","function Chk =  sub_get_ChuckId(map)\r","for i =  1:length(map)\r","    if isfield(map(1).elt, 'ChuckId')   \r","        wid(i) = str2double(map(i).elt.ChuckId(end));\r","    elseif isfield(map(1).elt, 'WaferId')\r","        wid(i) = str2double(map(i).elt.WaferId(end));\r","    else\r","        wid(i) = i;\r","    end\r","end\r","[~, Chk] = sort(wid);"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[21,22,24,25,27,28,32,33,34,35,38,39,40,41,43,44,45,46,49,50,51,52,55,58,60,61,62,63,66,67,69,70,71,74,75,77,78,80,81,83,84,85,89,90,91,92,93,94,95,96,98,99,100,102,103,106,107,108,110,111,114,115,116,117,118,119,124,125,130,131,132,133,134,135,136,137,138,139,141,142,143,144,146,147,149,150,152,153,154,155,156,157,159,161,162,168,169,170,171,172,173,174,177,181,182,183,184,185,186,187,190],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}