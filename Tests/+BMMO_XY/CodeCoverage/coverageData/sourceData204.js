var sourceData204 = {"FileContents":["function figs = modelOutputDecomposition(simOutputs, lotDates, machineName)\r","%figs = modelOutputDecomposition(simOutputs, lotDates, machineName)\r","%\r","% This function generates 2 figures (1 per chuck), both containing trend line plots of\r","% the 99.7 percentile of the uncontrolled overlay values and total filtered correction\r","% overlay values. The figures also contain trend bar plots of the 99.7 percentile of the\r","% overlay values of the KA, BAO, MI, INTRAF and SUSD corrections.\r","%\r","% Input arguments:\r","% - simOutputs      [array of struct]               Structs containing the\r","%                                                      outputs as defined by the rerun/selfcorrection scripts\r","% - lotDates        [cell array of datetime]        Dates of the jobs\r","% - machineName     [char array]                    Name of the machine\r","%\r","% Output arguments:\r","% - figs            [array of figure]               The two figures containing the \r","%                                                      trend plots\r","\r","\r","import BMMO_XY.populationTooling.plots.*\r","import BMMO_XY.populationTooling.tools.*\r","\r","% Certain KPIs (in this case KA and MI) have different names when the job is ran on OTAS vs LIS.\r","\r","% Try to obtain the platform from simOutputs. Check which jobs are LIS and\r","% OTAS and create a logical array with LIS = 1 and OTAS = 0\r","% (isLISindexArray). \r","platformCellArray = extractArrayFromStruct(simOutputs, 'bmmoInputsRecorrected.info.configuration_data.platform');\r","isLISindexArray = cellfun(@(x) string(x) == \"LIS\", platformCellArray);\r","\r","%Additionally, a logical array is created with LIS = 0 and OTAS = 1 (isOTASindexArray).\r","%Together the logical arrays are used to check whether all the KPIs have a\r","%platform. If not, a warning is given and all jobs without a platform are\r","%removed.\r","isOTASindexArray = cellfun(@(x) string(x) == \"OTAS\", platformCellArray);\r","indexArray = logical(isLISindexArray + isOTASindexArray);\r","if any(~indexArray)\r","    simOutputs = simOutputs(indexArray);\r","    lotDates = lotDates(indexArray);\r","    isLISindexArray = isLISindexArray(indexArray);\r","    isOTASindexArray = isOTASindexArray(indexArray);\r","    \r","    noPlatformIndex = find(indexArray==0);\r","\r","warning('Platform unknown or not found for jobs with index %s. These jobs are not included.', num2str(reshape(noPlatformIndex, 1,[])));\r","end\r","\r","% Extract KPIs which are all the same\r","uncontrolled  = extractOvlKpis(extractArrayFromStruct(simOutputs, 'kpis.uncontrolled.overlay'), '997');\r","totalFiltered = extractOvlKpis(extractArrayFromStruct(simOutputs, 'kpis.correction.total_filtered.total'), '997');\r","BAO           = extractOvlKpis(extractArrayFromStruct(simOutputs, 'kpis.correction.total_filtered.bao'), '997');\r","INTRAF        = extractOvlKpis(extractArrayFromStruct(simOutputs, 'kpis.correction.total_filtered.intra_raw'), '997');\r","SUSD          = extractSusdOvlKpis(extractArrayFromStruct(simOutputs, 'kpis.correction.total_filtered.susd'));\r","\r","% Extract KPIs for MI and KA\r","% If all the jobs are either OTAS or LIS and we try to look for LIS or OTAS\r","% kpis respectively, an empty double array is created, which is not\r","% compatible with a struct array. Therefore, some if-statements need to be\r","% included. Jobs that have no platform associated are automatically\r","% omitted.\r","%OTAS\r","if any(isOTASindexArray)\r","    MI_raw(isOTASindexArray) = extractArrayFromStruct(simOutputs(isOTASindexArray), 'kpis.correction.total_filtered.mirror');\r","    KA_raw(isOTASindexArray) = extractArrayFromStruct(simOutputs(isOTASindexArray), 'kpis.correction.total_filtered.grid');\r","end\r","%LIS\r","if any(isLISindexArray)\r","    MI_raw(isLISindexArray)  = extractArrayFromStruct(simOutputs(isLISindexArray), 'kpis.correction.total_filtered.mirror.exp');\r","    KA_raw(isLISindexArray)  = extractArrayFromStruct(simOutputs(isLISindexArray), 'kpis.correction.total_filtered.grid.exp');\r","end\r","\r","% Extract the 99.7% kpis\r","MI = extractMiOvlKpis(MI_raw, '997');\r","KA = extractOvlKpis(KA_raw, '997');\r","\r","% Plot the values for Chuck 1\r","resetColors;\r","[fig1, ~] = trendLinePlot(lotDates, scaleCellArray({uncontrolled.chk1.x, totalFiltered.chk1.x}, 10^9), ...\r","                          'valuesDescription', {'Uncontrolled', 'SBC2A Total'}, ...\r","                          'figureUnit', 'Metro data (uncontrolled)/(sbc2a total) [nm]', ...\r","                          'figureTitle', ['SBC2A correction decomposition: ' machineName '. Chuck 1, ovX/ovY 99.7%']);\r","[fig1, ~] = trendBarPlot(lotDates, scaleCellArray({SUSD.chk1.x, BAO.chk1.x, KA.chk1.x, MI.chk1.x, INTRAF.chk1.x}, 10^9), ...\r","                         'valuesDescription', {'SUSD', 'BAO', 'KA', 'MI', 'INTRAF'}, ...\r","                         'figureUnit', 'sbc2a modelled content [nm]', ...\r","                         'useFigure', fig1);\r","resetColors;\r","[fig1, ~] = trendLinePlot(lotDates, scaleCellArray({uncontrolled.chk1.y, totalFiltered.chk1.y}, -10^9), 'useFigure', fig1);\r","[fig1, ~] = trendBarPlot(lotDates, scaleCellArray({SUSD.chk1.y, BAO.chk1.y, KA.chk1.y, MI.chk1.y, INTRAF.chk1.y}, -10^9), 'useFigure', fig1);\r","\r","\r","% Plot the values for Chuck 2\r","resetColors;\r","[fig2, ~] = trendLinePlot(lotDates, scaleCellArray({uncontrolled.chk2.x, totalFiltered.chk2.x}, 10^9), ...\r","                          'valuesDescription', {'Uncontrolled', 'SBC2A Total'}, ...\r","                          'figureUnit', 'Metro data (uncontrolled)/(sbc2a total) [nm]', ...\r","                          'figureTitle', ['SBC2A correction decomposition: ' machineName '. Chuck 2, ovX/ovY 99.7%']);\r","[fig2, ~] = trendBarPlot(lotDates, scaleCellArray({SUSD.chk2.x, BAO.chk2.x, KA.chk2.x, MI.chk2.x, INTRAF.chk2.x}, 10^9), ...\r","                         'valuesDescription', {'SUSD', 'BAO', 'KA', 'MI', 'INTRAF'}, ...\r","                         'figureUnit', 'sbc2a modelled content [nm]', ...\r","                         'useFigure', fig2);\r","resetColors;\r","[fig2, ~] = trendLinePlot(lotDates, scaleCellArray({uncontrolled.chk2.y, totalFiltered.chk2.y}, -10^9), 'useFigure', fig2);\r","[fig2, ~] = trendBarPlot(lotDates, scaleCellArray({SUSD.chk2.y, BAO.chk2.y, KA.chk2.y, MI.chk2.y, INTRAF.chk2.y}, -10^9), 'useFigure', fig2);\r","\r","% Return the figure handles\r","figs = [fig1, fig2];\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[28,29,35,36,37,38,39,40,41,43,45,49,50,51,52,53,62,63,64,67,68,69,73,74,77,78,81,82,85,86,87,88,92,93,96,97,100,101,102,103,106],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}