var sourceData215 = {"FileContents":["function figs = waferDataMapPlot(mls, figureTitle, varargin)\r","% figs = WaferDataMapPlot(mls, figureTitle, varargin)\r","%\r","% Function to plot the wafer data map given an array of mls.\r","%\r","% Input arguments:\r","% - mls              [array of structs]      Array of structs containing the MLs of\r","%                                              the jobs.\r","% - figureTitle      [char array]            Title of the wdms figures\r","% \r","% Optional arguments:  \r","% - scale            [double]                Scaling factor \r","% - subTitle         [char array]            Subtitle of the wdms figures\r","% - dates            [cell of datetimes]     Dates associated with the MLs\r","%\r","%  Output arguments:           \r","% - figs             [array of figures]      Array containing figures of the wafer data maps\r","\r","% Process input arguments\r","inputArguments = processInputArguments(varargin);\r","\r","% Determine scale\r","if inputArguments.scale == 0\r","    inputArguments.scale = min(round(1.2 * 10^9 * max(arrayfun(@determineMaxOvlValue, mls)), 2), 4);\r","end\r","\r","% Check dates\r","if length(inputArguments.dates) == 1 && string(inputArguments.dates{1}) == \"\"\r","    printDates = false;\r","else\r","    printDates = true;\r","end\r","if printDates && (length(inputArguments.dates) ~= length(mls))\r","    error('The amount of dates and amount of MLs do not match');\r","end\r","\r","% Set the font size\r","fontSize = 18;\r","\r","% Loop over all the wafers in all the MLs\r","index = 0;\r","for mlIndex = 1 : length(mls)\r","    for waferIndex = 1 : mls(mlIndex).nwafer\r","        index = index + 1;\r","        \r","        % Create the figure handle\r","        figs(index) = figure;\r","        \r","        % Create the wafer data map plot\r","        ovl_plot(mls(mlIndex), 'wafer', waferIndex, 'scale', inputArguments.scale, 'vcolor', 'prc', 3, 'fontsize', fontSize, 'legend', 'none');\r","        ax = gca;\r","        \r","        % Move the wafer data map to the left\r","        subplot(1, 6, 1 : 5, ax);\r","        \r","        % Calculate the overlay values and convert to char arrays\r","        ovlValues = ovl_calc_overlay(ovl_combine_wafers(mls(mlIndex), waferIndex));\r","        ovlCell   = createOvlCell(ovlValues);\r","        \r","        % Insert the overlay values to the bottom right\r","        anovl = annotation(figs(index), 'textbox', [0 0 1 1], 'String', ovlCell, 'FitBoxToText', 'off');\r","        anovl.LineStyle           = 'none';\r","        anovl.FontSize            = fontSize;\r","        anovl.VerticalAlignment   = 'bottom';\r","        anovl.HorizontalAlignment = 'right';\r","        \r","        % Insert the dates to the top right\r","        if printDates\r","            datesCell = createDatesCell(inputArguments.dates{mlIndex});\r","            andate    = annotation(figs(index), 'textbox', [0 0 1 1], 'String', datesCell, 'FitBoxToText', 'off');\r","            andate.LineStyle           = 'none';\r","            andate.FontSize            = fontSize;\r","            andate.VerticalAlignment   = 'top';\r","            andate.HorizontalAlignment = 'right';\r","        end\r","        \r","        % Set the title and subtitle\r","        subTitle = inputArguments.subTitle;\r","        if length(mls) > 1\r","            if string(subTitle) ~= \"\"\r","                subTitle = [subTitle ' ' num2str(mlIndex)];\r","            else\r","                subTitle = ['ml ' num2str(waferIndex)];\r","            end\r","        end\r","        if mls(mlIndex).nwafer > 1\r","            if string(subTitle) ~= \"\"\r","                subTitle = [subTitle ', wafer ' num2str(waferIndex)];\r","            else\r","                subTitle = ['Wafer ' num2str(waferIndex)];\r","            end\r","        end\r","        title(figureTitle);\r","        subtitle(subTitle);\r","        ax.Subtitle.Visible = 'on';\r","        \r","        % Set the properties of the window and font\r","        figs(index).Position = [50 50 1050 850];\r","        figs(index).Children(1).FontSize = fontSize;\r","    end\r","end\r","\r","end\r","\r","\r","function inputArguments = processInputArguments(inargs)\r","\r","% Create an inputParser object\r","p = inputParser;\r","\r","% Define validation functions\r","validationFunctionText   = @(x) (isstring(x) || ischar(x));\r","validationFunctionNumber = @(x) isa(x,'double');\r","\r","% Define the default values\r","defaultSubTitle = '';\r","defaultDates    = {''};\r","defaultScale    = 0;\r","\r","% Specify input parameters\r","p.addParameter('subTitle', defaultSubTitle, validationFunctionText);\r","p.addParameter('dates', defaultDates);\r","p.addParameter('scale', defaultScale, validationFunctionNumber);\r","\r","% Check the provided parameters\r","p.parse(inargs{:});\r","\r","% Store the results\r","inputArguments = p.Results;\r","\r","end\r","\r","\r","function maxOvl = determineMaxOvlValue(ml)\r","\r","ovlValues = ovl_calc_overlay(ml);\r","maxOvl    = max(ovlValues.ox100, ovlValues.oy100);\r","\r","end\r","\r","\r","function ovlCell = createOvlCell(ovlValues)\r","\r","ovlCell = {['   ' '    ' ' ovX ' '    ' ' ovY ' '   '], ...\r","           '', ...\r","           ['997' '    ' num2chars(ovlValues.ox997 * 1e9) '   ' num2chars(ovlValues.oy997 * 1e9) '   '], ...\r","           '', ...\r","           ['max' '    ' num2chars(ovlValues.ox100 * 1e9) '   ' num2chars(ovlValues.oy100 * 1e9) '   '], ...\r","           '', ...\r","           ['m3s' '    ' num2chars(ovlValues.oxm3s * 1e9) '   ' num2chars(ovlValues.oym3s * 1e9) '   '], ...\r","           '', ...\r","           ['3sd' '    ' num2chars(ovlValues.ox3sd * 1e9) '   ' num2chars(ovlValues.oy3sd * 1e9) '   '], ...\r","           '', ...\r","           '', ...\r","           ''};\r","\r","end\r","\r","\r","function chars = num2chars(num)\r","\r","chars = num2str(num, '%.3f');\r","chars = chars(1:5);\r","\r","end\r","\r","\r","function datesCell = createDatesCell(date)\r","\r","datesCell = {'', [datestr(date, 'dd-mmm-yyyy') '   ']};\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[20,23,24,28,29,30,31,33,34,38,41,42,43,44,47,50,51,54,57,58,61,62,63,64,65,68,69,70,71,72,73,74,78,79,80,81,82,83,86,87,88,89,90,93,94,95,98,99,109,112,113,116,117,118,121,122,123,126,129,136,137,144,146,148,150,152,162,163,170],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}