var sourceData588 = {"FileContents":["classdef bmmo_Configuration < handle   \r","    %% bmmo_Configuration\r","    % A configuration is a list of configuration parameters\r","    % It can be used to configure an object on which those parameters\r","    % are defined. \r","    % A bmmo_Configuration object can be created by passing a\r","    % name value pair in the constructor for all parameters defined in\r","    % bmmo_ConfigurationParameterFactory. Alternatively one of the predefined\r","    % configurations can be used e.g.: bmmo_3600D_model_configuration\r","    \r","    % See also: bmmo_ConfigurationParameter,\r","    % bmmo_ConfigurationParametFactory\r","    \r","    properties (SetAccess = protected, GetAccess = ?bmmoConfiguration)\r","        parameter_list  % bmmoConfigurationParameter objects\r","        evaluation_order\r","    end\r","    \r","    methods  % Constructor\r","        % A configuration is constructed by providing a list of (name,value)\r","        % pairs which describe the parameters\r","        % \r","        % Input: names: 1xn cell array of char arrays\r","        %           These are keys to the lookup table defined in\r","        %           bmmoConfigurationParameterFactory\r","        %        values: 1xn cell array of parameter values\r","        %           These are input to the constructor for each \r","        %           bmmoConfigurationParameter   \r","        %\r","        function obj = bmmo_Configuration(names, values)\r","            \r","            [names, values] = sub_validate_names(names, values);\r","            \r","            numpar = length(names);\r","            obj.parameter_list = containers.Map;\r","            obj.evaluation_order = containers.Map; \r","            \r","            factory = bmmo_ConfigurationParameterFactory.getInstance();\r","            \r","            for ipar = 1:numpar \r","                [obj.parameter_list(names{ipar}), ...\r","                    obj.evaluation_order(names{ipar})] = ...\r","                    factory.getParameter(names{ipar}, values{ipar});\r","            end\r","           \r","            \r","        end\r","    end\r","    \r","    methods \r","        % Configure an object according to the list of parameters\r","        %   This function modifies the object in-place\r","        function configure(obj, sim)\r","           parameter_names = obj.parameter_list.keys();           \r","           [~, raw_evaluation_order] = sort(cell2num(obj.evaluation_order.values()));\r","           parameter_names = parameter_names(raw_evaluation_order);          \r","           for i_name = 1:length(parameter_names)               \r","              par = obj.parameter_list(parameter_names{i_name});\r","              par.updateParameterValue(sim, obj.chuck_id);\r","           end\r","           \r","        end\r","        \r","        function names = getNames(obj)\r","           names = obj.parameter_list.keys(); \r","        end\r","            \r","        function config_object = getConfigurationObject(obj, name)\r","            config_object = obj.parameter_list(name).getConfigurationObject(obj);\r","        end        \r","        \r","        % identify common names and values\r","        % return results in same sort order as input names\r","        function [common_values, common_names] = getValue(obj, name)\r","            singleoutput = false;\r","            if ischar(name)\r","                name = {name};\r","                singleoutput = true;\r","            end\r","            \r","            common_names = name(obj.parameter_list.isKey(name));\r","            common_values = cell(0, length(common_names));\r","            for i_name = 1:length(common_names)\r","                common_values{i_name} = obj.parameter_list(common_names{i_name}).getValue();\r","            end\r","            \r","            if singleoutput && ~isempty(common_values)\r","                common_values = common_values{1};\r","            end\r","        end\r","        \r","        function parameter = getParameter(obj, name)\r","            assert(ischar(name));\r","            if obj.parameter_list.isKey(name)\r","                parameter = obj.parameter_list(name);\r","            else\r","                parameter = [];\r","            end                      \r","        end\r","            \r","        function disp(obj)\r","           for i_obj = 1:length(obj)\r","               all_names = obj(i_obj).parameter_list.keys();\r","               for ipar = 1:length(all_names)\r","                  disp(obj(i_obj).parameter_list(all_names{ipar})); \r","               end\r","               fprintf('\\n');\r","           end\r","        end\r","        \r","        function setValue(obj, names, values)\r","           \r","            [names, values] = sub_validate_names(names, values);\r","            factory = bmmo_ConfigurationParameterFactory.getInstance();             \r","            \r","            for i_name = 1:length(names)\r","                [obj.parameter_list(names{i_name}), ...\r","                    obj.evaluation_order(names{i_name})] = ...\r","                        factory.getParameter(names{i_name}, values{i_name});\r","            end\r","           \r","        end\r","            \r","        function options = getOptions(obj, name)\r","            singleoutput = false;\r","            if ischar(name)\r","                name = {name};\r","                singleoutput = true;\r","            end\r","            \r","            options = cell(0, length(name));\r","            available_names = find(obj.parameter_list.isKey(name));\r","\r","            for i_name = available_names\r","                options{i_name} = obj.parameter_list(name{i_name}).getOptions();\r","            end\r","            \r","            if singleoutput && ~isempty(options)\r","                options = options{1};\r","            end\r","        end  \r","        \r","        function remove(obj, name)\r","           if ischar(name)\r","               name = {name};\r","           end\r","          \r","           obj.parameter_list.remove(name);\r","           obj.evaluation_order.remove(name);\r","        end\r","    end\r","end\r","\r","function [names, values] = sub_validate_names(names, values)\r","if ischar(names)\r","    names = {names};\r","    values = {values};\r","else\r","    numpar = length(names);\r","    assert(numpar == length(values));\r","end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[32,34,35,36,38,40,41,42,43,54,55,56,57,58,59,65,69,75,76,77,78,81,82,83,84,87,88,93,94,95,96,97,102,103,104,105,107,113,114,116,117,118,119,125,126,127,128,131,132,134,135,138,139,144,145,148,149,155,156,157,158,159,160],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}