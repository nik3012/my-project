var sourceData253 = {"FileContents":["classdef testBmmoAverageChuck < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% 1. Test with multiple wafers, one chuck, all on the same chuck\r","        function Case1 (obj)\r","            % Given\r","            load([bmmo_testdata_root filesep 'TC03_in.mat']);\r","            load([bmmo_testdata_root filesep 'TC_options.mat']);\r","            options.chuck_usage.nr_chuck_used = 1;\r","            options.chuck_usage.chuck_id = [1 1 1 1 1 1];\r","            options.chuck_usage.chuck_id_used = 1;\r","            mli = ml; \r","            \r","            % When            \r","            expected_out = ovl_average(mli);    % Output should be the same as ovl_average\r","            test_out = bmmo_average_chuck(mli, options);\r","            expected_out = rmfield(expected_out, 'info');\r","            test_out = rmfield(test_out, 'info');\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, test_out(1));\r","            \r","            % Given\r","            expected_matrix = [expected_out.layer.wr.dx; expected_out.layer.wr.dy];\r","            in_matrix = zeros(length(mli.layer.wr(1).dx) * 2, mli.nwafer);\r","            for iwaf = 1:mli.nwafer\r","                in_matrix(:, iwaf) = [mli.layer.wr(iwaf).dx; mli.layer.wr(iwaf).dy];\r","            end\r","            \r","            % When\r","            test_matrix = bmmo_average_chuck(in_matrix, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_matrix, test_matrix(:, 1));\r","        end\r","        \r","        %% 2. Test with  multiple wafers, two chucks used, different chuck orders\r","        function Case2(obj)\r","            % Given\r","            load([bmmo_testdata_root filesep 'TC03_in.mat']);\r","            load([bmmo_testdata_root filesep 'TC_options.mat']);\r","            mli = ml;\r","            mli = rmfield(mli, 'info');\r","            expected_out(1) = ovl_average(ovl_get_wafers(mli, [1,3,5]));    % Output should be the same as ovl_average(1,3,5)\r","            expected_out(2) = ovl_average(ovl_get_wafers(mli, [2,4,6]));\r","            \r","            % When\r","            test_out = bmmo_average_chuck(mli, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, test_out);\r","            \r","            % Given\r","            expected_matrix = [expected_out(1).layer.wr.dx, expected_out(2).layer.wr.dx; ...\r","                expected_out(1).layer.wr.dy, expected_out(2).layer.wr.dy];\r","            in_matrix = zeros(length(mli.layer.wr(1).dx) * 2, mli.nwafer);\r","            for iwaf = 1:mli.nwafer\r","                in_matrix(:, iwaf) = [mli.layer.wr(iwaf).dx; mli.layer.wr(iwaf).dy];\r","            end\r","            \r","            % When\r","            test_matrix = bmmo_average_chuck(in_matrix, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_matrix, test_matrix);\r","            \r","            %% Now try with a different chuck order\r","            % Given\r","            options.chuck_usage.chuck_id = [2 1 2 1 2 1];            \r","            expected_matrix = [expected_out(2).layer.wr.dx, expected_out(1).layer.wr.dx; ...\r","                expected_out(2).layer.wr.dy, expected_out(1).layer.wr.dy];\r","            \r","            expected_out_tmp = expected_out(1);\r","            expected_out(1) = expected_out(2);\r","            expected_out(2) = expected_out_tmp;\r","            \r","            % When\r","            test_out = bmmo_average_chuck(mli, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_out, test_out);\r","            \r","            % When\r","            test_matrix = bmmo_average_chuck(in_matrix, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(expected_matrix, test_matrix);\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,12,13,16,17,18,19,22,25,26,27,28,32,35,41,42,43,44,45,46,49,52,55,56,57,58,59,63,66,70,71,72,74,75,76,79,82,85,88],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,6,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,6,0,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0]}}