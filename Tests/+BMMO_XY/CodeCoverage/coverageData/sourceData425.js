var sourceData425 = {"FileContents":["classdef bmmoDevbenchHTTPInterface < handle\r","%% <help_update_needed>\r","%  for the class and for the function\r","%\r","%       \r","   properties\r","       options; % Matlab http options structure\r","   end\r","    \r","   methods\r","       function obj = bmmoDevbenchHTTPInterface()\r","          obj.options = matlab.net.http.HTTPOptions;\r","          obj.options.ConvertResponse = 0; % Disable autoconvert into Matlab types, to avoid Matlab's crappy builtin XML parser\r","          obj.options.ConnectTimeout = 1000;\r","       end\r","   end\r","   \r","    \r","   methods\r","       function [adel_data, adel_char] = get_adel_from_ip(obj, adel_type, adel_name, interface_name, equipment_ip) \r","           uri = sprintf('http://%s:8080/%s/%s/%s?cmd=get', equipment_ip, interface_name, adel_type, adel_name);\r","           request = matlab.net.http.RequestMessage;\r","           response = request.send(uri, obj.options);\r","           adel_char = response.Body.Data.char;\r","           adel_data = xml_parse(adel_char);           \r","       end\r","       \r","       function [adel_data, adel_char, adel_date] = get_last_adel_from_ip(obj, adel_type, interface_name, equipment_ip)\r","           [adel_list, adel_dates] = obj.get_adel_list_from_ip(adel_type, interface_name, equipment_ip);\r","           [~, sortid] = sort(adel_dates);\r","           adel_name = adel_list{sortid(end)};\r","           adel_date = adel_dates(sortid(end));\r","           [adel_data, adel_char] = obj.get_adel_from_ip(adel_type, adel_name, interface_name, equipment_ip);\r","       end\r","       \r","       function send_adel_to_ip(obj, adel_path, interface_name, equipment_ip)\r","            xml_data = xml_load(adel_path);\r","            adel_type = strrep(xml_data.Header.DocumentType, '.', '');\r","            \r","\r","            obj.send_adel_type_to_ip(adel_type, adel_path, interface_name, equipment_ip);\r","       end\r","       \r","       function response = send_adel_type_to_ip(obj, adel_type, adel_path, interface_name, equipment_ip)\r","           \r","%             error(sprintf('send_adel_type_to_ip is a TODO. Please manually upload the ADEL using the %s interface at http://%s:8080/%s/', ...\r","%                 interface_name, equipment_ip, interface_name));\r","           \r","            uri = sprintf('http://%s:8080/%s/%s?cmd=put', equipment_ip, interface_name, adel_type);\r","            \r","            file_provider = matlab.net.http.io.MultipartFormProvider(\"File\", matlab.net.http.io.FileProvider(adel_path));\r","            request = matlab.net.http.RequestMessage(matlab.net.http.RequestMethod.POST, [], file_provider);\r","            response = request.send(uri, obj.options);\r","            \r","       end\r","       \r","       function [adel_list, adel_dates] = get_adel_list_from_ip(obj, adel_type, interface_name, equipment_ip)\r","           \r","           uri = sprintf('http://%s:8080/%s/%s?cmd=list', equipment_ip, interface_name, adel_type);\r","           request = matlab.net.http.RequestMessage;\r","           response = request.send(uri, obj.options);\r","           xml_data = xml_parse(response.Body.Data.char);\r","           \r","           adel_list = arrayfun(@(x) x.elt.Name, xml_data.Results.EntryList, 'UniformOutput', false);\r","           adel_dates = arrayfun(@(x) bmmo_parse_adel_timestamp(x.elt.LastModifiedTime), xml_data.Results.EntryList);\r","       end\r","       \r","   end\r","   \r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[12,13,14,21,22,23,24,25,29,30,31,32,33,37,38,41,49,51,52,53,59,60,61,62,64,65],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}