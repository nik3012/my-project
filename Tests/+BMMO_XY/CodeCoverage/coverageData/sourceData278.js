var sourceData278 = {"FileContents":["classdef testBmmoFitParms < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% 1 test with simple translation of small structure\r","        function Case1(obj)\r","            % 1.1 simple translation of single structure            \r","            % Given\r","            wd.xc = [-3 -3 -3 0 0 0 3 3 3]';\r","            wd.xf = [-1 0 1 -1 0 1 -1 0 1]';\r","            wd.xw = wd.xc + wd.xf;\r","            wd.yc = wd.xc;\r","            wd.yf = wd.xf;\r","            wd.yw = wd.xw;\r","            ml.wd = wd;\r","            ml.nlayer = 1;\r","            ml.nwafer = 1;\r","            ml.nfield = 3;\r","            ml.nmark = 3;\r","            ml.layer.wr.dx = ones(size(ml.wd.xw));\r","            ml.layer.wr.dy = ones(size(ml.wd.yw));\r","            mlo = ml;               % after fitting, tx, ty == +1, and the residuals should be zero (give or take some rounding errors)\r","            mlo.layer.wr.dx = zeros(size(ml.wd.xw));\r","            mlo.layer.wr.dy = zeros(size(ml.wd.yw));\r","            options.parlist = bmmo_parlist;\r","            \r","            % When\r","            [resout, coeff] = bmmo_fit_parms([ml.layer.wr.dx; ml.layer.wr.dy], ml.wd,  options, 'tx', 'ty');\r","            \r","            % Then\r","            obj.verifyWithinTol(resout, [mlo.layer.wr.dx; mlo.layer.wr.dy]);\r","            obj.verifyWithinTol(coeff, [1 1]');\r","            \r","            %%\r","            % Given\r","            C = bmmo_get_design_matrix(ml.wd, options, 'tx', 'ty');     % test usage with design matrix\r","            \r","            % When\r","            [resout_2, coeff_2] = bmmo_fit_parms([ml.layer.wr.dx; ml.layer.wr.dy], C,  options);\r","            \r","            % Then\r","            obj.verifyWithinTol(resout, resout_2);\r","            obj.verifyWithinTol(coeff, coeff_2);\r","        end\r","        \r","        %% 2. test against ovl_model 10par with random large structure, single wafer\r","        function Case2(obj)\r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 1,'nlayer', 1);\r","            options.parlist = bmmo_parlist;\r","            mld.layer.wr.dx = 1e-9 * randn(size(mld.layer.wr.dx));\r","            mld.layer.wr.dy = 1e-9 * randn(size(mld.layer.wr.dx));\r","            options.parlist = bmmo_parlist;\r","            [mlo, coeff] = ovl_model(mld);\r","            res_in = [mld.layer.wr.dx; mld.layer.wr.dy];\r","            \r","            % When\r","            [res_out, coeff_out] = bmmo_fit_parms(res_in, mld.wd, options, '10par');\r","            fn = fieldnames(coeff);\r","            coeffs_simple = zeros(10,1);\r","            for ic = 1:10\r","                coeffs_simple(ic) = coeff.(fn{ic});\r","            end\r","            \r","            % Then\r","            obj.verifyWithinTol(res_out, [mlo.layer.wr.dx; mlo.layer.wr.dy]);\r","            obj.verifyWithinTol(coeff_out, coeffs_simple);\r","        end\r","        \r","        %% 3. test against ovl_model 10par with random large structure, multiple wafers\r","        function Case3(obj)\r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;\r","            for iw = 1:6\r","                mld.layer.wr(iw).dx = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","                mld.layer.wr(iw).dy = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","            end\r","            options.parlist = bmmo_parlist;\r","            [mlo, coeff] = ovl_model(mld, '10par');\r","            fn = fieldnames(coeff);\r","            coeffs_simple = zeros(10,1);\r","            for ic = 1:10\r","                coeffs_simple(ic) = coeff.(fn{ic});\r","            end            \r","            wd_in = struct;                                 % entire structure\r","            [wd_in.xc, wd_in.yc, wd_in.xf, wd_in.yf, dxc, dyc] = ovl_concat_wafer_results(mld);\r","            wd_in.xw = wd_in.xc + wd_in.xf;\r","            wd_in.yw = wd_in.yc + wd_in.yf;\r","            res_in = [dxc; dyc];\r","            \r","            % When\r","            [res_out, coeff_out] = bmmo_fit_parms(res_in, wd_in, options, '10par');\r","            [~,~,~,~, outdx, outdy] = ovl_concat_wafer_results(mlo);\r","            \r","            % Then\r","            obj.verifyWithinTol(res_out, [outdx;outdy]);\r","            obj.verifyWithinTol(coeff_out, coeffs_simple);\r","            \r","            %%\r","            % Given\r","            [mlo, coeff] = ovl_model(mld, 'perwafer');      % per wafer\r","            fn = fieldnames(coeff.wafer(1));\r","            coeffs_simple = zeros(10,6);\r","            for iw = 1:6\r","                for ic = 1:10\r","                    coeffs_simple(ic, iw) = coeff.wafer(iw).(fn{ic});\r","                end\r","            end\r","            res_in = [mld.layer.wr.dx; mld.layer.wr.dy];\r","            \r","            % When\r","            [res_out, coeff_out] = bmmo_fit_parms(res_in, mld.wd, options, '10par');\r","            \r","            % Then\r","            obj.verifyWithinTol(coeff_out, coeffs_simple);\r","            obj.verifyWithinTol(res_out, [ [mlo.layer.wr.dx]; [mlo.layer.wr.dy]]);\r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,31,32,36,39,42,43,49,50,51,52,53,54,55,58,59,60,61,62,66,67,73,74,75,76,77,79,80,81,82,83,84,86,87,88,89,90,93,94,97,98,102,103,104,105,106,107,110,113,116,117],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,10,0,0,0,1,1,0,0,0,0,0,1,1,1,6,6,0,1,1,1,1,1,10,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,6,60,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0]}}