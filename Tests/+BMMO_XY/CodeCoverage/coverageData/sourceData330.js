var sourceData330 = {"FileContents":["classdef testBmmoResample < BMMO_XY.tools.testSuite\r","    \r","    methods(Static)\r","        \r","        %% Sub function\r","        function bb = sub_create_bounding_box(r)\r","            \r","            rx1 = r;\r","            ry1 = rx1;\r","            bbx = [-rx1 -rx1 rx1 rx1];\r","            bby = [-ry1 ry1 -ry1 ry1];\r","            bb = [bbx; bby]';\r","        end\r","        \r","    end\r","    \r","    methods(Test)\r","        \r","        %% Test case 1\r","        function Case1(obj)\r","            % Given\r","            % test set 1\r","            % sample 4*4 grid to 5*5\r","            % options: with/wo bounding box, with/wo NaN interpolation, different wafersize, gaussian radii\r","            %  .   .   .   .   .\r","            %    1   1   1   1\r","            %  .   .   .   .   .\r","            %    1   2   2   1\r","            %  .   .   .   .   .\r","            %    1   2   2   1\r","            %  .   .   .   .   .\r","            %    1   1   1   1\r","            %  .   .   .   .   .\r","            ix = (-1.5:1:1.5)';\r","            ox = (-2:2)';\r","            [mix, miy] = meshgrid(ix, ix);\r","            [mox, moy] = meshgrid(ox, ox);\r","            mli.wd.xw = mix(:);\r","            mli.wd.yw = miy(:);\r","            mlt.wd.xw = mox(:);\r","            mlt.wd.yw = moy(:);\r","            mli.nlayer = 1;\r","            mli.nwafer = 1;\r","            mlt.nlayer = 1;\r","            mlt.nwafer = 1;\r","            mli.layer.wr.dx = [1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1]';\r","            mli.layer.wr.dy = mli.layer.wr.dx;\r","            options.interp_type = 'gauss';\r","            options.gauss_radius = 2;\r","            %% 1 Gaussian interpolation\r","            options.bounding_box = 'none';                              %1.1: no bounding box, no NaN interpolation, nothing removed\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 10;\r","            \r","            % When\r","            mlo11 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %1.2 bounding box, no NaN interpolation, nothing removed\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 10;\r","            mlo12 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %1.3 bounding box, NaN interpolation, nothing removed\r","            options.nan_interpolation = 'near4';\r","            options.wafersize = 10;\r","            mlo13 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %1.4 bounding box, NaN interpolation, wafersize = 3\r","            options.nan_interpolation = 'near4';\r","            options.wafersize = 3;\r","            mlo14 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %1.5 bounding box, no NaN interpolation, wafersize = 3\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 3;\r","            mlo15 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = 'none';                              %1.6 no bounding box, no NaN interpolation, wafersize = 3\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 3;\r","            mlo16 = bmmo_resample(mli, mlt, options);            \r","            options.bounding_box = obj.sub_create_bounding_box(-2.5);   %1.7 negative bounding box, no NaN interpolation, nothing removed\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 10;\r","            mlo17 = bmmo_resample(mli, mlt, options);            \r","            dx11map = reshape(mlo11.layer.wr.dx, [5,5]);                % inspect some values\r","            dx14map = reshape(mlo14.layer.wr.dx, [5,5]);\r","            \r","            % Then\r","            obj.verifyTrue(dx11map(3,3) == 2 );\r","            obj.verifyTrue(dx11map(1,1) == 1 );\r","            obj.verifyTrue(dx14map(3,3) == 2 );\r","            obj.verifyTrue(isnan(dx14map(1,1)) );\r","            obj.verifyTrue(dx14map(2,2) == 1.25 );\r","            obj.verifyWithinTol(mlo11, mlo12);                          % 1.1, 1.2, 1.3, 1.7 should produce the same results\r","            obj.verifyWithinTol(mlo11, mlo13);\r","            obj.verifyWithinTol(mlo11, mlo17);\r","            obj.verifyWithinTol(mlo14, mlo15);                          % 1.4, 1.5, 1.6 should produce the same results\r","            obj.verifyWithinTol(mlo14, mlo16);\r","            \r","            %% 2. same with linear interpolation\r","            % Given\r","            options.interp_type = 'linear';\r","            options.bounding_box = 'none';                              %2.1: no bounding box, no NaN interpolation, nothing removed\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 10;\r","            \r","            % When\r","            mlo21 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %2.2 bounding box, no NaN interpolation, nothing removed\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 10;\r","            mlo22 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %2.3 bounding box, NaN interpolation, nothing removed\r","            options.nan_interpolation = 'near4';\r","            options.wafersize = 10;\r","            mlo23 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %2.4 bounding box, NaN interpolation, wafersize = 3\r","            options.nan_interpolation = 'near4';\r","            options.wafersize = 3;\r","            mlo24 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = obj.sub_create_bounding_box(2.5);    %2.5 bounding box, no NaN interpolation, wafersize = 3\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 3;\r","            mlo25 = bmmo_resample(mli, mlt, options);\r","            options.bounding_box = 'none';                              %2.6 no bounding box, no NaN interpolation, wafersize = 3\r","            options.nan_interpolation = 'none';\r","            options.wafersize = 3;\r","            mlo26 = bmmo_resample(mli, mlt, options);\r","            \r","            % Then\r","            obj.verifyWithinTol(mlo23, mlo11);                          % checks: 2.3 should be the same as 1.1; all others should be the same as 1.4\r","            obj.verifyWithinTol(mlo21, mlo14);\r","            obj.verifyWithinTol(mlo22, mlo21);\r","            obj.verifyWithinTol(mlo24, mlo21);\r","            obj.verifyWithinTol(mlo25, mlo21);\r","            obj.verifyWithinTol(mlo26, mlo21);            \r","        end\r","        \r","        %% Test case 2\r","        function Case2(obj)\r","            % Given\r","            options.interp_type = 'linear';                             % 3. test with realistic ml structures\r","            options.bounding_box = obj.sub_create_bounding_box(1.5);\r","            options.nan_interpolation = 'diagonal';\r","            options.wafersize = 10;\r","            mli1 = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19', 'nlayer', 1, 'nwafer', 1);\r","            mli2 = ovl_create_dummy('marklayout','BA-XY-DYNA-7X7', 'nlayer', 1, 'nwafer', 1);\r","            dx13x9 = 1e-9 * randn(size(mli1.layer.wr.dx));\r","            dx7x7 = 1e-9 * randn(size(mli2.layer.wr.dx));\r","            mli1.layer.wr.dx = dx13x9;\r","            mli2.layer.wr.dx = dx7x7;\r","            \r","            % When\r","            mlo_down = bmmo_resample(mli1, mli2, options);\r","            mlo_down_up = bmmo_resample(mlo_down, mli1, options);\r","            mlo_up = bmmo_resample(mli2, mli1, options);\r","            mlo_up_down = bmmo_resample(mlo_up, mli2, options);\r","            \r","            % Then\r","            obj.verifyTrue(std(abs(mlo_up_down.layer.wr.dx - mli2.layer.wr.dx)) < 1e-9);    % the abs difference between the re-resampled values \r","            obj.verifyTrue(std(abs(mlo_down_up.layer.wr.dx - mli1.layer.wr.dx)) < 1e-9);    % and the original should have a lower std than randn data!\r","            obj.verifyTrue(isequal(mlo_up_down.layer.wr.dy, mli2.layer.wr.dy));             % the dy values are all 0\r","            obj.verifyTrue(isequal(mlo_down_up.layer.wr.dy, mli1.layer.wr.dy));            \r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[8,9,10,11,12,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,91,92,93,94,98,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,150,151,152,153,156,157,158,159],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0]}}