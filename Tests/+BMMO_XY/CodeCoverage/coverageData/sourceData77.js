var sourceData77 = {"FileContents":["function out = bmmo_default_model_result(mli, options)\r","% function out = bmmo_default_model_result(mli, options)\r","%\r","% Initialize the default structure for intermediate model results. This\r","% structure is used by bmmo_run_submodels for maintaining and passing\r","% results of the BMMO-NXE submodels.\r","%\r","% Input:\r","%   mli:        ml structure\r","%   options:    options structure, as defined in\r","%               bmmo_default_options_structure\r","%\r","% Output:\r","%   out:        initialized structure for submodel results\r","\r","% Create default MI and KA grids and values\r","mxy = options.map_param.start_position:options.map_param.pitch:-options.map_param.start_position;\r","mz = zeros(length(mxy),1);\r","ka_grid_exp = bmmo_KA_grid(options.KA_start, options.KA_pitch);\r","ka_grid_meas = bmmo_KA_grid(options.KA_meas_start, options.KA_pitch);\r","\r","ka_grid_exp = bmmo_KA_fix_interpolant(ka_grid_exp);\r","ka_grid_meas = bmmo_KA_fix_interpolant(ka_grid_meas);\r","\r","% Initialize chuck-independent results\r","out.SUSD.Calib_SUSD     = [0, 0];\r","out.SUSD.Monitor_SUSD   = out.SUSD.Calib_SUSD;\r","\r","% Initialize outlier stats\r","out.outlier_stats = bmmo_default_outlier_stats(mli);\r","out.ml_outlier_removed = mli;\r","\r","% Initialize residuals\r","\r","% Initialize WH input\r","out.WH.Calib_WH         = 0;\r","out.WH.lambda           = 0;\r","\r","% We have two versions of the input WH fingerprint in results\r","% For the single-layer case, both are the same\r","out.WH.model_fp = options.WH.input_fp_per_chuck;\r","out.WH.res_fp = options.WH.input_fp_per_chuck;\r","\r","% Initialize layout-dependent results\r","if options.no_layer_to_use == 1\r","    out.WH.input            = ovl_get_fields(mli, options.layer_fields{1});\r","    out.interfield_residual = bmmo_average_chuck(mli, options);\r","    out.sub_model_input = mli;\r","else\r","    out.WH.input    = bmmo_reconstruct_2layer_s2f(mli, options);\r","    \r","    for ic = 1:2\r","        out.WH.model_fp(ic) = bmmo_reconstruct_2layer_s2f(options.WH.input_fp_per_chuck(ic), options);\r","        dummy_reduced = ovl_create_dummy(out.WH.model_fp(ic),'marklayout',options.reduced_reticle_layout,...\r","        'nwafer',out.WH.model_fp(ic).nwafer,'nlayer',out.WH.model_fp(ic).nlayer,'return_info',1);\r","        tmp_fp = bmmo_resample(out.WH.model_fp(ic), dummy_reduced, options.WH_resample_options);\r","        out.WH.model_fp(ic) = rmfield(tmp_fp, 'tlgname');\r","        out.WH.res_fp(ic) = sub_get_l1_input(options.WH.input_fp_per_chuck(ic), options);\r","        \r","    end\r","    out.sub_model_input = sub_get_l1_input(mli, options);\r","    out.interfield_residual = bmmo_average_chuck(out.sub_model_input, options);\r","end\r","out.intrafield_input = out.interfield_residual;\r","\r","\r","mlz = ovl_create_dummy(mli);\r","[~, zeropars]= bmmo_model_BAO(mlz, options);\r","emptyfield = ovl_average_fields(bmmo_average(mlz));\r","\r","% Initialize chuck-dependent results\r","for chuck_id = 1:2\r","    \r","    out.SUSD.model_fp(chuck_id)          = ovl_get_wafers(mlz, 1);\r","    \r","    out.MI.Calib_MI(chuck_id).x_mirr     = struct('y',mxy,'dx',mz);\r","    out.MI.Calib_MI(chuck_id).y_mirr     = struct('x',mxy,'dy',mz);\r","    out.MI.Calib_MI_wsm(chuck_id).x_mirr = out.MI.Calib_MI(chuck_id).x_mirr;\r","    out.MI.Calib_MI_wsm(chuck_id).y_mirr = out.MI.Calib_MI(chuck_id).y_mirr;\r","    out.MI.res(chuck_id)                 = out.interfield_residual(chuck_id);\r","    \r","    out.KA.Calib_KA(chuck_id)            = ka_grid_exp;\r","    out.KA.Calib_KA_meas(chuck_id)       = ka_grid_meas;\r","    \r","    out.BAO.correction(chuck_id)         = struct('tx',0,'ty',0,'rs',0,'ra',0,'ms',0,'ma',0,'rws',0,'rwa',0,'mws',0,'mwa',0);\r","    out.BAO.before_KA(chuck_id)          = zeropars;\r","    out.BAO.before_MI(chuck_id)          = out.BAO.before_KA(chuck_id);\r","    out.BAO.BAO_in_MIKA(chuck_id)        = out.BAO.before_KA(chuck_id);\r","    \r","    fields = options.intraf_CETparfull.name;\r","    for idx = 1:length(fields)\r","        out.INTRAF.Calib_Kfactors(chuck_id).(fields{idx})=0;\r","    end  \r","    \r","    out.INTRAF.residual(chuck_id)        = emptyfield;\r","    out.INTRAF.Calib_intra(chuck_id)     = emptyfield;\r","end\r","\r","\r","% End of main function; sub-functions below\r","function mlo = sub_get_l1_input(mli, options)\r","% Extract the specified 89 fields from 167 field input\r","\r","mlo = mli;\r","\r","if mli.nfield >= max(options.edge_fields)\r","    mlo = ovl_get_fields(mli, [options.layer_fields{1}, options.edge_fields]);\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[17,18,19,20,22,23,26,27,30,31,36,37,41,42,45,46,47,48,49,50,52,53,54,55,56,57,58,61,62,64,67,68,69,72,74,76,77,78,79,80,82,83,85,86,87,88,90,91,92,95,96,104,106,107],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,128,0,128,128,0,0,128,128,0,0,128,128,0,0,0,0,128,128,0,0,0,128,128,0,0,128,41,41,41,87,87,0,87,174,174,174,174,174,174,0,0,87,87,0,128,0,0,128,128,128,0,0,128,0,256,0,256,256,256,256,256,0,256,256,0,256,256,256,256,0,256,256,5120,0,0,256,256,0,0,0,0,0,0,0,261,0,261,261,0,0]}}