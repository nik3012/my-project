var sourceData273 = {"FileContents":["classdef testBmmoFilterOptions < BMMO_XY.tools.testSuite\r","    \r","    methods\r","        %% Sub functions\r","        function sub_assert_filter_equal(obj, filter1, filter2)\r","            \r","            filter1.function = 0;\r","            filter2.function = 0;\r","            obj.verifyWithinTol(filter1, filter2);\r","        end\r","        \r","        function sub_assert_filter_lt(obj, filter1, filter2)\r","            \r","            fn = fieldnames(filter1.coefficients);\r","            fn2 = fieldnames(filter2.coefficients);\r","            obj.verifyTrue(isequal(fn, fn2));\r","            \r","            for kk = 1:length(fn)\r","                obj.verifyTrue(filter1.coefficients.(fn{kk}) <  filter2.coefficients.(fn{kk}));\r","            end\r","        end\r","        \r","    end\r","    \r","    methods(Test)\r","        %% test 1: all zeros\r","        function test_bmmo_filter_options_default(obj)\r","            % Given\r","            input_struct = bmmo_default_input;\r","            \r","            % When\r","            options = bmmo_default_options_structure;\r","            [~, test_options] = bmmo_process_input(input_struct);\r","            \r","            % Then\r","            obj.sub_assert_filter_equal(options.filter, test_options.filter);\r","        end\r","        \r","        %% test 2: some values replaced\r","        function test_bmmo_filter_options_partial(obj)\r","            % Given\r","            input_struct = bmmo_default_input;\r","            input_struct.info.configuration_data.filter.T1 = 11.5;\r","            input_struct.info.configuration_data.filter.coeff_BAO = 0.7;\r","            input_struct.info.report_data.T_current_expose = 5;\r","            input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","            input_struct.info.report_data.time_filtering_enabled = 1;\r","            \r","            % When\r","            options = bmmo_default_options_structure;\r","            options.filter.T_current_expose = 5;\r","            options.filter.coefficients.BAO = 0.7;\r","            options.filter.coefficients.WH = 0.4;       % other coefficients have default values\r","            options.filter.coefficients.MI = 0.3;\r","            options.filter.coefficients.KA = 0.3;\r","            options.filter.coefficients.INTRAF = 0.4;\r","            options.filter.coefficients.SUSD = 0.4;\r","            options.filter.T1 = 11.5;\r","            [~, test_options] = bmmo_process_input(input_struct);\r","            \r","            % Then\r","            obj.sub_assert_filter_equal(options.filter, test_options.filter);\r","        end\r","        \r","        %% test 3 : all values in interface replaced\r","        function test_bmmo_filter_options_complete(obj)\r","            % Given\r","            input_struct = bmmo_turn_off_l2(bmmo_default_input);\r","            input_struct.info.configuration_data.susd_correction_enabled = 1;\r","            input_struct.info.configuration_data.filter.T1 = 3.5;\r","            input_struct.info.configuration_data.filter.T2 = 13.5;\r","            input_struct.info.configuration_data.filter.coeff_BAO = 0.44;\r","            input_struct.info.configuration_data.filter.coeff_MI = 0.55;\r","            input_struct.info.configuration_data.filter.coeff_WH = 0.66;\r","            input_struct.info.configuration_data.filter.coeff_ffp = 0.77;\r","            input_struct.info.configuration_data.filter.coeff_KA = 0.88;\r","            input_struct.info.configuration_data.filter.coeff_SUSD = 0.99;\r","            input_struct.info.report_data.T_current_expose = 99;\r","            input_struct.info.report_data.T_previous_expose = 97;\r","            input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","            input_struct.info.report_data.time_filtering_enabled = 1;\r","            \r","            % When\r","            options = bmmo_default_options_structure;\r","            options.filter.T_current_expose = 99;\r","            options.filter.T_previous_expose = 97;\r","            options.filter.coefficients.BAO = 0.44;\r","            options.filter.coefficients.MI = 0.55;\r","            options.filter.coefficients.WH = 0.66;\r","            options.filter.coefficients.INTRAF = 0.77;\r","            options.filter.coefficients.KA = 0.88;\r","            options.filter.coefficients.SUSD = 0.99;\r","            options.filter.T1 = 3.5;\r","            options.filter.T2 = 13.5;\r","            [~, test_options] = bmmo_process_input(input_struct);\r","            \r","            % Then\r","            obj.sub_assert_filter_equal(options.filter, test_options.filter);\r","        end\r","        \r","        %% test 4: verify that filter is all 1 in recover to baseline scenario, regardless of the number of wafers or time since last expose\r","        function test_bmmo_filter_recover(obj)\r","            % Given\r","            input = bmmo_default_input;\r","            input.info.configuration_data.susd_correction_enabled = 1;\r","            input_2w = bmmo_get_wafers(input, [1 2]);\r","            input_4w = bmmo_get_wafers(input, [1 2 3 4]);\r","            input_6w = input;\r","            input_short = input_6w;\r","            input_short.info.report_data.T_current_expose = 97;\r","            input_short.info.report_data.T_previous_expose = 88;\r","            \r","            % When\r","            [~, options_2w] = bmmo_process_input(input_2w);\r","            [~, options_4w] = bmmo_process_input(input_4w);\r","            [~, options_6w] = bmmo_process_input(input_6w);\r","            [~, options_short] = bmmo_process_input(input_short);\r","            \r","            % Then\r","            obj.sub_assert_filter_equal(options_2w.filter, options_4w.filter);\r","            obj.sub_assert_filter_equal(options_4w.filter, options_6w.filter);\r","            \r","            % When\r","            options_short.filter.T_current_expose = options_6w.filter.T_current_expose;\r","            options_short.filter.T_previous_expose = options_6w.filter.T_previous_expose;\r","            \r","            % Then\r","            obj.sub_assert_filter_equal(options_short.filter, options_6w.filter);\r","        end\r","        \r","        %% test 5: verify that dynamic filter is engaged in control to baseline scenario\r","        function test_bmmo_filter_control(obj)\r","            % Given\r","            input_6w = bmmo_default_input;\r","            input_6w.info.report_data.time_filtering_enabled = 1;\r","            input_6w.info.report_data.adaptive_time_filter_enabled = 1;\r","            input_2w = bmmo_get_wafers(input_6w, [1 2]);\r","            input_4w = bmmo_get_wafers(input_6w, [1 2 3 4]);\r","            input_short = input_6w;\r","            input_short.info.report_data.T_current_expose = 97;\r","            input_short.info.report_data.T_previous_expose = 88;\r","            \r","            % When\r","            [~, options_2w] = bmmo_process_input(input_2w);\r","            [~, options_4w] = bmmo_process_input(input_4w);\r","            [~, options_6w] = bmmo_process_input(input_6w);\r","            [~, options_short] = bmmo_process_input(input_short);\r","            \r","            % Then\r","            obj.sub_assert_filter_lt(options_2w.filter, options_4w.filter);\r","            obj.sub_assert_filter_lt(options_4w.filter, options_6w.filter);\r","            obj.sub_assert_filter_lt(options_6w.filter, options_short.filter);\r","        end\r","        \r","        %% test 6:\r","        function test_bmmo_filter_options_invalid(obj)\r","            % Given\r","            input_struct = bmmo_default_input;\r","            \r","            % When\r","            input_struct.info.configuration_data.filter.T1 = 15.5;\r","            input_struct.info.configuration_data.filter.T2 = 13.5;\r","            input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","            input_struct.info.report_data.time_filtering_enabled = 1;\r","            \r","            % Then\r","            obj.verifyError(@() bmmo_process_input(input_struct), '');\r","            \r","            % Given\r","            input_struct = bmmo_default_input;\r","            \r","            % When\r","            input_struct.info.report_data.T_previous_expose = 15.5;\r","            input_struct.info.report_data.T_current_expose = 13.5;\r","            input_struct.info.report_data.adaptive_time_filter_enabled = 1;\r","            input_struct.info.report_data.time_filtering_enabled = 1;\r","            \r","            % Then\r","            obj.verifyError(@() bmmo_process_input(input_struct), '');\r","        end\r","        \r","        %% test 7:\r","        function test_bmmo_susd_filter_input_no_control(obj)\r","            % Given\r","            input = bmmo_default_input;\r","            input.info.configuration_data.filter.coeff_SUSD = 0.66;\r","            \r","            % When\r","            [~, test_options] = bmmo_process_input(input);\r","            \r","            % Then\r","            obj.sub_assert_filter_equal(test_options.filter.coefficients, bmmo_get_empty_filter);\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[7,8,9,14,15,16,18,19,29,32,33,36,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,62,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,98,104,105,106,107,108,109,110,111,114,115,116,117,120,121,124,125,128,134,135,136,137,138,139,140,141,144,145,146,147,150,151,152,158,161,162,163,164,167,170,173,174,175,176,179,185,186,189,192],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,7,7,7,0,0,0,0,3,3,3,0,3,18,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0]}}