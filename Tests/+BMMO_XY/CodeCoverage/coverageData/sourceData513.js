var sourceData513 = {"FileContents":["function [sbc2, inline_sdm] = bmmo_kt_process_SBC2(filename)\r","% function [sbc2, inline_sdm] = bmmo_kt_process_SBC2(filename)\r","% <help_update_needed>\r","\r","\r","%% Description:\r","% Read an SBC2 NXE subrecipe and format it like the output of\r","% bmmo_nxe_drift_control_model.\r","%\r","% Syntax: [sbc2, header] = bmmo_kt_process_SBC2(filename)\r","%\r","% Input:\r","% - filename: name of the .xml file containing the subrecipe\r","%\r","% Output:\r","% - sbc2: formatted correction set\r","% - inline_sdm: structure containing fields: time_filter\r","%               and sdm_model (both the fields are optional)\r","\r","%% History\r","% 20151008  OTIE\tCreation\r","% 20151009  OTIE\tMinor fix relating to grid formatting\r","% 20151012  OTIE    Fixed KA 2DC: zeros (since only expose grid is present\r","%                   in SBC2 NXE subrecipe)\r","% 20151026  OTIE    Fixed scales (now according to xml schema definition)\r","%                   and set KA values outside wafer radius to NaN\r","% 20160412  SBPR    Minimal rework of ovl_bmmo_nxe_read_SBC2 for BMMO-NXE KT integration testing\r","% 20160426  SBPR    Bugfixes: KA map, INTRAF\r","% 20160503  SBPR    Read Chuck ID explicitly\r","% 20190801  SELR    Updated for IFO in SBC2\r","\r","%% Main function\r","if ischar(filename)\r","    xml = xml_load(filename);\r","else\r","    xml = filename;\r","end\r","\r","sub_check_xml(xml);\r","% parse:\r","sbc2 = [];\r","inline_sdm = [];\r","\r","MAX_CHUCK_NR = 2;\r","\r","for ic = 1:MAX_CHUCK_NR\r","    mask = arrayfun(@(x) endsWith(x.elt.CorrectionSetName, num2str(ic)), xml.CorrectionSets);\r","    ind(ic) = find(mask, 1);\r","    waferstagechuckid = xml.CorrectionSets(ind(ic)).elt.ApplicationRange.Exposure.Wafer.WaferStageChuckId;\r","    chuck_id = str2double(waferstagechuckid(end));\r","    this_set = xml.CorrectionSets(ind(ic)).elt.Parameters;\r","    \r","    %% convert to dd format to use common parsing functions\r","    %         xmlscaling.nm = 1e-9;\r","    %         xmlscaling.urad = 1e-6;\r","    %         xmlscaling.um = 1e-6;\r","    %         xmlscaling.mm = 1e-3;\r","    %         xmlscaling.mag = 0;\r","    \r","    % this_set = bmmo_convert_xml_correction_to_dd(this_set);\r","    % sbc2 = bmmo_kt_process_sbc_correction_new(sbc2, this_set, chuck_id, xmlscaling);\r","    \r","    sbc2 = bmmo_kt_process_sbc_correction(sbc2, this_set, chuck_id);\r","    inline_sdm = sub_get_inline_sdm_info(inline_sdm, this_set, chuck_id);\r","end\r","\r","if ~isempty(inline_sdm)\r","    inline_sdm = sub_verify_inline_sdm_fields(inline_sdm);\r","end\r","\r","xml_corr_IFO = xml.CorrectionSets;\r","xml_corr_IFO(ind) = [];\r","corr_IFO_names = arrayfun(@(x) x.elt.CorrectionSetName, xml_corr_IFO, 'UniformOutput', false);\r","[~, I] = sort(corr_IFO_names);\r","xml_corr_IFO = xml_corr_IFO(I);\r","xml_corr_IFO = arrayfun(@(x) x.elt.Parameters.IntraFieldOffset, xml_corr_IFO);\r","sbc2 = bmmo_parse_sbc_IFO(sbc2, xml_corr_IFO);\r","sbc2 = bmmo_add_missing_corr(sbc2);\r","% check IR/EUV ratio identicality for all sets:\r","if ~all(sbc2.IR2EUV == sbc2.IR2EUV(1))\r","    warning('Different IR/EUV ratios found for different correction sets. Using the first value found.');\r","end\r","sbc2.IR2EUV = sbc2.IR2EUV(1);\r","\r","\r","\r","function inline_sdm =  sub_get_inline_sdm_info(inline_sdm, this_set, chuck_id)\r","if isfield(this_set.SdmDistortionMap.Header,'TimeFilter')\r","inline_sdm(chuck_id).time_filter = str2double(this_set.SdmDistortionMap.Header.TimeFilter);\r","end\r","if isfield(this_set.SdmDistortionMap.Header,'SdmModel')\r","inline_sdm(chuck_id).sdm_model = this_set.SdmDistortionMap.Header.SdmModel;\r","end\r","\r","function inline_sdm = sub_verify_inline_sdm_fields(inline_sdm)\r","\r","fdnames = fieldnames(inline_sdm);\r","for i = 1: length(fdnames)\r","    if ~isequal(inline_sdm.(fdnames{i}), inline_sdm(1).(fdnames{i}))\r","        warning(['Different ',fdnames{i}, ' value found in SdmDistortionMaps. Using the first value found.']);\r","    end\r","end\r","inline_sdm = inline_sdm(1);\r","\r","\r","%% sub_check_xml\r","function sub_check_xml(xml)\r","if ~isfield(xml, 'Header')\r","    warning('No header present in SBC2 file.');\r","end\r","\r","if ~isfield(xml, 'CorrectionSets')\r","    error('No correction sets present in SBC2 file. Exiting');\r","end\r","if isempty(xml.CorrectionSets)\r","    error('No correction sets present in SBC2 file. Exiting');\r","elseif length(xml.CorrectionSets) ~= 2 && length(xml.CorrectionSets) ~= 6\r","    warning('SBC file not according to spec, 2 corrections (SBC2) or 6 corrections (SBC2a) are expected');\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[33,34,35,36,39,41,42,44,46,47,48,49,50,51,63,64,67,68,71,72,73,74,75,76,77,78,80,83,88,89,91,92,97,98,99,103,108,112,115,117],"UnhitLineNumbers":[81,100,109,113,116,118],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,1,1,0,0,6,0,6,6,0,6,0,6,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,12,12,0,0,6,2,0,0,6,6,6,6,6,6,6,6,0,6,0,0,6,0,0,0,0,12,4,0,12,4,0,0,0,0,2,2,4,0,0,0,2,0,0,0,0,6,0,0,0,6,0,0,6,0,6,0,0,0,0]}}