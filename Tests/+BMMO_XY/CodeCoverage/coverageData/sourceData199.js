var sourceData199 = {"FileContents":["function averageFingerPrint = getAverageFingerPrintsFromGroupedFingerPrints(cellOfFingerPrints, location, amount)\r","% averageFingerPrint = getAverageFingerPrintsFromGroupedFingerPrints(cellOfFingerPrints, location, amount)\r","%\r","% Function to get the average fingerprint from a set of\r","% fingerprints. The selection is either starting from the first (\"start\")\r","% or the last (\"end\") dataset and contains 'amount' number of sets selected\r","% in a linear order.\r","%\r","% Input arguments:\r","% -cellOfFingerPrints    [ cell array of structs ]  Cell containing the\r","%                                                       field fingerprints of the jobs.\r","%                                                       The ffps can be extracted using the function extractArrayFromStruct.m\r","% -location              [ string ]                 String specifying whether the data selection starts \r","%                                                       from the first wafer (\"start\") or ends at\r","%                                                       the last (\"end\") wafer\r","% -amount                [ double ]                 Specifies the amount of\r","%                                                       wafers in the set\r","% Output arguments:\r","% - averageFingerPrint   [ struct ]                 Struct containing the\r","%                                                       average field fingerprint of the selected data sets\r","%\r","\r","if string(location) ~= \"start\" && string(location) ~= \"end\"\r","    error('Input argument \"location\" can only be \"start\" or \"end\"');\r","end\r","\r","selection = num2cell(cellOfFingerPrints{1});\r","slice     = getSliceFromLocationAndAmount(location, amount, length(selection));\r","try\r","    averageFingerPrint = ovl_combine_wafers(selection{slice});\r","catch\r","    averageFingerPrint = ovl_combine_wafers(selection{:});\r","end\r","\r","for index = 2 : length(cellOfFingerPrints)    \r","    selection = num2cell(cellOfFingerPrints{index});\r","    slice     = getSliceFromLocationAndAmount(location, amount, length(selection));\r","    try\r","        averageFingerPrint = ovl_combine_wafers(averageFingerPrint, selection{slice});\r","    catch\r","        averageFingerPrint = ovl_combine_wafers(averageFingerPrint, selection{:});\r","    end\r","end\r","\r","averageFingerPrint = ovl_average(averageFingerPrint);\r","\r","end\r","\r","\r","function slice = getSliceFromLocationAndAmount(location, amount, nrOfWafers)\r","\r","if string(location) == \"start\"\r","    sliceStart = 1;\r","    sliceEnd   = amount;\r","else\r","    sliceStart = nrOfWafers - amount + 1;\r","    sliceEnd   = nrOfWafers;\r","end\r","\r","slice = sliceStart : sliceEnd;\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[23,24,27,28,29,30,31,32,35,36,37,38,39,40,41,45,52,53,54,55,56,57,60],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}