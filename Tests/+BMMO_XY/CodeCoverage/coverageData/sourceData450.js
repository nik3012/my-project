var sourceData450 = {"FileContents":["\r","function bmmo_inject_ADELmetrology_wids(adelmet_in, target, wids)\r","% function bmmo_inject_ADELmetrology_wids(adelmet_in, type, wids)\r","%\r","% Inject the given wids into a given ADELmetrology file\r","% The WIDS can be either a cell array of strings, or a cell array of \r","% 2-element ml arrays, where ml(1) encodes WID_UP and ml(2) encodes\r","% WID_DOWN\r","%\r","% Input: adelmet_in: full path of adelmetrology file\r","%        wids: either a 1 x n cell array of wafer id strings, or an ml structure  \r","% \r","% Output: \r","\r","\r","% read adelmetrology measurements into ml structure\r","disp('Reading ADELmetrology file');\r","[ml, header] = bmmo_read_adelmetrology(adelmet_in);\r","\r","mlid = 0;\r","for id = 1:length(ml)\r","    if strcmp(ml(id).targetlabel, target)\r","        mlid = id;\r","    end\r","end\r","if mlid == 0\r","    error('target %s not found in adelmetrology file', target);\r","end\r","\r","machine_id = header.MachineID;\r","\r","if iscell(wids) && ischar(wids{1})\r","    nwafer_wids = length(wids);\r","else\r","    nwafer_wids = wids.nwafer;\r","end\r","assert(nwafer_wids >= ml(mlid).nwafer, 'Not enough wids specified for input data');\r","\r","% (if needed) convert given wid into YS wid marks in separate ml structures\r","if iscell(wids) && ischar(wids{1})\r","    disp('Encoding WIDs');\r","    for iw = 1:nwafer_wids\r","        mlwid{iw} = bmmo_encode_wid(wids{iw});\r","    end\r","    \r","    % combine the per-wafer wid data into two ml structures\r","    ml_wid_up = mlwid{1}(1);\r","    ml_wid_down = mlwid{1}(2);\r","    for iw = 2:nwafer_wids\r","        ml_wid_up = ovl_combine_wafers(ml_wid_up, mlwid{iw}(1));\r","        ml_wid_down = ovl_combine_wafers(ml_wid_down, mlwid{iw}(2));\r","    end\r","else\r","    % split into WID_UP and WID_DOWN targets\r","    ml_wid_up = sub_get_subset(wids, 1);\r","    ml_wid_down = sub_get_subset(wids, -1);\r","end\r","\r","\r","\r","% write adelmetrology again\r","disp('writing ADELmetrology');\r","bmmo_write_adelmetrology(ml_wid_up, ml_wid_down, ml(mlid), 'wid_injected', machine_id);\r","\r","\r","function mlo = sub_get_subset(mli, k)\r","\r","mlo = mli;\r","if k > 0\r","   subids = mlo.wd.yw > 0; \r","else\r","   subids = mlo.wd.yw < 0; \r","end\r","\r","subids = find(subids);\r","subids = subids(2:2:end); % only encode the 92 marks used\r","\r","mlo.wd.xc = mlo.wd.xc(subids);\r","mlo.wd.yc = mlo.wd.yc(subids);\r","mlo.wd.xf = mlo.wd.xf(subids);\r","mlo.wd.yf = mlo.wd.yf(subids);\r","mlo.wd.xw = mlo.wd.xw(subids);\r","mlo.wd.yw = mlo.wd.yw(subids);\r","\r","for il = 1:mlo.nlayer\r","    for iw = 1:mlo.nwafer\r","        mlo.layer(il).wr(iw).dx = mlo.layer(il).wr(iw).dx(subids);\r","        mlo.layer(il).wr(iw).dy = zeros(size(mlo.layer(il).wr(iw).dx));\r","    end\r","end\r","\r","mlo.nfield = length(mlo.wd.xc);\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[17,18,20,21,22,23,26,27,30,32,33,34,35,37,40,41,42,43,47,48,49,50,51,53,55,56,62,63,68,69,70,71,72,75,76,78,79,80,81,82,83,85,86,87,88,92],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}