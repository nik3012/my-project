var sourceData545 = {"FileContents":["function mlo = bmmo_apply_wec(mli, wecdir, wids)\r","% function mlo = bmmo_apply_wec(mli, wecdir, wids)\r","%\r","% Apply the wec files in wecdir to the wafers in mli, with the wafer ids\r","% given by wids in order\r","%\r","% Input:\r","%   mli: overlay structure with n wafers\r","%   wecdir: directory containing WEC files\r","%   wids: 1*n cell array of strings: wafer IDs of the wafers in mli, in\r","%       order\r","%\r","% Output: \r","%   mlo: mli with WEC applied\r","%\r","% 20170103 SBPR Creation\r","% 20170519 SBPR Now allows ml input data to have points with no WEC\r","%   correction\r","\r","% make sure wids has the same length as the number of wafers in mli\r","assert(length(wids) == mli.nwafer, 'number of wids does not match input number of wafers');\r","\r","% initialize output\r","mlo = mli;\r","\r","% read wecdir\r","list = dir(wecdir);\r","fnames = {list.name};\r","\r","flist = cell(1, mli.nwafer);\r","% find the adel wec files corresponding to the wids in wecdir\r","disp('Mapping WEC files:');\r","for iw = 1:mli.nwafer\r","    wec_id = logical(cellfun(@length, strfind(fnames, wids{iw})));\r","    assert(length(find(wec_id)) == 1, 'Unable to map WEC file for WID %s', wids{iw});\r","    flist{iw} = fnames{wec_id};\r","    d = sprintf('Wafer %d: %s', iw, flist{iw});\r","    disp(d);\r","end\r","\r","disp('Subtracting WEC offsets');\r","xy_in = [mli.wd.xw mli.wd.yw];\r","% for each wafer\r","for iw = 1:mli.nwafer\r","\r","    wecfilename = [wecdir filesep flist{iw}];\r","    [res.xy, res.dxy] = bmmo_parse_wec(wecfilename);\r","\r","    \r","    % map the marks to the wafer map definition in mli\r","    [I, D] = knnsearch(res.xy, xy_in);\r","    \r","    \r","    valid_points = (D < 1e-6);\r","    if any(~valid_points)\r","        warning('Warning: Not all data points have WEC correction!');\r","        warning('Setting uncorrected points to NaN');\r","    end\r","        \r","    %assert(all(D < 1e-6), 'failed to map points of input');\r","    %assert(length(unique(I)) == length(I), 'failed to make one-to-one mapping')\r","    \r","    % subtract the offsets from the offsets for this wafer\r","    for il = 1:mli.nlayer\r","        mlo.layer(il).wr(iw).dx(valid_points) = mli.layer(il).wr(iw).dx(valid_points) - res.dxy(I(valid_points), 1);\r","        mlo.layer(il).wr(iw).dy(valid_points) = mli.layer(il).wr(iw).dy(valid_points) - res.dxy(I(valid_points), 2);\r","        \r","        mlo.layer(il).wr(iw).dx(~valid_points) = NaN;\r","        mlo.layer(il).wr(iw).dy(~valid_points) = NaN;\r","    end\r","\r","end\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[21,24,27,28,30,32,33,34,35,36,37,38,41,42,44,46,47,51,54,55,64,65,66,68,69],"UnhitLineNumbers":[56,57],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,4,4,0,4,0,4,4,14,14,14,14,14,0,0,4,4,0,4,0,14,14,0,0,0,14,0,0,14,14,0,0,0,0,0,0,0,0,14,14,14,0,14,14,0,0,0,0,0,0]}}