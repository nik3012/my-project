var sourceData29 = {"FileContents":["function [mlo, ml_wh] = bmmo_WH_SBC_fingerprint(mli, options)\r","% function [mlo, ml_wh] = bmmo_WH_SBC_fingerprint(mli, options)\r","%\r","% This function returns an ml structure corresponding to the input SBC\r","% WH fingerprint and its behaviour is based on options.WH.use_input_fp_per_wafer\r","% \r","% Input:\r","%  mli: input ml structure\r","%  fingerprint: WH fingerprint (1x2 struct array)\r","%  options:\r","%   wh_fp: input wafer heating fingerprint, per wafer(for de-correction)/averaged per chuck\r","% \r","% Output:\r","%  mlo: output ml structure containing the WH fingerprint in the same layout as mli\r","%  ml_wh: mlo averaged per chuck\r","%\r","% For details of the model and definitions of in/out interfaces, refer to\r","% D000810611 EDS BMMO NXE drift control model\r","\r","if options.WH.use_input_fp_per_wafer \r","    wh_fp = options.WH.fp;\r","    \r","else                                 \r","    wh_fp     = ovl_get_wafers(options.WH.fp, []);\r","    for ichk  = 1 : length(options.chuck_usage.chuck_id)\r","        wh_fp = ovl_combine_wafers(wh_fp, options.WH.input_fp_per_chuck(options.chuck_usage.chuck_id(ichk)));\r","    end\r","end\r","\r","lambda_old = (options.previous_correction.IR2EUV /options.IR2EUVsensitivity);\r","mlo        = ovl_combine_linear(mli, 0, wh_fp, lambda_old);\r","\r","ml_wh      = bmmo_average_chuck(mlo, options);\r","\r","\r","end"],"CoverageData":{"CoveredLineNumbers":[20,21,23,24,25,26,30,31,33],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,766,150,0,616,616,616,3198,0,0,0,766,766,0,766,0,0,0]}}