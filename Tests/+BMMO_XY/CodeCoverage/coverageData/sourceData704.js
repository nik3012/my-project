var sourceData704 = {"FileContents":["%% history:\r","%   2015-10-05  JIMI  creation\r","%   2019-01-03  SELR  added case 1.7\r","\r","function test_suite = test_bmmo_resample\r","suite = initTestSuite2016(localfunctions);\r","if nargout==0\r","    suite.run();\r","else\r","    test_suite = suite;\r","end\r","\r","\r","function test_bmmo_resample_case_1 %#ok<DEFNU>\r","% test set 1\r","% sample 4*4 grid to 5*5\r","% options: with/wo bounding box, with/wo NaN interpolation, different wafersize, gaussian radii\r","%  .   .   .   .   .\r","%    1   1   1   1  \r","%  .   .   .   .   .\r","%    1   2   2   1   \r","%  .   .   .   .   .\r","%    1   2   2   1   \r","%  .   .   .   .   .\r","%    1   1   1   1\r","%  .   .   .   .   .\r","ix = (-1.5:1:1.5)';\r","ox = (-2:2)';\r","[mix, miy] = meshgrid(ix, ix);\r","[mox, moy] = meshgrid(ox, ox);\r","mli.wd.xw = mix(:);\r","mli.wd.yw = miy(:);\r","mlt.wd.xw = mox(:);\r","mlt.wd.yw = moy(:);\r","mli.nlayer = 1;\r","mli.nwafer = 1;\r","mlt.nlayer = 1;\r","mlt.nwafer = 1;\r","mli.layer.wr.dx = [1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1]';\r","mli.layer.wr.dy = mli.layer.wr.dx;\r","options.interp_type = 'gauss';\r","options.gauss_radius = 2;\r","\r","%1 Gaussian interpolation\r","%1.1: no bounding box, no NaN interpolation, nothing removed \r","options.bounding_box = 'none';\r","options.nan_interpolation = 'none';\r","options.wafersize = 10;\r","mlo11 = bmmo_resample(mli, mlt, options);\r","\r","%1.2 bounding box, no NaN interpolation, nothing removed\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'none';\r","options.wafersize = 10;\r","mlo12 = bmmo_resample(mli, mlt, options);\r","\r","%1.3 bounding box, NaN interpolation, nothing removed\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'near4';\r","options.wafersize = 10;\r","mlo13 = bmmo_resample(mli, mlt, options);\r","\r","%1.4 bounding box, NaN interpolation, wafersize = 3\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'near4';\r","options.wafersize = 3;\r","mlo14 = bmmo_resample(mli, mlt, options);\r","\r","%1.5 bounding box, no NaN interpolation, wafersize = 3\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'none';\r","options.wafersize = 3;\r","mlo15 = bmmo_resample(mli, mlt, options);\r","\r","%1.6 no bounding box, no NaN interpolation, wafersize = 3\r","options.bounding_box = 'none';\r","options.nan_interpolation = 'none';\r","options.wafersize = 3;\r","mlo16 = bmmo_resample(mli, mlt, options);\r","\r","%1.7 negative bounding box, no NaN interpolation, nothing removed\r","options.bounding_box = sub_create_bounding_box(-2.5);\r","options.nan_interpolation = 'none';\r","options.wafersize = 10;\r","mlo17 = bmmo_resample(mli, mlt, options);\r","\r","% inspect some values\r","dx11map = reshape(mlo11.layer.wr.dx, [5,5]);\r","dx14map = reshape(mlo14.layer.wr.dx, [5,5]);\r","assert(dx11map(3,3) == 2 );\r","assert(dx11map(1,1) == 1 );\r","assert(dx14map(3,3) == 2 );\r","assert(isnan(dx14map(1,1)) );\r","assert(dx14map(2,2) == 1.25 );\r","\r","% 1.1, 1.2, 1.3, 1.7 should produce the same results\r","bmmo_assert_equal(mlo11, mlo12);\r","bmmo_assert_equal(mlo11, mlo13);\r","bmmo_assert_equal(mlo11, mlo17);\r","\r","% 1.4, 1.5, 1.6 should produce the same results\r","bmmo_assert_equal(mlo14, mlo15);\r","bmmo_assert_equal(mlo14, mlo16);\r","\r","% 2. same with linear interpolation\r","options.interp_type = 'linear';\r","\r","%2.1: no bounding box, no NaN interpolation, nothing removed \r","options.bounding_box = 'none';\r","options.nan_interpolation = 'none';\r","options.wafersize = 10;\r","mlo21 = bmmo_resample(mli, mlt, options);\r","\r","%2.2 bounding box, no NaN interpolation, nothing removed\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'none';\r","options.wafersize = 10;\r","mlo22 = bmmo_resample(mli, mlt, options);\r","\r","%2.3 bounding box, NaN interpolation, nothing removed\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'near4';\r","options.wafersize = 10;\r","mlo23 = bmmo_resample(mli, mlt, options);\r","\r","%2.4 bounding box, NaN interpolation, wafersize = 3\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'near4';\r","options.wafersize = 3;\r","mlo24 = bmmo_resample(mli, mlt, options);\r","\r","%2.5 bounding box, no NaN interpolation, wafersize = 3\r","options.bounding_box = sub_create_bounding_box(2.5);\r","options.nan_interpolation = 'none';\r","options.wafersize = 3;\r","mlo25 = bmmo_resample(mli, mlt, options);\r","\r","%2.6 no bounding box, no NaN interpolation, wafersize = 3\r","options.bounding_box = 'none';\r","options.nan_interpolation = 'none';\r","options.wafersize = 3;\r","mlo26 = bmmo_resample(mli, mlt, options);\r","\r","% checks: 2.3 should be the same as 1.1; all others should be the same as 1.4\r","bmmo_assert_equal(mlo23, mlo11);\r","bmmo_assert_equal(mlo21, mlo14);\r","bmmo_assert_equal(mlo22, mlo21);\r","bmmo_assert_equal(mlo24, mlo21);\r","bmmo_assert_equal(mlo25, mlo21);\r","bmmo_assert_equal(mlo26, mlo21);\r","\r","\r","function test_bmmo_resample_case_2 %#ok<DEFNU>\r","\r","% 3. test with realistic ml structures\r","options.interp_type = 'linear';\r","options.bounding_box = sub_create_bounding_box(1.5);\r","options.nan_interpolation = 'diagonal';\r","options.wafersize = 10;\r","mli1 = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19', 'nlayer', 1, 'nwafer', 1);\r","mli2 = ovl_create_dummy('marklayout','BA-XY-DYNA-7X7', 'nlayer', 1, 'nwafer', 1);\r","dx13x9 = 1e-9 * randn(size(mli1.layer.wr.dx));\r","dx7x7 = 1e-9 * randn(size(mli2.layer.wr.dx));\r","mli1.layer.wr.dx = dx13x9;\r","mli2.layer.wr.dx = dx7x7;\r","mlo_down = bmmo_resample(mli1, mli2, options);\r","mlo_down_up = bmmo_resample(mlo_down, mli1, options);\r","mlo_up = bmmo_resample(mli2, mli1, options);\r","mlo_up_down = bmmo_resample(mlo_up, mli2, options);\r","\r","% the abs difference between the re-resampled values and the original should have a lower std than randn data!\r","assert(std(abs(mlo_up_down.layer.wr.dx - mli2.layer.wr.dx)) < 1e-9);\r","assert(std(abs(mlo_down_up.layer.wr.dx - mli1.layer.wr.dx)) < 1e-9);\r","\r","% the dy values are all 0\r","assert(isequal(mlo_up_down.layer.wr.dy, mli2.layer.wr.dy));\r","assert(isequal(mlo_down_up.layer.wr.dy, mli1.layer.wr.dy));\r","\r","\r","function bb = sub_create_bounding_box(r)\r"," \r","rx1 = r;\r","ry1 = rx1;\r","bbx = [-rx1 -rx1 rx1 rx1];\r","bby = [-ry1 ry1 -ry1 ry1];\r","bb = [bbx; bby]';"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[6,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,52,53,54,55,58,59,60,61,64,65,66,67,70,71,72,73,76,77,78,79,82,83,84,85,88,89,90,91,92,93,94,97,98,99,102,103,106,109,110,111,112,115,116,117,118,121,122,123,124,127,128,129,130,133,134,135,136,139,140,141,142,145,146,147,148,149,150,156,157,158,159,160,161,162,163,164,165,166,167,168,169,172,173,176,177,182,183,184,185,186],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}