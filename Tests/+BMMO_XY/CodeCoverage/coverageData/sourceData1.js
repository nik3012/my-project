var sourceData1 = {"FileContents":["function allTestsPassed = MODULE_test(varargin)\r","\r","% Get the root of this module\r","moduleRoot = fileparts(mfilename('fullpath'));\r","\r","% Process input arguments\r","inputArguments = processInputArguments(varargin);\r","\r","% Determine which tests to perform\r","switch inputArguments.whichTests\r","    case 'all'\r","        testsToExecute = {[moduleRoot filesep 'testSuite' filesep 'testCases']; ...\r","                          [moduleRoot filesep 'testSuite' filesep 'testCasesExt']; ...\r","                          [moduleRoot filesep 'testSuite' filesep 'testCasesWindows']; ...\r","                          'BMMO_XY'};\r","    case 'base'\r","        testsToExecute = {[moduleRoot filesep 'testSuite' filesep 'testCases']; ...\r","                          'BMMO_XY'};\r","    case 'extended'\r","        testsToExecute = {[moduleRoot filesep 'testSuite' filesep 'testCases']; ...\r","                          [moduleRoot filesep 'testSuite' filesep 'testCasesExt']; ...\r","                          'BMMO_XY'};\r","    case 'windows'\r","        testsToExecute = {[moduleRoot filesep 'testSuite' filesep 'testCasesWindows']};\r","    case 'none'\r","        disp('Dry-run, no tests will be executed.');\r","        testsToExecute = {};\r","    otherwise\r","        error('Tests incorrectly specified');\r","end\r","\r","% Create input arguments for runtests\r","runtestsOptions = {'IncludeSubPackages', true, 'UseParallel', inputArguments.useParallel};\r","\r","% Disable warnings\r","warning('off', 'all');\r","\r","% Isolate Module\r","module.IsolatedModule(moduleRoot);\r","\r","% Include the test directories\r","modConf  = MODULE_conf();\r","testDirs = cellfun(@(x) replace(x, '.', moduleRoot), modConf.testDir, 'UniformOutput', false);\r","cellfun(@(x) addpath(x), testDirs);\r","\r","% Run the tests\r","allTestsPassed = true;\r","for index = 1 : length(testsToExecute)\r","    try\r","        testsPassed = xunit_runtests(testsToExecute{index}, '-verbose');\r","    catch\r","        testsResults = runtests(testsToExecute{index}, runtestsOptions{:});\r","        testsPassed  = all(arrayfun(@(x) x.Passed, testsResults));\r","    end\r","    allTestsPassed = allTestsPassed && testsPassed;\r","end\r","\r","% Reenable warnings\r","warning('on', 'all');\r","\r","end\r","\r","\r","function inputArguments = processInputArguments(inargs)\r","\r","p = inputParser;\r","\r","validationFunctionText    = @(x) ischar(x);\r","validationFunctionlogical = @(x) isa(x, 'logical');\r","\r","defaultWhichTests  = 'base';\r","defaultUseParallel = false;\r","\r","p.addParameter('whichTests', defaultWhichTests, validationFunctionText);\r","p.addParameter('useParallel', defaultUseParallel, validationFunctionlogical);\r","\r","p.parse(inargs{:});\r","\r","inputArguments = p.Results;\r","\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[4,7,10,11,12,13,14,16,17,19,20,21,23,24,25,26,27,28,29,33,36,39,42,43,44,47,48,49,50,51,52,53,55,59,66,68,69,71,72,74,75,77,79],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}