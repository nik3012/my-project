var sourceData523 = {"FileContents":["function [sbc, kpi, new_inputs] = bmmo_rerun(inputs, process_input, args)\r","% function [sbc, kpi] = bmmo_rerun(inputs, process_input, args)\r","%\r","% Rerun BMMO-NXE loop, processing the inputs as in the specified function. \r","% By default, use bmmo_recorrect with 18par update of previous_correction\r","%\r","% Input:\r","%   inputs: 1xn vector of BMMO-NXE input structures (e.g. as returned by\r","%       bmmo_read_all_zips)\r","%\r","% Optional input: \r","%   process_input: handle of function to process inputs, with the signature\r","%       function new_input = process_input(input, args)\r","%   args: structure of input arguments, containing at least the following fields:\r","%       previous_input: valid BMMO-NXE input structure\r","%       previous_output: valid BMMO-NXE output structure\r","%\r","% Output:\r","%   sbc: 1xn vector of SBC2 corrections\r","%   kpi: 1xn vector of model KPI\r","%   new_inputs: 1xn vector of inputs as modified by process_input fn\r","%\r","% 20180212 SBPR Creation\r","\r","if nargin < 2\r","    [~, options] = bmmo_process_input(inputs(1)); \r","    if options.intraf_actuation_order == 5\r","        process_input = @default_process_input_bl3;\r","    else\r","        process_input = @default_process_input; % definition below;\r","    end\r","    args.previous_input = inputs(1);\r","    temp_out.corr = inputs(1).info.previous_correction;\r","    args.previous_output = temp_out;\r","    args.iteration = 1;\r","end\r","\r","num_iterations = length(inputs);\r","h = waitbar(0/num_iterations, 'Running BMMO simulation');\r","\r","for k = 1:num_iterations\r","\r","    % do some input processing\r","    new_inputs(k) = feval(process_input, inputs(k), args);\r","    % run the model\r","    bmmo_output = bmmo_nxe_drift_control_model(new_inputs(k));\r","    \r","    kpi(k) = bmmo_output.report.KPI;\r","    \r","    sbc(k) = rmfield(bmmo_output.corr, 'Configurations');\r","    \r","    args.previous_input = new_inputs(k);\r","    args.previous_output = bmmo_output;\r","    args.iteration = args.iteration + 1;\r","    \r","    waitbar(k/num_iterations, h);\r","end\r","\r","function input_out = default_process_input(input_in, args)\r","\r","input_out = bmmo_recorrect(input_in, args.previous_output.corr, @bmmo_update_corr_18par);\r","\r","function input_out = default_process_input_bl3(input_in, args)\r","\r","input_out = bmmo_recorrect(input_in, args.previous_output.corr, @bmmo_update_corr_33par);\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[25,26,27,28,29,30,32,33,34,35,38,39,41,44,46,48,50,52,53,54,56,61,65],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}