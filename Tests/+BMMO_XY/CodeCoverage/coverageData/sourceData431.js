var sourceData431 = {"FileContents":["function meas = bmmo_ADELmetro_mat2xml(xml, fid, dotcount, meas, depth)\r","%MAT2XML Convert matlab structure to XML\r","% \r","% Alternative to built-in XMLWRITE, which does not compile under R13.\r","% \r","% Usage:\r","%   Save to file                  --> MAT2XML(xml, savefile)\r","%   Convert to string             --> txt = MAT2XML(xml)\r","%   Use alternative header+footer --> txt = MAT2XML(xml, '', txt_head, txt_foot)\r","% \r","% Where xml is the to-be-converted (nested multidimensional) structure:\r","%   - Items of xml may be strings or numbers, but not cells or matrices.\r","%   - Items are written in same sequence as in structure.\r","%   - Tab sign indentation is applied.\r","%   - Default header is <?xml version=\"1.0\"?>, default footer empty\r","% \r","% Author:\r","%   Jasper Menger, April 2011\r","% \r","% 20160407 SBPR in search of faster alternative to struct2xml for\r","%               ADELmetrology generation\r","\r","% Optional arguments\r","indent    = ''      ; \r","precision = '%g'    ;\r","if nargin < 5 \r","    depth = 1; \r","end\r","\r","% Quick sanity check\r","if ~isstruct(xml)\r","    error('Input must be a structure');\r","end\r","\r","\r","% Hop through the fields of xml struct in default sequence\r","names = fieldnames(xml);\r","for f = 1:numel(names)\r","    name = names{f};\r","    \r","    if strcmp(name, 'SequenceNumber')\r","        meas = meas + 1;\r","    end\r","\r","    if meas == dotcount\r","        fprintf(stdout, '.');\r","        meas = 0;\r","    end\r","    \r","    % skip fields that have been handled already\r","    if ~strcmp(name, 'Text') && ~strcmp(name, 'Attributes')\r","    \r","        % Hop through the items for this field\r","        content = xml.(name);\r","\r","        if isstruct(content)\r","            for i = 1:numel(content)\r","\r","                %before printing here, we should build an attribute string\r","                %if one exists\r","                attributes = '';\r","                if isfield(content(i), 'Attributes')\r","                    attributes = sub_get_attributes(content(i).Attributes);\r","                end\r","\r","                cname = strrep(name, '_colon_', ':');\r","                \r","                % Write field name (assume we start on unindented newline)\r","                if depth == 1\r","                    fprintf(fid, '<?xml version=\"1.0\"?>\\n<%s:MetrologyReport %s>', cname, attributes); \r","                else\r","                    fprintf(fid, '%s<%s%s>', indent, cname, attributes);\r","                end\r","                % Have a look at the content\r","                if isfield(content(i), 'Text')\r","                    text = sub_get_text(content(i).Text);\r","                    fprintf(fid, '%s', text);\r","                else\r","                    fprintf(fid, '\\n');\r","                end\r","\r","                % Take care of structs within structs by recursive call to oneself\r","\r","                meas = bmmo_ADELmetro_mat2xml(content(i), fid, dotcount, meas, depth + 1);\r","                % Properly close the field\r","                if depth == 1\r","                    fprintf(fid, '</%s:MetrologyReport>\\n', cname);\r","                else\r","                    if isfield(content(i), 'Text')\r","                        fprintf(fid, '</%s>\\n',  cname);\r","                    else\r","                        fprintf(fid, '%s</%s>\\n', indent, cname);\r","                    end\r","                end\r","            end\r","         elseif isnumeric(content)\r","                fprintf(fid, '%s<%s>', indent, name);\r","                % Write number with designated precision\r","                txt = sprintf(precision, content);\r","                fprintf(fid, '%s</%s>\\n', txt, name);\r","\r","         elseif ischar(content)\r","                fprintf(fid, '%s<%s>', indent, name);\r","                % Just paste string content\r","                txt = content;\r","                fprintf(fid, '%s</%s>\\n', txt, name);\r","\r","         else\r","                % Illegal content. Raise the alarm! Slow whoop all over!\r","                error('Invalid class %s for field %s', class(content), name);\r","\r","         end % of content inspection\r","    end  \r","end % of field loop\r","\r","\r","function text = sub_get_attributes(attr)\r","\r","text = '';\r","\r","fn = fieldnames(attr);\r","for ifield = 1:length(fn)\r","   cname = strrep(fn{ifield}, '_colon_', ':');\r","   text = [text ' ' cname '=\"'];\r","   if isnumeric(attr.(fn{ifield}))\r","       val = sprintf(precision, attr.(fn{ifield}));\r","   else\r","       val = attr.(fn{ifield});\r","   end\r","   text = [text val '\"'];\r","end\r","\r","function txt = sub_get_text(val)\r","\r","if isnumeric(val)\r","   txt = sprintf(precision, val);\r","else\r","   txt = val;\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[24,25,26,27,31,32,37,38,39,41,42,45,46,47,51,54,56,57,61,62,63,66,69,70,71,72,75,76,77,78,79,84,86,87,88,89,90,91,92,96,97,99,100,102,103,105,106,108,110,119,121,122,123,124,125,126,127,128,130,135,136,137,138],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}