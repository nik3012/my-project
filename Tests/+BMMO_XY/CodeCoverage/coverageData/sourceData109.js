var sourceData109 = {"FileContents":["function bmmo_generate_parlist\r","% function bmmo_generate_parlist\r","% \r","% Generate a ovl parameter list for BMMO/Bl3\r","%\r","% Output:\r","%  parlist: structure with one field per parameter, with the same\r","%           name as the parameter\r","\r","plist = ovl_metro_parameters('10par', 'rswfr', 'rwy', 'allk20', 'rx', 'allk35');\r","\r","% add 'rxwfr'\r","rswfr_idx = find(strcmp({plist.static.name}, 'rswfr'));\r","pnew = plist.static(rswfr_idx);\r","pnew.name = 'rxwfr';\r","pnew.args{3} = [0];\r","pnew.args{4} = [0 0 0 0 0 0];\r","plist.static(end+1) = pnew;\r","\r","f = fopen('bmmo_parlist.m', 'w');\r","\r","% print the comment header\r","\r","fprintf(f, 'function parlist = bmmo_parlist\\n');\r","fprintf(f, '%% function parlist = bmmo_parlist\\n');\r","fprintf(f, '%%\\n%% Generate a parameter list for BMMO-NXE\\n');\r","fprintf(f, '%%\\n%% This function is autogenerated by the function bmmo_generate_parlist\\n');\r","fprintf(f, '%%\\n%% Input: none\\n');\r","fprintf(f, '%%\\n%% Output: parlist: structure with one field per parameter\\n');\r","fprintf(f, '%%\\n%% %s Last generation time\\n%%\\n\\n', date);\r","\r","% print the contents of the function\r","\r","fprintf(f, '%%                      |     dx exponents    |      dy exponents\\n'); \r","fprintf(f, '%%                      dx xf yf xc yc xw yw dy xf yf xc yc xw yw\\n');\r","for ipar = 1:length(plist.static)\r","   fprintf(f, 'parlist.%s.args \\t= [', plist.static(ipar).name);\r","   fprintf(f, '%d  ', [plist.static(ipar).args{:}]);\r","   fprintf(f, '];\\n');\r","end\r","\r","for ipar = 1:length(plist.static)\r","   switch(plist.static(ipar).name) \r","       case 'tx'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_onesfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_zerosfun;\\n', plist.static(ipar).name);\r","       case 'ty'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_zerosfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_onesfun;\\n', plist.static(ipar).name);\r","       case 'rs'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_minyffun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_xffun;\\n', plist.static(ipar).name);\r","       case 'ra'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_minyffun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_minxffun;\\n', plist.static(ipar).name);\r","       case 'ms'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_xffun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_yffun;\\n', plist.static(ipar).name);\r","       case 'ma'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_xffun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_minyffun;\\n', plist.static(ipar).name);\r","       case 'rws'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_minycfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_xcfun;\\n', plist.static(ipar).name);\r","       case 'rwa'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_minycfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_minxcfun;\\n', plist.static(ipar).name);\r","       case 'mws'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_xcfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_ycfun;\\n', plist.static(ipar).name);\r","       case 'mwa'\r","           fprintf(f, 'parlist.%s.dxfun = @sub_xcfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_minycfun;\\n', plist.static(ipar).name);\r","       otherwise\r","           fprintf(f, 'parlist.%s.dxfun = @sub_dxfun;\\n', plist.static(ipar).name);\r","           fprintf(f, 'parlist.%s.dyfun = @sub_dyfun;\\n', plist.static(ipar).name);\r","   end\r","end\r","   \r","% add some aliases\r","fprintf(f, 'parlist.k1 = parlist.tx;\\n');\r","fprintf(f, 'parlist.k2 = parlist.ty;\\n');\r","fprintf(f, 'parlist.k3 = parlist.mx;\\n');\r","fprintf(f, 'parlist.k4 = parlist.my;\\n');\r","fprintf(f, 'parlist.k6 = parlist.ry;\\n');\r","\r","fprintf(f, 'parlist.d2 = parlist.k7;\\n');\r","fprintf(f, 'parlist.d2x = parlist.k7;\\n');\r","fprintf(f, 'parlist.trzx = parlist.k9;\\n');\r","fprintf(f, 'parlist.trzy = parlist.k10;\\n');\r","fprintf(f, 'parlist.bowxf = parlist.k11;\\n');\r","fprintf(f, 'parlist.bowyf = parlist.k12;\\n');\r","fprintf(f, 'parlist.d2y = parlist.k12;\\n');\r","fprintf(f, 'parlist.d3 = parlist.k13;\\n');\r","fprintf(f, 'parlist.d3x = parlist.k13;\\n');\r","fprintf(f, 'parlist.mag3y = parlist.k14;\\n');\r","fprintf(f, 'parlist.accx = parlist.k15;\\n');\r","fprintf(f, 'parlist.accy = parlist.k16;\\n');\r","fprintf(f, 'parlist.cshpx = parlist.k17;\\n');\r","fprintf(f, 'parlist.cshpy = parlist.k18;\\n');\r","fprintf(f, 'parlist.flw3x = parlist.k19;\\n');\r","fprintf(f, 'parlist.flw3y = parlist.k20;\\n');\r","\r","% add the evaluation functions\r","fprintf(f, '\\n\\nfunction v = sub_dxfun(wd, args)\\n\\n');\r","fprintf(f, 'v = args(1) .* wd.xf.^args(2) .* wd.yf.^args(3) .* wd.xc.^args(4) .* wd.yc.^args(5) .* wd.xw.^args(6) .* wd.yw.^args(7);\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_dyfun(wd, args)\\n\\n');\r","fprintf(f, 'v = args(8) .* wd.xf.^args(9) .* wd.yf.^args(10) .* wd.xc.^args(11) .* wd.yc.^args(12) .* wd.xw.^args(13) .* wd.yw.^args(14);\\n'); \r","\r","% quicker functions for simpler parameters\r","fprintf(f, '\\n\\nfunction v = sub_zerosfun(wd, args)\\n\\n');\r","fprintf(f, 'v = zeros(size(wd.xf));\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_onesfun(wd, args)\\n\\n');\r","fprintf(f, 'v = ones(size(wd.xf));\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_xffun(wd, args)\\n\\n');\r","fprintf(f, 'v = wd.xf;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_yffun(wd, args)\\n\\n');\r","fprintf(f, 'v = wd.yf;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_minxffun(wd, args)\\n\\n');\r","fprintf(f, 'v = -wd.xf;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_minyffun(wd, args)\\n\\n');\r","fprintf(f, 'v = -wd.yf;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_xcfun(wd, args)\\n\\n');\r","fprintf(f, 'v = wd.xc;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_ycfun(wd, args)\\n\\n');\r","fprintf(f, 'v = wd.yc;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_minxcfun(wd, args)\\n\\n');\r","fprintf(f, 'v = -wd.xc;\\n'); \r","\r","fprintf(f, '\\n\\nfunction v = sub_minycfun(wd, args)\\n\\n');\r","fprintf(f, 'v = -wd.yc;\\n'); \r","\r","\r","fclose(f);\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[10,13,14,15,16,17,18,20,24,25,26,27,28,29,30,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,108,109,112,113,115,116,118,119,121,122,124,125,127,128,130,131,133,134,136,137,139,140,143],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}