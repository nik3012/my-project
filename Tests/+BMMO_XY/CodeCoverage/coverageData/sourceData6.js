var sourceData6 = {"FileContents":["function options = bl3_ml_options(mli, options)\r","%function options = bl3_ml_options(mli, options)\r","%\r","% This function will transfer data from mli.info to options structure for BL3. Data\r","% from mli.info is gathered from multiple ADEL files from scanner.\r","%\r","% Input :\r","% mli    : input ml struct\r","% options: existing options structure\r","%\r","% Ouput :\r","% options: parsed options structure\r","%\r","% For details of the model and definitions of in/out interfaces, refer to\r","% D000810611 EDS BMMO NXE and BL3 drift control model \r","\r","% options from ml.info structure\r","options.Scan_direction      = mli.info.report_data.Scan_direction;\r","options.FIWA_translation    = mli.info.report_data.FIWA_translation;\r","options.fieldsize = [mli.info.F.image_size.x mli.info.F.image_size.y];\r","if isfield(mli.info.F, 'image_shift')\r","    options.image_shift = [mli.info.F.image_shift.x mli.info.F.image_shift.y];\r","end\r","\r","% Previous correction: including inline SDM residual\r","options.previous_correction = bmmo_add_missing_corr(mli.info.previous_correction, 2, options);\r","\r","options.cet_residual = mli.info.report_data.cet_residual;\r","\r","options.chuck_usage  = bmmo_determine_chuck_usage(mli);\r","\r","options = bmmo_ml_options_wh(mli, options);\r","\r","% Handle options introduced since test data finalised\r","\r","% FIWA mark layout\r","if isfield(mli.info.report_data, 'FIWA_mark_type')\r","    options.FIWA_mark_type = mli.info.report_data.FIWA_mark_type;\r","end\r","\r","if(length(mli.expinfo.xc) == 89)\r","    options.no_layer_to_use = 1;\r","elseif (length(mli.expinfo.xc) == 167)\r","    options.no_layer_to_use = 2;\r","else\r","    options.no_layer_to_use = 1;\r","    options.layer_fields{1} = 1:length(mli.expinfo.xc);\r","    options.layer_fields = options.layer_fields(1);\r","end\r","\r","if isfield(mli.info, 'configuration_data')\r","    options = bmmo_get_configuration_data(mli, options);\r","end\r","\r","options.inline_sdm_config = bmmo_get_inline_sdm_configuration(mli);\r","options = bl3_set_model_configuration(options);\r","\r","options  = bmmo_get_xy_shift(mli, options);\r","\r","if isfield(mli.info.report_data, 'inline_sdm_residual')\r","    for ic = 1:length(options.previous_correction.ffp)\r","        options.previous_correction.ffp(ic).dx = options.previous_correction.ffp(ic).dx - mli.info.report_data.inline_sdm_residual(ic).dx;\r","        options.previous_correction.ffp(ic).dy = options.previous_correction.ffp(ic).dy - mli.info.report_data.inline_sdm_residual(ic).dy;\r","    end\r","    \r","    if isfield(mli.info.report_data, 'inline_sdm_cet_residual')\r","        % convert FFP to ml\r","        ml_system_nce_in = bmmo_ffp_to_ml_simple(mli.info.report_data.inline_sdm_cet_residual);\r","        \r","        % Intrafield NCE interpolation to RINT per chuck\r","        for ic = 1: ml_system_nce_in.nwafer\r","            ml_system_nce(ic)   = bmmo_correct_intrafield_shift(ovl_get_wafers(ml_system_nce_in, ic), options);\r","        end\r","    else\r","        ml_system_nce = bmmo_calculate_system_nce(mli.info.report_data.inline_sdm_residual, options); % subtract lens INTRAF NCE from full INTRAF NCE & interp to RINT\r","    end\r","end\r","\r","\r","if ~isempty(options.cet_residual)\r","    options.cet_residual = bmmo_interp_CET_NCE(options.cet_residual, options); %interpolate CET NCE to RINT target\r","    % subtract INTRAF NCE from CET NCE\r","    for ic = options.chuck_usage.chuck_id_used\r","        wafers_this_chuck   = find(options.chuck_usage.chuck_id == ic);\r","        ml_system_nce_wafer(ic) = ovl_distribute_field(ml_system_nce(ic), ovl_get_wafers(options.cet_residual, 1));\r","        for iw = wafers_this_chuck\r","            options.cet_residual.layer.wr(iw).dx = options.cet_residual.layer.wr(iw).dx - ml_system_nce_wafer(ic).layer.wr.dx;\r","            options.cet_residual.layer.wr(iw).dy = options.cet_residual.layer.wr(iw).dy - ml_system_nce_wafer(ic).layer.wr.dy;\r","        end\r","    end\r","end\r","\r","if isfield(mli.info.report_data, 'KA_cet_corr') && isfield(mli.info.report_data, 'KA_cet_nce')\r","  % subtract KA CET residuals from requested KA correction to get actuated KA correction \r","  ml_KA_act_corr = ovl_sub(mli.info.report_data.KA_cet_corr, mli.info.report_data.KA_cet_nce); \r","  % interpolate requested KA correction from CET to BMMO \r"," options.KA_act_corr =  bmmo_interp_CET_NCE(ml_KA_act_corr, options);\r","end\r","\r","options = bmmo_get_submodel_options(options);\r","% parse combined model options; this must only be called after the number of\r","% chucks is known\r","options.cm = bmmo_get_cm_options(options);\r","\r","% enable time filtering if present\r","if isfield(mli.info.report_data, 'time_filtering_enabled')\r","    if mli.info.report_data.time_filtering_enabled\r","        % SOURCE: MIAT mail to SBPR 20160624\r","        coeff.WH = 0.4;\r","        coeff.MI = 0.3;\r","        coeff.BAO = 0.5;\r","        coeff.KA = 0.3;\r","        coeff.INTRAF = 0.4;\r","        coeff.SUSD = 0.4;\r","        \r","        options.filter.coefficients = coeff;\r","        \r","        % in case overruling parameters are provided by customer: overrule\r","        % what can be overruled: weight factor for adaptive filter, and T1/T2\r","        % for adaptive filter\r","        if isfield(mli.info, 'configuration_data')\r","            if isfield(mli.info.configuration_data, 'filter')\r","                options.filter.coefficients = sub_replace_filter_coeff_defaults(options.filter.coefficients, mli.info.configuration_data.filter);\r","                options.filter = sub_replace_filter_config_defaults(options.filter, mli.info.configuration_data.filter);\r","            end\r","        end\r","        \r","        if isfield(mli.info.report_data, 'adaptive_time_filter_enabled')\r","            if mli.info.report_data.adaptive_time_filter_enabled\r","                \r","                if isfield(mli.info.report_data, 'T_current_expose')\r","                    if isfield(mli.info.report_data, 'T_previous_expose')\r","                        options.filter = sub_replace_filter_expose_defaults(options.filter, mli.info.report_data);\r","                    end\r","                end\r","                \r","                % get max wafers per chuck\r","                wafers_per_chuck = max([numel(find(options.chuck_usage.chuck_id == 1)), numel(find(options.chuck_usage.chuck_id == 2))]);\r","                \r","                % validate T1, T2,\r","                if options.filter.T2 <= options.filter.T1\r","                    error('Incorrect dynamic filter definition: T1 > T2');\r","                end\r","                if options.filter.T_current_expose <= options.filter.T_previous_expose\r","                    error('Incorrect dynamic filter definition: previous exposure later than current');\r","                end\r","                \r","                % set dynamic time filter coefficients\r","                options.filter.coefficients = bmmo_get_dynamic_filter_coefficients(options.filter.coefficients, ...\r","                    options.filter.T_current_expose - options.filter.T_previous_expose, ...\r","                    wafers_per_chuck, options.filter.T1, options.filter.T2, options.platform);\r","            end\r","        end\r","        \r","    end\r","end\r","\r","% parse ml.configurable_options\r","if isfield(mli, 'configurable_options')\r","    options = bmmo_parse_configurable_options(options, mli.configurable_options);\r","    options = bmmo_get_submodel_options(options);\r","    options.cm = bmmo_get_cm_options(options);\r","    if contains (options.KA_actuation.type, 'ovo')\r","        options.KA_actuation.fnhandle = @bmmo_KA_HOC_fingerprint;\r","    end\r","end\r","\r","%% End of main function, subfunctions below\r","\r","\r","function filter = sub_replace_filter_coeff_defaults(filter, configuration_data)\r","\r","% map from input struct field names to options.filter field names\r","filter_fieldnames = {'coeff_MI', 'coeff_KA', 'coeff_WH', 'coeff_BAO', 'coeff_ffp', 'coeff_SUSD'};\r","options_fieldnames = {'MI', 'KA', 'WH', 'BAO', 'INTRAF', 'SUSD'};\r","\r","filter = sub_update_fields(filter, configuration_data, options_fieldnames, filter_fieldnames);\r","\r","function filter = sub_replace_filter_config_defaults(filter, configuration_data)\r","\r","% map from input struct field names to options.filter field names\r","filter_fieldnames = {'T1', 'T2'};\r","\r","filter = sub_update_fields(filter, configuration_data, filter_fieldnames, filter_fieldnames);\r","\r","function filter = sub_replace_filter_expose_defaults(filter, report_data)\r","\r","% map from input struct field names to options.filter field names\r","filter_fieldnames = {'T_previous_expose', 'T_current_expose'};\r","\r","filter = sub_update_fields(filter, report_data, filter_fieldnames, filter_fieldnames);\r","\r","function s_out = sub_update_fields(s_out, s_in, fields_out, fields_in)\r","\r","for ii = 1:length(fields_out)\r","    if isfield(s_in, fields_in{ii})\r","        s_out.(fields_out{ii}) = s_in.(fields_in{ii});\r","    end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[18,19,20,21,26,28,30,32,37,41,42,43,44,51,52,55,56,58,60,61,62,63,66,68,71,72,74,75,80,81,83,84,85,86,87,88,93,95,97,100,103,106,107,109,110,111,112,113,114,116,121,122,128,159],"UnhitLineNumbers":[22,38,45,46,47,48,123,124,129,131,132,133,138,141,142,144,145,149,150,151,160,161,162,163,164,174,175,177,182,184,189,191,195,196,197],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,9,0,9,0,9,0,9,0,0,0,0,9,0,0,0,9,3,6,6,0,0,0,0,0,0,9,9,0,0,9,9,0,9,0,9,9,18,18,0,0,9,0,1,0,0,1,2,0,8,8,0,0,0,0,9,9,0,9,18,18,18,36,36,0,0,0,0,9,0,7,0,7,0,0,9,0,0,9,0,0,9,9,0,5,5,5,5,5,5,0,5,0,0,0,0,5,5,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}