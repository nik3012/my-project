var sourceData276 = {"FileContents":["%%  1 test with simple translation of small structure\r","classdef testBmmoFitModelPerfield < BMMO_XY.tools.testSuite\r","\r","    methods(Test)\r","        \r","        function AllTestCases(obj)\r","            %% 1. test against ovl_model 10par with random large structure, single wafer            \r","            \r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 1,'nlayer', 1);\r","            options.parlist = bmmo_parlist;            \r","            mld.layer.wr.dx = 1e-9 * randn(size(mld.layer.wr.dx));\r","            mld.layer.wr.dy = 1e-9 * randn(size(mld.layer.wr.dx));            \r","            options.parlist = bmmo_parlist;   \r","            \r","            % When\r","            mlo = ovl_model(mld, '10par', 'perwafer', 'perfield');            \r","            ml_out = bmmo_fit_model_pw_perfield(mld, options, '10par');            \r","            \r","            % Then\r","            obj.verifyWithinTol(ml_out, mlo);            \r","            \r","            %% 2. test against ovl_model 10par with random large structure, multiple wafers\r","            \r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;            \r","            for iw = 1:6\r","                mld.layer.wr(iw).dx = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","                mld.layer.wr(iw).dy = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","            end            \r","            options.parlist = bmmo_parlist;            \r","            \r","            % When\r","            mlo = ovl_model(mld, '10par', 'perwafer', 'perfield');            \r","            ml_out = bmmo_fit_model_pw_perfield(mld, options, '10par');         % entire structure         \r","            \r","            % Then\r","            obj.verifyWithinTol(mlo, ml_out);\r","            \r","            %% 3. test with random NaNs in input\r","            \r","            % Given\r","            mld = ovl_create_dummy('marklayout','BA-XY-DYNA-13X19','nwafer', 6,'nlayer', 1);\r","            options.parlist = bmmo_parlist;            \r","            for iw = 1:6\r","                mld.layer.wr(iw).dx = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","                mld.layer.wr(iw).dy = 1e-9 * randn(size(mld.layer.wr(iw).dx));\r","            end            \r","            for iw = 1:6\r","                nans_this_wafer = randi(1000);      % generate a random number of NaNs\r","                nanids = unique(randi(length(mld.layer.wr(iw).dx), 1, nans_this_wafer));\r","                mld.layer.wr(iw).dx(nanids) = NaN;\r","                mld.layer.wr(iw).dy(nanids) = NaN;\r","            end            \r","            options.parlist = bmmo_parlist;  \r","            \r","            % When\r","            mlo = ovl_model(mld, '10par', 'perwafer', 'perfield');                       \r","            ml_out = bmmo_fit_model_pw_perfield(mld, options, '10par');     % entire structure \r","            \r","            % Then\r","            obj.verifyWithinTol(mlo, ml_out);\r","        end\r","        \r","    end\r","    \r","end\r",""],"CoverageData":{"CoveredLineNumbers":[10,11,12,13,14,17,18,21,26,27,28,29,30,32,35,36,39,44,45,46,47,48,50,51,52,53,54,56,59,60,63],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,6,6,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,6,6,0,1,6,6,6,6,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0]}}