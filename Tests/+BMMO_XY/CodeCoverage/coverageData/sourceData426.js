var sourceData426 = {"FileContents":["classdef bmmoDevbenchRunner < handle\r","%% <help_update_needed>\r","%  for the class and for the function\r","%\r","% \r","\r","%%\r","    properties\r","        devbench % devbench object\r","        http     % http object\r","        sftp\r","        current_sbc\r","        current_fms\r","    end\r","        \r","    properties (Access = private)\r","       initialization_state \r","    end\r","    \r","%%\r","% (offline: start a KT devbench, get its IP addr)\r","    methods\r","        function obj = bmmoDevbenchRunner(devbench)\r","           obj.devbench = devbench;\r","           obj.http = bmmoDevbenchHTTPInterface();\r","           obj.sftp = bmmoDevbenchSFTPInterface();\r","           obj.initialization_state = false;\r","        end\r","    end\r","\r","%%    \r","    methods\r","        function setDevbench(obj, devbench)\r","            obj.devbench = devbench;\r","            obj.initialization_state = false;\r","        end\r","        \r","        function verifyInitialized(obj)\r","            if ~obj.initialization_state\r","                % (set the FMS state on the devbench so that it uses this report)\r","                disp('Retrieving Devbench Fine Metrology State');\r","                % get the FMS of the devbench\r","                try\r","                    fms_data = obj.http.get_last_adel_from_ip('ADELfineMetrologyOverlayState', 'EDI', obj.devbench.ip_address);\r","                catch err\r","                    disp('Please set the Fine Metrology State of the devbench using the command \"python KT/tstpkg/KTMI_BMMO_set_fms.py\"');\r","                    rethrow(err);\r","                end\r","                obj.devbench.fms = fms_data.FineMetrologyOverlayState.CalibrationState;\r","                % Log the FMS for use in creating an SBC\r","                obj.initialization_state = true;\r","            end\r","        end\r","        \r","        function runBl3Loop(obj, iterations, initial_sbc, timefilter, first_iteration)\r","            \r","            obj.verifyInitialized();\r","            \r","            if nargin < 5\r","                first_iteration = 1;\r","            end\r","            \r","            disp('About to run BMMO control loop. Please ensure the TwinScan software is running and has been initialized correctly (see https://techwiki.asml.com/index.php/BMMO_NXE_Overlay_Devbench_procedure)');\r","            \r","            adel_sbc = bmmoADELSBC();\r","           \r","            mkdir(sprintf('iteration_%d', first_iteration));\r","            if ~ischar(initial_sbc)\r","                fprintf('\\nBuilding ADELsbcOverlayDriftControlNxe from sbc input\\n');\r","                adel_sbc.create_SBC_from_corr(initial_sbc);\r","                adel_sbc.set_fms(obj.devbench.fms);\r","                adel_sbc.set_machine_name(obj.devbench.machine_name);\r","                adel_sbc.setRecipeName(sprintf('sbc_iteration_%d', first_iteration));\r","                sbc_file = sprintf('iteration_%d\\\\ADELsbcOverlayDriftControlNxe.xml', first_iteration);\r","                adel_sbc.write(sbc_file);\r","            else\r","                sbc_file = initial_sbc;\r","            end\r","            \r","            for ii = first_iteration:(first_iteration + (iterations-1))\r","                fprintf('\\nIteration %d\\n==========\\n', ii);\r","                currentdir = sprintf('iteration_%d', ii);\r","                \r","                fprintf('\\n - Upload the SBC file %s to the Devbench using http://%s:8080/EDI/baselinermmonxe.html\\n', sbc_file, obj.devbench.ip_address);\r","                \r","                fprintf(' - Run a BMMO-NXE lot with SBC recipe sbc_iteration_%d and press a key when ready\\n', ii);\r","                \r","                pause;\r","\r","                input_struct = obj.calculateBl3InputFromDevbench(currentdir, timefilter);\r","                disp('saving input_struct');\r","                save(sprintf('iteration_%d%sinput_struct', ii, filesep), 'input_struct');\r","                \r","                disp('running BMMO-NXE model');\r","                sbc_out = bmmo_nxe_drift_control_model(input_struct);\r","            \r","                disp('creating ADELsbcOverlayDriftControlNxe file from model output');\r","                adel_sbc.create_SBC_from_corr(sbc_out.corr);\r","                adel_sbc.set_fms(obj.devbench.fms);\r","                adel_sbc.set_machine_name(obj.devbench.machine_name);\r","                adel_sbc.setRecipeName(sprintf('sbc_iteration_%d', ii+1));\r","                mkdir(sprintf('iteration_%d', ii+1));\r","                sbc_file = sprintf('iteration_%d\\\\ADELsbcOverlayDriftControlNxe.xml', ii+1);\r","                adel_sbc.writeNew(sbc_file);\r","                \r","                disp('saving SBC output');\r","                save(sprintf('iteration_%d%ssbc_out', ii, filesep), 'sbc_out');\r","            end\r","            \r","        end\r","        \r","        function input_struct = calculateBl3InputFromDevbench(obj, currentdir, timefilter)\r","                disp('retrieving ADELler');\r","                [adeller, ~, adel_date] = obj.http.get_last_adel_from_ip('ADELler', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELler with timestamp %s\\n', adel_date);\r","                \r","                disp('retrieving ADELsbcOverlayDriftControlNxerep');\r","                [adelsbcrep, ~, adel_date] = obj.http.get_last_adel_from_ip('ADELsbcOverlayDriftControlNxerep', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELsbcOverlayDriftControlNxerep with timestamp %s\\n', adel_date);\r","\r","                disp('retrieving ADELexposureTrajectoriesReportProtected');\r","                [~, adelexp_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELexposureTrajectoriesReportProtected', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELexposureTrajectoriesReportProtected with timestamp %s\\n', adel_date);\r","                adelexp_filename = [pwd filesep sprintf('%s%sADELexposureTrajectoriesReport.xml', currentdir, filesep)];\r","                fid = fopen(adelexp_filename, 'w');\r","                fprintf(fid, '%s', adelexp_txt);\r","                fclose(fid);\r","                \r","                disp('retrieving ADELwaferGridResidualReportProtected');\r","                [~, adelwfrgridNCE_txt, adel_date] = obj.http.get_last_adel_from_ip('ADELwaferGridResidualReportProtected', 'EDI', obj.devbench.ip_address);\r","                fprintf('retrieved ADELwaferGridResidualReport with timestamp %s\\n', adel_date);\r","                adelwfrgridNCE_filename = [pwd filesep sprintf('%s%sADELwaferGridResidualReport.xml', currentdir, filesep)];\r","                fid = fopen(adelwfrgridNCE_filename, 'w');\r","                fprintf(fid, '%s', adelwfrgridNCE_txt);\r","                fclose(fid);\r","                \r","                disp('retrieving KT_wafers_out');\r","                bmmoDevbenchSFTPInterface.get_file_from_devbench('KT/KT_wafers_out', obj.devbench.machine_name, obj.devbench.ip_address, currentdir);\r","                KT_wo = sprintf('%s%sKT_wafers_out', currentdir, filesep);\r","                \r","                disp('constructing BL3 input_struct');\r","                \r","                input_struct = bl3_input_struct_from_devbench(KT_wo, adelsbcrep, adeller, timefilter, adelexp_filename, adelwfrgridNCE_filename);\r","                if numel(input_struct.info.previous_correction.KA.grid_2de(1).x) < 4000\r","                   input_struct.info.configuration_data.bl3_model = 0; \r","                end\r","                \r","        end\r","        \r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[24,25,26,27,34,35,39,41,43,44,45,46,47,49,51,57,59,60,63,65,67,68,69,70,71,72,73,74,75,76,77,80,81,82,84,86,88,90,91,92,94,95,97,98,99,100,101,102,103,104,106,107,113,114,115,117,118,119,121,122,123,124,125,126,127,129,130,131,132,133,134,135,137,138,139,141,143,144,145],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}