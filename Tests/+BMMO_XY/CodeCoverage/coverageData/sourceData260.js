var sourceData260 = {"FileContents":["classdef testBmmoChuckOperation < BMMO_XY.tools.testSuite\r","    \r","    methods(Test)\r","        \r","        %% 1. test that model runs with single wafer on chuck 1\r","        function Case1(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml, 'mark');\r","            ml1w = bmmo_get_wafers(ml, 1);\r","            \r","            % When\r","            out = bmmo_nxe_drift_control_model(ml1w);\r","            out_zero = bmmo_default_output_structure(bmmo_default_options_structure);\r","            \r","            % Then\r","            obj.verifyWithinTol(out.corr.BAO(2), out_zero.corr.BAO(2));\r","            obj.verifyWithinTol(out.corr.KA.grid_2de(2), out_zero.corr.KA.grid_2de(2));\r","            obj.verifyWithinTol(out.corr.ffp(2), out_zero.corr.ffp(2));\r","            obj.verifyWithinTol(out.corr.MI.wse(2), out_zero.corr.MI.wse(2));\r","        end\r","        \r","        %% 2. test that model runs with single wafer on chuck 2\r","        function Case2(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_random_noise(ml, 'mark');\r","            ml2w = bmmo_get_wafers(ml, 2);            \r","            \r","            % When\r","            out = bmmo_nxe_drift_control_model(ml2w);\r","            out_zero = bmmo_default_output_structure(bmmo_default_options_structure);\r","            \r","            % Then\r","            obj.verifyWithinTol(out.corr.BAO(1), out_zero.corr.BAO(2));\r","            obj.verifyWithinTol(out.corr.KA.grid_2de(1), out_zero.corr.KA.grid_2de(2));\r","            obj.verifyWithinTol(out.corr.ffp(1), out_zero.corr.ffp(2));\r","            obj.verifyWithinTol(out.corr.MI.wse(1), out_zero.corr.MI.wse(2));\r","        end\r","        \r","        %% 3. test that same results are found when the same single wafer is on chucks 1 and 2\r","        function Case3(obj)\r","            % Given\r","            ml = bmmo_default_input;\r","            ml = bmmo_add_default_whff(ml);\r","            noise = 1;\r","            ml = bmmo_simulate_random_input(ml, 'WSMKBI', noise);\r","            ml1w = bmmo_get_wafers(ml, 1);\r","            ml2w = ml1w;\r","            ml2w.info.F.chuck_id = {'CHUCK_ID_2'};\r","            \r","            % When\r","            out1 = bmmo_nxe_drift_control_model(ml1w);\r","            out2 = bmmo_nxe_drift_control_model(ml2w);\r","            \r","            % Then\r","            obj.verifyWithinTol(out1.corr.IR2EUV, out2.corr.IR2EUV, 'tol', 5e-11);\r","            obj.verifyWithinTol(out1.corr.SUSD(1), out2.corr.SUSD(3));\r","            obj.verifyWithinTol(out1.corr.SUSD(2), out2.corr.SUSD(4));\r","            obj.verifyWithinTol(out1.corr.MI.wse(1), out2.corr.MI.wse(2));\r","            obj.verifyWithinTol(out1.corr.KA.grid_2de(1), out2.corr.KA.grid_2de(2));\r","            obj.verifyWithinTol(out1.corr.BAO(1), out2.corr.BAO(2));\r","            obj.verifyWithinTol(out1.corr.ffp(1), out2.corr.ffp(2));\r","        end\r","        \r","        %% 4. Test that the correct previous_correction is applied, per chuck\r","        function Case4(obj)\r","            %Given\r","            ml = bmmo_default_input;\r","            pc = bmmo_default_output_structure(bmmo_default_options_structure);\r","            pc.corr.BAO(1).TranslationX = 1e-8;     % fill in nonzero correction for chuck 1\r","            pc.corr.BAO(1).TranslationY = -1e-8;\r","            pc.corr.MI.wse(1).y_mirr.dy = pc.corr.MI.wse(1).y_mirr.x .^ 2 * 1e-6;\r","            pc.corr.MI.wsm = pc.corr.MI.wse;\r","            pc.corr.KA.grid_2de(1).dx = (pc.corr.KA.grid_2de(1).x.^3 +  pc.corr.KA.grid_2de(1).y) * 1e-6;\r","            pc.corr.ffp(1).dx = (pc.corr.ffp(1).x.^2 +  pc.corr.ffp(1).y.^2) * 1e-6;\r","            ml.info.previous_correction = pc.corr;\r","            ml.info.configuration_data.KA_correction_enabled = 1;\r","            ml.info.configuration_data.susd_correction_enabled = 1;\r","            \r","            %When\r","            out = bmmo_nxe_drift_control_model(ml);\r","            \r","            %Then\r","            obj.verifyWithinTol(out.corr.BAO, pc.corr.BAO);\r","            obj.verifyWithinTol(out.corr.MI, pc.corr.MI);\r","            \r","            %%\r","            \r","            % When\r","            valid_grid = ~isnan(out.corr.KA.grid_2de(1).dx);\r","            \r","            %Then\r","            obj.verifyWithinTol(out.corr.KA.grid_2de(1).dx(valid_grid), pc.corr.KA.grid_2de(1).dx(valid_grid));\r","            obj.verifyWithinTol(out.corr.KA.grid_2de(1).dy(valid_grid), pc.corr.KA.grid_2de(1).dy(valid_grid));\r","            obj.verifyWithinTol(out.corr.KA.grid_2de(2).dx(valid_grid), pc.corr.KA.grid_2de(2).dx(valid_grid));\r","            obj.verifyWithinTol(out.corr.KA.grid_2de(2).dy(valid_grid), pc.corr.KA.grid_2de(2).dy(valid_grid));\r","            \r","            %%\r","            \r","            % When\r","            ml1 = bmmo_ffp_to_ml_simple(out.corr.ffp);      % now remove 10 par from output\r","            ml2 = bmmo_ffp_to_ml_simple(pc.corr.ffp);\r","            \r","            % Then\r","            obj.verifyWithinTol(ml1, ovl_model(ml2, 'perwafer'));\r","            ml2 = ml;       % test with inverted chuck order\r","            ml2.info.F.chuck_id = {'CHUCK_ID_2', 'CHUCK_ID_1', 'CHUCK_ID_2', 'CHUCK_ID_1','CHUCK_ID_2', 'CHUCK_ID_1'};\r","            \r","            %%\r","            \r","            % When\r","            out2 = bmmo_nxe_drift_control_model(ml);\r","            \r","            % Then\r","            obj.verifyWithinTol(out.corr, out2.corr);\r","        end\r","        \r","        %% verify complete output intact for single-chuck input structures\r","        function Case5(obj)\r","            % Given\r","            ind = bmmo_default_input;\r","            in1 = bmmo_get_wafers(ind, [1 3 5]);\r","            in2 = bmmo_get_wafers(ind, [2 4 6]);            \r","            \r","            % When\r","            outd = bmmo_nxe_drift_control_model(ind);\r","            out1 = bmmo_nxe_drift_control_model(in1);\r","            out2 = bmmo_nxe_drift_control_model(in2);\r","            \r","            % Then\r","            obj.verifyWithinTol(outd.corr, out1.corr);\r","            obj.verifyWithinTol(outd.corr, out2.corr);\r","        end\r","        \r","    end\r","    \r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[8,9,10,13,14,17,18,19,20,26,27,28,31,32,35,36,37,38,44,45,46,47,48,49,50,53,54,57,58,59,60,61,62,63,69,70,71,72,73,74,75,76,77,78,79,82,85,86,91,94,95,96,97,102,103,106,107,108,113,116,122,123,124,127,128,129,132,133],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0]}}