var sourceData607 = {"FileContents":["% Get lens-related data. Needed for NXE lens/scan modeling (MI curved-slit, SDM, KC, KZ).\r","% Data is fetched from the LMtwin toolbox, so users need access to it.\r","% Internally caching is used for performance, but also to handle R12 clients which typically set\r","% their own lens data at the start of modeling, such that subsequent calls do not need the lens toolbox.\r","%\r","% Optional inputs:\r","%   lenstype                   : (default '3300_33') which IMA lens type data file to use\r","%   release                    : (default 'version2_0_2') which IMA Matlab toolbox release to use, could also be 'WIP'\r","%\r","% Warning:\r","%   This function required the Projection Lensmodel to be available on your Matlab search path:\r","%       module.include('\\\\asml.com\\eu\\shared\\nl011032\\Projection_tooling\\projection_toolbox_p\\Lensmodel')\r","%\r","% Output: structure which looks like\r","%\r","%                   X: [-0.0127 -0.0106 -0.0085 -0.0064 -0.0042 -0.0021 0 0.0021 0.0042 0.0064 0.0085 0.0106 0.0127]\r","%                   Y: [5x13 double]\r","%                   W: [5x13 double]\r","%            obj_z_id: 1\r","%    obj_z_dx_samples: [-0.0085 -0.0071 -0.0057 -0.0042 -0.0028 -0.0014 0 0.0014 0.0028 0.0042 0.0057 0.0071 0.0085]\r","%    obj_z_dy_samples: [-0.0250 -0.0254 -0.0258 -0.0260 -0.0262 -0.0263 -0.0264 -0.0263 -0.0262 -0.0260 -0.0258 -0.0254 -0.0250]\r","%       yslit_samples: [1x13 double]\r","%             nom_mag: 0.2500\r","%             Generic: [1x1 struct]\r","%             CLM_SDM: [1x1 struct]\r","%                 DLM: [1x1 struct]\r","%\r","% See also: ovl_metro_set_lensdata, ovl_model_sdm\r","\r","% 20130424 ASaz Creation\r","% 20130519 JFei Persistent cache; simplified option handling using ovl_parse_options\r","% 20130724 JFei Updated error message to redirect to IT access request form\r","% 20130806 JFei Added DLM\r","% 20131023 ASaz Fix for optionsDef\r","% 20131213 SaBo Added semicolons to suppress output\r","% 20140401 JFei Use ovl_metro_cache for offline use. Contact me for cached file if you do not have access.\r","% 20140807 ASaz Fix for fake cache warnings\r","% 20141127 ABAQ r12: only allow use of values stored in cache\r","% 20141208 JFEI remove persistent cache, users should use ovl_metro_cache instead\r","% 20150319 JFEI IMA actively develops on WIP... changed to a stable release\r","% 20150407 JFEI r12: strfind->findstr and error->error_r12\r","% 20150727 ABAQ Integrate NXE 2DE-HF phase1: promote to Basics\r","% 20151207 ABAQ 2DE-HFp1 QBL sync: make implementation R12 *AND* R2012 compliant\r","% 20180131 XJUN Fix lens model functions after LM migration.\r","%\r","\r","function lensdata = ovl_metro_get_lensdata(varargin)\r","\r","%% option handling\r","optionsDef.flags     = cell(0);\r","optionsDef.lenstype  = '3300_33';\r","optionsDef.release   = 'version2_0_2'; % or something like 'WIP'\r","[options, arguments] = ovl_parse_options(optionsDef, varargin{:});\r","\r","% NOTE: the following key is shared with ovl_metro_set_lensdata\r","cache_key = ['ovl_metro_lensdata' '_' options.lenstype];\r","\r","check_ok = 1;\r","% try cache: valid way for models aware of this mechanism.\r","cache = ovl_metro_cache('get', cache_key);\r","if cache.valid\r","    lensdata = cache.data;\r","    return\r","else\r","    check_ok = 0;\r","end\r","\r","%<DEBUG>\r","% analysis only\r","if ~check_ok\r","    lensdata         = sub_get_lensdata(options);\r","    % store in cache for subsequent use\r","    ovl_metro_cache('set', cache_key, lensdata);\r","    check_ok = 1;\r","end\r","%</DEBUG>\r","\r","% all options exhausted - bail out with error\r","% NOTE: don't remove! This part is reachable, when analysis block above will be\r","% disabled for TwinScan deployable code, for which the only valid option is to\r","% provide lensdata on interface or propagate via cache\r","if ~check_ok\r","    error_r12('OVL:ovl_metro_get_lensdata:bad_lensdata', 'something is wrong with lensdata provided on interface');\r","end\r","\r","%  The rest of the body should be dropped.\r","%<DEBUG>\r","function lensdata = sub_get_lensdata(options)\r","%% load data using LMtwin toolbox\r","try\r","    [CLM_SDM, DLM, Generic] = sub_lm_calculate(options.lenstype);\r","catch\r","    if (~exist('lm_load_definition', 'file'))...\r","            | (~exist('lm_calc_lens_model', 'file'))\r","        % check/add LM path\r","        if ispc\r","            lm_path = ['\\\\\\\\asml.com\\\\eu\\\\shared\\\\nl011032\\\\Projection_tooling\\\\projection_toolbox_p\\\\Lensmodel'];\r","        else\r","            lm_path = ['/shared/nl011032/Projection_tooling/projection_toolbox_p/Lensmodel'];\r","        end\r","        error_r12('OVL:ovl_metro_get_lensdata:lm_twin_not_found',...\r","            ['Cannot find projection toolbox; please add the projection module:\\n' ...\r","            'use module.include(' lm_path ')\\n' ...\r","            '(if you don''t have access to this share, please request access using\\n' ...\r","            'https://calltemplates.asml.com/cgi-bin/calltemplates.cgi?form_id=50302)'] );\r","    else\r","        error_r12('OVL:ovl_metro_get_lensdata:failed', 'Calculation of lens model failed.');\r","    end\r","end\r","\r","% Use ASML-Q grid, undo nasty scaling of LMtwin data.\r","lensdata.X = Generic.Lens.Grid.X(1, :) * 1e-3; % [mm] -> [m]\r","lensdata.Y = Generic.Lens.Grid.Y       * 1e-3;       % [mm] -> [m]\r","lensdata.W = Generic.Lens.Slit_Weights;\r","% object plane dependencies\r","lensdata.obj_z_id = find(strcmp(cellstr(Generic.Manipulator.Name), 'Reticle.Z'));\r","lensdata.obj_z_dx_samples =...\r","    sum(Generic.Manipulator.Dependency(:, :, 2, lensdata.obj_z_id) .* lensdata.W) / Generic.Lens.Factors.dZ2_dX * 1e-3; %[nm/um] -> [m/m]\r","lensdata.obj_z_dy_samples =...\r","    sum(Generic.Manipulator.Dependency(:, :, 3, lensdata.obj_z_id) .* lensdata.W) / Generic.Lens.Factors.dZ3_dY * 1e-3; %[nm/um] -> [m/m]\r","% curved slit\r","lensdata.yslit_samples = sum(lensdata.Y .* lensdata.W);\r","lensdata.nom_mag = 0.25;\r","\r","% return lensdata as current in ovl_model_sdm\r","% return also lensdata.Generic, to encapsulate the nasty global\r","lensdata.Generic = Generic;\r","lensdata.CLM_SDM = CLM_SDM;\r","lensdata.DLM     = DLM;\r","\r","function [CLM_SDM, DLM, Generic] = sub_lm_calculate(lenstype)\r","if ispc\r","    lm_def = lm_load_definition(lenstype);\r","    \r","    if ~isempty( findstr(lenstype, '3100'))\r","        clm_model_str = 'Fading Calibration - CLM - DISTO - SDM Calibration';\r","        dlm_model_str = '* - DLM - Fading Control';\r","    else\r","        clm_model_str = '* - CLM - DISTO - SDM Calibration';\r","        dlm_model_str = '* - DLM - Default';\r","    end\r","    \r","    CLM_SDM = lm_calc_lens_model(lm_def.Generic, lm_def.LM, clm_model_str);\r","    DLM     = lm_calc_lens_model(lm_def.Generic, lm_def.LM, dlm_model_str);\r","    Generic = lm_def.Generic;\r","else\r","    load('/sdev_shared/fc065data/EUV/bmmo/lensdata_33_a.mat')\r","end\r","\r","%</DEBUG>\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[50,51,52,53,56,58,60,61,62,63,64,65,70,71,73,74,82,83,90,91,92,93,94,96,97,98,99,101,103,106,107,112,113,114,116,117,118,119,120,122,123,127,128,129,132,133,135,136,137,138,139,140,143,144,145,146,147],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}