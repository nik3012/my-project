var sourceData361 = {"FileContents":["function [ml_y_resample, hoc_field] = bmmo_y_resample(ml_hoc_field, field_geo, image_y_shift)\r","% <help_update_needed>\r","%  for the class and for the function\r","%\r","% \r","\r","%%\r","% Create HOC field\r","ml                = ml2SWLayout_local(ml_hoc_field);                                            \r","hoc_field.size_x  = length(unique(ml.wd.xf));\r","hoc_field.size_y  = length(unique(ml.wd.yf));\r","hoc_field.W       = max(ml.wd.xf) - min(ml.wd.xf);\r","hoc_field.H       = max(ml.wd.yf) - min(ml.wd.yf);\r","hoc_field.x = ml.wd.xf;\r","hoc_field.y = ml.wd.yf;\r","range = [1 length(ml.wd.xf)];\r","for i = 1:ml.nwafer\r","    hoc_field.disto(i).x = ml.layer.wr(i).dx;\r","    hoc_field.disto(i).y = ml.layer.wr(i).dy;\r","end\r","\r","\r","%%\r","% Create data element to be filled in the loop\r","ml_y_resample =  ovl_average_fields(ovl_create_dummy(...\r","            '13x19', 'nlayer', 1, 'nwafer', ml.nwafer));\r","\r","% Constants for the loop\r","step_x = field_geo.W/(field_geo.x_resol - 1);\r","step_y = field_geo.H/(field_geo.y_resol - 1);\r","step_Y = hoc_field.H/(hoc_field.size_y - 1);\r","res_x  = field_geo.x_resol;\r","res_y  = field_geo.y_resol;\r","mid_W  = 1/2 * field_geo.W;\r","mid_H  = 1/2 * field_geo.H;\r","epsilon = 1e-12;\r","\r","\r","% Loop over the indices of the HOC field\r","for iy = 1:res_y\r","    for ix = 1:res_x\r","        % Determine position\r","        x = (ix - 1) * step_x - mid_W;\r","        y = (iy - 1) * step_y - mid_H;\r","        v = y + image_y_shift;\r","        v = extrapolate_outside_sdm_field(v, hoc_field, epsilon);\r","\r","        % Calculate the weigths\r","        [round_down, round_up, wd, wu] = calculate_weigths_local(v, step_Y, epsilon);\r","        \r","        % Convert to index in SW layout\r","        index_down = (round_down + (hoc_field.size_y + 1)/2 - 1) * res_x + ix;\r","        index_up   = (round_up + (hoc_field.size_y + 1)/2 - 1) * res_x + ix;\r","        \r","        check_index_range(index_down, range)\r","        check_index_range(index_up, range)\r","\r","        index = (iy - 1) * res_x + ix;\r","        \r","        % Calculate dx and dy \r","        for i =1:length(hoc_field.disto)\r","            dx(i) = (wu * hoc_field.disto(i).x(index_up) + wd * hoc_field.disto(i).x(index_down));\r","            dy(i) = (wu * hoc_field.disto(i).y(index_up) + wd * hoc_field.disto(i).y(index_down));\r","            ml_y_resample.layer.wr(i).dx(index) = dx(i);\r","            ml_y_resample.layer.wr(i).dy(index) = dy(i);\r","        end\r","        \r","        % Insert the data\r","        \r","        ml_y_resample.wd.xf(index)       = x;\r","        ml_y_resample.wd.yf(index)       = y;\r","        ml_y_resample.wd.xw(index)       = ml_y_resample.wd.xf(index);\r","        ml_y_resample.wd.yw(index)       = ml_y_resample.wd.yf(index);\r","        ml_y_resample.nwafer = numel(hoc_field.disto);\r","\r"," \r","    end\r","end\r","        ml_y_resample.nmark = numel(ml_y_resample.layer.wr.dy);\r","end\r","\r","function ml_sw = ml2SWLayout_local(ml)\r","\r","ml_sw = ml;\r","\r","x = unique(ml.wd.xf);\r","y = unique(ml.wd.yf);\r","l = length(x);\r","\r","for iy = 1:length(y)\r","    for ix = 1:l\r","        if mod(iy,2) == 0         \r","            index_1 = l*(iy - 1) + ix;\r","            index_2 = l*(iy - 1) + (13 - ix + 1);         \r","            ml_sw.wd.xf(index_1) = ml.wd.xf(index_2);\r","            ml_sw.wd.yf(index_1) = ml.wd.yf(index_2);\r","            ml_sw.wd.xw(index_1) = ml.wd.xw(index_2);\r","            ml_sw.wd.yw(index_1) = ml.wd.yw(index_2);\r","            for i = 1:ml.nwafer\r","            ml_sw.layer.wr(i).dx(index_1) = ml.layer.wr(i).dx(index_2);\r","            ml_sw.layer.wr(i).dy(index_1) = ml.layer.wr(i).dy(index_2); \r","            end\r","        end\r","    end\r","end\r","\r","end\r","\r","\r","function [round_down, round_up, wd, wu] = calculate_weigths_local(v, step_Y, epsilon)\r","\r","% Constants\r","alpha = (v/step_Y);\r","beta  = floor(alpha);\r","gamma = (epsilon/step_Y);\r","\r","% Compare delta to epsilon\r","if (alpha - beta) <= gamma \r","    % Close enough to round down, take value of round_down.\r","    round_down = beta;\r","    round_up   = round_down;\r","    wd         = 1;\r","    wu         = 0;\r","elseif ((1 + beta) - alpha) <= gamma \r","    % Close enough to round up, take value of round_up.\r","    round_down = beta + 1;\r","    round_up   = round_down;\r","    wd         = 0;\r","    wu         = 1;\r","else\r","    % Calculate weigths.\r","    round_down = beta;\r","    round_up   = round_down + 1;\r","    wu         = (v - round_down * step_Y)/step_Y;\r","    wd         = (round_up * step_Y - v)/step_Y;\r","\r","end\r","\r","end\r","\r","\r","function v = extrapolate_outside_sdm_field(v, hoc_field, epsilon)\r","% In order to keep the calculation of the indices and weights easy, we\r","% manipulate the \"v\" coordinate instead.\r","% If the HOC field covers the full field, then this function has no effect.\r","\r","full_field_y_dimension = 33e-3;\r","\r","bottom_edge_of_full_field = -full_field_y_dimension / 2;\r","bottom_edge_of_sdm_field = -hoc_field.H / 2;\r","if (v > bottom_edge_of_full_field - epsilon) && (v < bottom_edge_of_sdm_field)\r","    v = bottom_edge_of_sdm_field;\r","end\r","\r","top_edge_of_full_field = +full_field_y_dimension / 2;\r","top_edge_of_sdm_field = +hoc_field.H / 2;\r","if (v > top_edge_of_sdm_field) && (v < top_edge_of_full_field + epsilon)\r","    v = top_edge_of_sdm_field;\r","end\r","\r","end\r","\r","function check_index_range(index, range)\r","if index > range(2) || index < range(1)\r","    error('Indexes of resampled SDM disto is out of range.')\r","end\r","end\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[9,10,11,12,13,14,15,16,17,18,19,25,26,29,30,31,32,33,34,35,36,40,41,43,44,45,46,49,52,53,55,56,58,61,62,63,64,65,70,71,72,73,74,79,84,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,113,114,115,118,120,121,122,123,124,130,132,133,134,135,147,149,150,151,152,155,156,157,158,164,165],"UnhitLineNumbers":[126,127,128,129],"HitCount":[0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,13,13,0,0,0,0,0,12,12,0,0,12,12,12,12,12,12,12,12,0,0,0,12,209,0,2693,2693,2693,2693,0,0,2693,0,0,2693,2693,0,2693,2692,0,2691,0,0,2691,2938,2938,2938,2938,0,0,0,0,2691,2691,2691,2691,2691,0,0,0,0,10,0,0,0,0,12,0,12,12,12,0,12,228,2964,1404,1404,1404,1404,1404,1404,1404,1521,1521,0,0,0,0,0,0,0,0,0,0,0,2693,2693,2693,0,0,2693,0,325,325,325,325,2368,0,0,0,0,0,2368,0,2368,2368,2368,2368,0,0,0,0,0,0,0,0,0,0,0,2693,0,2693,2693,2693,260,0,0,2693,2693,2693,39,0,0,0,0,0,5385,2,0,0,0,0,0]}}