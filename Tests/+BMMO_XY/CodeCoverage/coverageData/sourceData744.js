var sourceData744 = {"FileContents":["function mlo = bmmo_generate_KA(template_mli, options)\r","% function mlo = bmmo_generate_KA(template_mli, options)\r","%\r","% Given an ml input and an options structure,\r","% generate a KA fingerprint\r","%\r","% Input:\r","%        template_mli: input ml structure\r","%        options: bmmo options structure\r","%\r","% Output: mlo: KA fingerprint ml structure, based on template_mli\r","%\r","% 20200520 SELR Creation, refactored from bmmo_simulate_random_input\r","\r","% Poly part\r","mlo = template_mli;\r","fps = bmmo_construct_FPS_KA(ovl_get_wafers(mlo, 1), options);\r","for i = 1:length(fps)\r","    M(:, i) = sub_make_columns(fps{i});\r","end\r","scale_x = sub_construct_scale(options.KA_orders);\r","scale_y = scale_x;\r","tmp1 = rand(1,length(scale_x)*2);\r","tmp1 = tmp1 - 0.5;\r","tmp2 = rand(1,length(scale_y)*2);\r","tmp2 = tmp2 - 0.5;\r","poly_rand{1} = tmp1.*[scale_x scale_y];\r","poly_rand{2} = tmp2.*[scale_x scale_y];\r","for ichuck=1:2\r","    wafers_this_chuck = find(options.chuck_usage.chuck_id == ichuck);\r","    val = M*poly_rand{ichuck}';\r","    for iwafer = wafers_this_chuck\r","        mlo.layer.wr(iwafer).dx = val(1:length(val)/2);\r","        mlo.layer.wr(iwafer).dy = val(length(val)/2+1:length(val));\r","    end\r","end\r","\r","mlo = ovl_combine_linear(template_mli, 0, mlo, 1);\r","mlo = ovl_model(mlo, 'perwafer');\r","\r","function scale = sub_construct_scale(ka_orders)\r","\r","scale = [];\r","for ii = ka_orders\r","    scale_to_append = repmat(10^(ii-1), 1, ii); \r","    scale = [scale scale_to_append];\r","end\r","\r","\r","function o = sub_make_columns(mli)\r","\r","o = [mli.layer.wr.dx ; mli.layer.wr.dy];"],"CoverageData":{"CoveredLineNumbers":[16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,43,44,45,46,52],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,28,0,1,1,1,1,1,1,1,1,1,2,2,2,6,6,0,0,0,1,1,0,0,0,1,1,4,4,0,0,0,0,0,28]}}