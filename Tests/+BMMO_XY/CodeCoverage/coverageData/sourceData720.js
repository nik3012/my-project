var sourceData720 = {"FileContents":["classdef testLensModelDefault < matlab.unittest.TestCase\r","    \r","    properties\r","        sut\r","    end\r","    \r","    methods (TestClassSetup)\r","        function setup(tc)\r","            configuration = bl3_3600D_model_configuration();\r","            tc.sut = bmmo_LensModelDefault(configuration);\r","        end\r","    end\r","    \r","    methods (Test)\r","        function testNoError(tc)\r","            tc.sut.run();\r","        end\r","        \r","        function testCorrectLensdata3400(tc)\r","            lensdata = ovl_metro_get_lensdata('lenstype', '3400_34');\r","            bmmo_assert_equal(tc.sut.lensData, lensdata);\r","        end\r","        \r","        function testCorrectLensdata3300(tc)\r","            configuration = bmmo_3600D_model_configuration();\r","            configuration.setValue({'Lens'}, {'3300_33'})\r","            tc.sut = bmmo_LensModelDefault(configuration); % TODO add delta config\r","            lensdata = ovl_metro_get_lensdata('lenstype', '3300_33');\r","            bmmo_assert_equal(tc.sut.lensData, lensdata);\r","        end\r","        \r","        function testZeroInZeroOut(tc)\r","            mlZero = ...\r","                ovl_average_fields(ovl_create_dummy('13x19', 'nlayer', 1));\r","            tc.sut.mlIn = mlZero;\r","            tc.sut.run();\r","            bmmo_assert_equal(tc.sut.mlOut, mlZero);\r","        end\r","        \r","        function testExistReportData(tc)\r","            tc.sut.run();\r","            assert(isstruct(tc.sut.report));\r","        end\r","        \r","        function testRandomInput(tc)\r","            bl3Options = bl3_default_options_structure; \r","            mlTemplate = ...\r","                ovl_average_fields(ovl_create_dummy('13x19', 'nlayer', 1));\r","            mlInput = bmmo_generate_INTRAF(mlTemplate, bl3Options);\r","            \r","            tc.sut.mlIn = mlInput;\r","            tc.sut.run();\r","            \r","            [lensData, szdLfp, parLens] = ...\r","                testLensModelDefault.getLensModelInput;\r","            [staticCorrZ, mlCorr, adjPob, par] = ...\r","                LensCorrections(mlInput, lensData, szdLfp, parLens);\r","            \r","            bmmo_assert_equal(tc.sut.mlOut, mlCorr);\r","            bmmo_assert_equal(tc.sut.report.staticCorrZ, staticCorrZ);\r","            bmmo_assert_equal(tc.sut.report.adjPob, adjPob);\r","            bmmo_assert_equal(tc.sut.report.par, par);\r","        end\r","        \r","        function testPassMlInToConstuctor(tc)\r","            configuration = bmmo_3600D_model_configuration();\r","            mlZero = ...\r","                ovl_average_fields(ovl_create_dummy('13x19', 'nlayer', 1));\r","            \r","            tc.sut = bmmo_LensModelDefault(configuration, mlZero);\r","            tc.sut.run();\r","            bmmo_assert_equal(tc.sut.mlOut, mlZero);\r","        end\r","        \r","        function testLfpFromMdl(tc)\r","            mdl_path = [bmmo_testdata_root, filesep, ...\r","                '20201210-170739-BMMO_Stab_check_Lot_1_UID47778_F6558.mdl.gz'];\r","            tc.sut.readLfpFromMdl(mdl_path)\r","            load([bmmo_testdata_root, filesep, 'ReadLfpFromMdlReference'], 'lfp_reference')\r","            bmmo_assert_equal(tc.sut.lfp, lfp_reference)\r","        end\r","        \r","        function testModellingWithLfp(tc)\r","            % Read in LFP\r","            mdl_path = [bmmo_testdata_root, filesep, ...\r","            '20201210-170739-BMMO_Stab_check_Lot_1_UID47778_F6558.mdl.gz'];\r","            tc.sut.readLfpFromMdl(mdl_path)\r","\r","            % Load input ml and output references\r","            load([bmmo_testdata_root, filesep, 'testModellingWithLfpReferences.mat'], 'mlInput', 'tc_reference')\r","            \r","            % Set input to model \r","            tc.sut.mlIn = mlInput;\r","            \r","            % Set timefilter to non-default value\r","            tc.sut.timeFilterCoeff = 0.4;\r","            \r","            % Run model to generate corrections\r","            tc.sut.run();\r","            \r","            % Check results against references\r","            bmmo_assert_equal(tc.sut.mlOut, tc_reference.sut.mlOut);\r","            bmmo_assert_equal(tc.sut.mlRes, tc_reference.sut.mlRes);\r","            bmmo_assert_equal(tc.sut.report, tc_reference.sut.report);\r","\r","        end\r","    end\r","    \r","    methods (Static = true)\r","        \r","        function [lensdata, szd_LFP, par_lens] = getLensModelInput\r","            lensdata = ovl_metro_get_lensdata('lenstype', '3400_34');\r","            szd_LFP = zeros(5, 13, 64);\r","            par_lens(1:13) = zeros(size(lensdata));\r","            par_lens(13+1:13*2) = zeros(size(lensdata));\r","            par_lens(27) = 1;\r","        end\r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[9,10,16,20,21,25,26,27,28,29,33,34,35,36,37,41,42,46,47,48,49,51,52,54,55,56,57,59,60,61,62,66,67,68,70,71,72,76,78,79,80,85,87,90,93,96,99,102,103,104,112,113,114,115,116],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}