var sourceData575 = {"FileContents":["function [ml, wafer_ids, cet_res, xml_data] = bmmo_read_adelexposetrajectories(xml_filepath)\r","% Given the file path for ADELexposureTrajectoriesReportProtected, the\r","% function decrypts and parses to output full CET NCE.\r","%\r","% Input\r","%   adel_file: ADELexposureTrajectoriesReportProtected path\r","%\r","% Output:\r","%   ml       : CET residual in overlay structure format\r","%  wafer     : Exposure wader Ids\r","%  cet_res   : CET residual in ndgrid format\r","%  xml_data  : decrypted ADEL in xml_load format\r","\r","% 20201008 SBPR Creation\r","\r","%load in the residual report\r","xml_data = bmmo_load_ADEL(xml_filepath);\r","\r","ROUNDING_SF = 12;\r","\r","for i=1:length(xml_data.Results.WaferResultList)\r","    wafer_ids{i} = xml_data.Results.WaferResultList(i).elt.WaferId;\r","end\r","\r","% build an index of grid definitions\r","grid_ids = arrayfun(@(x) str2double(x.elt.GridId), xml_data.Input.GridList);\r","grid_sizes = arrayfun(@(x) numel(x.elt.GridDefinition), xml_data.Input.GridList);\r","number_of_grids = numel(grid_ids);\r","\r","% find the main grid definition\r","[full_grid_size, full_grid_id] = max(grid_sizes);\r","grid_map = zeros(full_grid_size, number_of_grids);\r","\r","x_full_grid = reshape(str2double(arrayfun(@(x) (x.elt.X), xml_data.Input.GridList(full_grid_id).elt.GridDefinition, 'UniformOutput', false)) * 1e-3, [], 1);\r","y_full_grid = reshape(str2double(arrayfun(@(x) (x.elt.Y), xml_data.Input.GridList(full_grid_id).elt.GridDefinition, 'UniformOutput', false)) * 1e-3, [], 1);\r","full_xy = [x_full_grid, y_full_grid];\r","\r","% map all the grids to the main grid\r","for i_grid = 1:number_of_grids\r","    x_grid = reshape(str2double(arrayfun(@(x) (x.elt.X), xml_data.Input.GridList(i_grid).elt.GridDefinition, 'UniformOutput', false)) * 1e-3, [], 1);\r","    y_grid = reshape(str2double(arrayfun(@(x) (x.elt.Y), xml_data.Input.GridList(i_grid).elt.GridDefinition, 'UniformOutput', false)) * 1e-3, [], 1);\r","    \r","    [~, grid_indices] = pdist2(full_xy, [x_grid y_grid], 'Euclidean','Smallest',1);\r","    grid_map(1:length(grid_indices), i_grid) = grid_indices;\r","end\r","\r","exposures_per_wafer = arrayfun(@(x) numel(x.elt.ImageResultList(1).elt.ExposureResultList), xml_data.Results.WaferResultList);\r","if ~(sum(diff(exposures_per_wafer)) == 0)\r","    error('Error parsing ADELexposeTrajectoriesReport: different number of exposures per wafer');\r","end\r","\r","% ensure all grids are in ndgrid format\r","[x_full_grid, y_full_grid, mapping_index, nx] = bmmo_fix_nd_grid(x_full_grid, y_full_grid);\r","\r","% reshape grids and indices to columns\r","x_full_grid = reshape(x_full_grid, [], 1);\r","y_full_grid = reshape(y_full_grid, [], 1);\r","mapping_index = reshape(mapping_index, [], 1);\r","\r","% build a exposures * max grid size 'wd.xf' matrix\r","number_of_exposures = exposures_per_wafer(1);\r","xf = repmat(x_full_grid, 1, number_of_exposures);\r","yf = repmat(y_full_grid, 1, number_of_exposures);\r","\r","% build xc, yc\r","xc = str2double(arrayfun(@(x) (x.elt.FieldPosition.X), xml_data.Results.WaferResultList(1).elt.ImageResultList(1).elt.ExposureResultList, 'UniformOutput', false)) * 1e-3;\r","yc = str2double(arrayfun(@(x) (x.elt.FieldPosition.Y), xml_data.Results.WaferResultList(1).elt.ImageResultList(1).elt.ExposureResultList, 'UniformOutput', false)) * 1e-3;\r","\r","% build the base ml structure\r","ml.wd.xf = round(reshape(xf, [], 1), ROUNDING_SF);\r","ml.wd.yf = round(reshape(yf, [], 1), ROUNDING_SF);\r","ml.wd.xc = round(reshape(repmat(xc, full_grid_size,1), [], 1), ROUNDING_SF);\r","ml.wd.yc = round(reshape(repmat(yc, full_grid_size,1), [], 1), ROUNDING_SF);\r","ml.wd.xw = ml.wd.xf + ml.wd.xc;\r","ml.wd.yw = ml.wd.yf + ml.wd.yc;\r","\r","ml.nmark = full_grid_size;\r","ml.nfield = number_of_exposures;\r","ml.nlayer = 1;\r","ml.nwafer = numel(exposures_per_wafer);\r","\r","wr.dx = zeros(full_grid_size * number_of_exposures, 1);\r","wr.dy = wr.dx;\r","\r","ml.layer.wr = repmat(wr, 1, ml.nwafer);\r","ml.tlgname = 'CET residual';\r","\r","\r","% build residual data per wafer\r","for iw = 1:ml.nwafer\r","    grid_map_per_field = str2double(arrayfun(@(x) (x.elt.GridId), xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList, 'UniformOutput', false));\r","    dx_wafer = NaN * xf;\r","    dy_wafer = NaN * yf;\r","    \r","    for i_exp = 1:number_of_exposures   \r","        % map the residuals in each exposed field to a grid definition\r","        dx = str2double(arrayfun(@(x) (x.elt.Dx), xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(i_exp).elt.Residuals, 'UniformOutput', false)) * 1e-9;\r","        dy = str2double(arrayfun(@(x) (x.elt.Dy), xml_data.Results.WaferResultList(iw).elt.ImageResultList(1).elt.ExposureResultList(i_exp).elt.Residuals, 'UniformOutput', false)) * 1e-9;\r","        \r","        ndx = 1:numel(dx);\r","        grid_id = grid_map(ndx, (grid_ids == grid_map_per_field(i_exp)));\r","        dx_wafer(grid_id, i_exp) = dx;\r","        dy_wafer(grid_id, i_exp) = dy;\r","    end\r","    \r","    % ensure dx_wafer, dywafer are in ndgrid format\r","    dx_wafer = dx_wafer(mapping_index, :);\r","    dy_wafer = dy_wafer(mapping_index, :);\r","    \r","    ml.layer.wr(iw).dx = reshape(dx_wafer, [], 1);\r","    ml.layer.wr(iw).dy = reshape(dy_wafer, [], 1);\r","    cet_res.wafer(iw).dx = dx_wafer;\r","    cet_res.wafer(iw).dy = dy_wafer;\r","end\r","\r","% extra info: field centers and grid definition\r","cet_res.xc = reshape(xc, [], 1);\r","cet_res.yc = reshape(yc, [], 1);\r","cet_res.xf_grid = reshape(x_full_grid, nx, []);\r","cet_res.yf_grid = reshape(y_full_grid, nx, []);\r","end"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[17,19,21,22,26,27,28,31,32,34,35,36,39,40,41,43,44,47,48,49,53,56,57,58,61,62,63,66,67,70,71,72,73,74,75,77,78,79,80,82,83,85,86,90,91,92,93,95,97,98,100,101,102,103,107,108,110,111,112,113,117,118,119,120],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}