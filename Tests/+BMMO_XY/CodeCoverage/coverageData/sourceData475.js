var sourceData475 = {"FileContents":["function bmmo_assert_MATLAB_LIS_equal(input_zip, out_file, tol, show_NOKs)\r","% function bmmo_assert_MATLAB_LIS_equal(input_zip, out_file, tol, show_NOKs)\r","%\r","% Assert MATLAB and LIS SBCs, KPIS and WDMs as per the given spec \r","%\r","% Inputs:\r","% input_zip : full path of BMMO input zip \r","%\r","% Optional input:\r","% outfile: filename to output the assertion results,\r","% eg: 'output.txt' or provide outfile = stdout for printing to command line\r","% tol: tolerance for assertion of SBCs, default: 5e-13\r","% show_NOKs: List only NOKs from assertion if set to 1, default is 0\r","%\r","\r","\r","if nargin < 2\r","    sbc_output = stdout;\r","    kpi_output = stdout;\r","else\r","    if ischar(out_file)  \r","        sbc_output = ['MATLABvsLIS_SBC_', out_file];\r","        kpi_output = ['MATLABvsLIS_KPI_', out_file];\r","        wdm.output = ['MATLABvsLIS_WDM_', out_file];\r","    else\r","        sbc_output = out_file;\r","        kpi_output = out_file;\r","        wdm.output = out_file;\r","    end\r","end\r","\r","if nargin < 3\r","    tol = 5e-13;\r","end\r","\r","if nargin < 4\r","    show_NOKs = 0;\r","end\r","\r","[input, ~, sbc_LIS, job_report, ~, wdm_LIS] = bmmo_read_lcp_zip(input_zip);\r","\r","if isfield(input.info, 'configuration_data')\r","    disp(input.info.configuration_data);\r","end\r","% Run MATLAB model\r","fprintf(stdout, '\\nRunning BMMO NXE drift control model...\\n');\r","[out, wdm.MATLAB] = bmmo_nxe_drift_control_model(input);\r","\r","% SBC assertion\r","\r","ADEL_prec = 1; \r","fprintf(stdout, 'Asserting MATLAB vs LIS SBC...\\n');\r","bmmo_assert_SBC_equal(out.corr, sbc_LIS, sbc_output, ADEL_prec, tol, show_NOKs)\r","\r","% KPI assertion\r","% get ADELsbrep file for the inline SDM kpis (MATLAB)\r","\r","tmpdir = [tempname '_VCP_ZIP'];\r","mkdir(tmpdir);\r","cleanupTempDir = onCleanup(@()rmdir(tmpdir, 's'));\r","unzip7(input_zip, tmpdir);\r","lis =  bmmo_find_adels(tmpdir);\r","% add the applied inlineSDM kpis\r","if ischar(lis.adelsbcrep)\r","    if adelutils.is_encrypted(lis.adelsbcrep)\r","        disp('Decrypting ADELsbcOverlayDriftControlNxerepProtected');\r","        lis.adelsbcrep = bmmo_load_ADEL(lis.adelsbcrep);\r","    end\r","end\r","out1 = bmmo_parse_kpi_ADELsbcrep_inlineSDM(lis.adelsbcrep);\r","out.report.KPI.applied.InlineSDM = out1.applied.InlineSDM;\r","\r","fprintf(stdout, 'Parsing LIS job report to same structure as BMMO MATLAB output...\\n');\r","kpi_LIS = bmmo_parse_lcp_report(job_report);\r","fprintf(stdout, 'Asserting MATLAB vs LIS KPI...\\n');\r","bmmo_assert_KPI_equal(out.report.KPI, kpi_LIS, kpi_output, tol, show_NOKs)\r","fprintf(stdout, '\\nAssertion completed \\n');\r","\r","% WDM assertion\r","\r","wdm.LIS = bmmo_convert_wdm_to_ml(wdm_LIS);\r","fprintf(stdout, 'Asserting MATLAB vs LIS WDM...\\n');\r","bmmo_assert_equal_wdm_MATLAB_LIS(wdm);\r","fprintf(stdout, '\\nAssertion completed \\n');\r","\r","end\r","\r","\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[17,18,19,20,21,22,23,24,25,26,27,28,32,33,36,37,40,42,43,46,47,51,52,53,58,59,60,61,62,64,65,66,67,70,71,73,74,75,76,77,81,82,83,84],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}