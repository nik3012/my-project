var sourceData299 = {"FileContents":["classdef testBmmoInvalidField < BMMO_XY.tools.testSuite\r","    \r","    %% Defining sub function\r","    methods(Static)\r","        \r","        function mlo = sub_map_input_to_smf(mli, mlp)\r","            \r","            mlc = bmmo_convert_to_smf(mlp);\r","            mlo = mli;\r","            \r","            idx = knnsearch([mli.wd.xw mli.wd.yw], [mlc.wd.xw mlc.wd.yw]);\r","            \r","            for iw = 1:6\r","                mlo.layer.wr(iw).dx = mli.layer.wr(iw).dx * NaN;\r","                mlo.layer.wr(iw).dy = mli.layer.wr(iw).dy * NaN;\r","                mlo.layer.wr(iw).dx(idx) = mlc.layer.wr(iw).dx;\r","                mlo.layer.wr(iw).dy(idx) = mlc.layer.wr(iw).dy;\r","            end\r","        end\r","        \r","    end\r","   \r","    methods(Test)\r","        \r","        %% set an edge field to nan in all wafers\r","        function test_bmmo_invalid_field_edge_nan(obj)\r","            % Given\r","            input_struct = bmmo_default_input;\r","            [mlp, options] = bmmo_process_input(input_struct);            \r","            edgefield = options.fid_left_right_edgefield(1);\r","            mlf = ovl_get_fields(mlp, edgefield);            \r","            xc = mlf.wd.xc(1);\r","            yc = mlf.wd.yc(1);            \r","            for iw = 1:6\r","                mlp.layer.wr(iw).dx(mlp.wd.xc == xc) = NaN;\r","                mlp.layer.wr(iw).dy(mlp.wd.yc == yc) = NaN;\r","            end            \r","            \r","            % When\r","            input_struct = obj.sub_map_input_to_smf(input_struct, mlp);\r","            \r","            % Then\r","            out = bmmo_nxe_drift_control_model(input_struct);               %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);            \r","        end\r","        \r","        %% set a dense innner field to nan in all wafers\r","        function test_bmmo_invalid_field_innerfield_nan(obj)\r","            % Given\r","            input_struct = bmmo_default_input;\r","            [mlp, options] = bmmo_process_input(input_struct);            \r","            ifield = options.fid_intrafield(1);\r","            mlf = ovl_get_fields(mlp, ifield);            \r","            xc = mlf.wd.xc(1);\r","            yc = mlf.wd.yc(1);            \r","            for iw = 1:6\r","                mlp.layer.wr(iw).dx(mlp.wd.xc == xc) = NaN;\r","                mlp.layer.wr(iw).dy(mlp.wd.yc == yc) = NaN;\r","            end            \r","            \r","            % When\r","            input_struct = obj.sub_map_input_to_smf(input_struct, mlp);\r","            \r","            % Then\r","            out = bmmo_nxe_drift_control_model(input_struct);               %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);\r","        end\r","        \r","        %% set an edge field to nan in all wafers\r","        function test_bmmo_invalid_field_inner_nan(obj)\r","            % Given\r","            input_struct = bmmo_default_input;\r","            [mlp, options] = bmmo_process_input(input_struct);            \r","            ifield = 40;\r","            mlf = ovl_get_fields(mlp, ifield);            \r","            xc = mlf.wd.xc(1);\r","            yc = mlf.wd.yc(1);            \r","            for iw = 1:6\r","                mlp.layer.wr(iw).dx(mlp.wd.xc == xc) = NaN;\r","                mlp.layer.wr(iw).dy(mlp.wd.yc == yc) = NaN;\r","            end\r","            \r","            % When\r","            input_struct = obj.sub_map_input_to_smf(input_struct, mlp);\r","            \r","            % Then\r","            out = bmmo_nxe_drift_control_model(input_struct);                %disp(['Outlier coverage: ', num2str(out.report.KPI.input.outlier_coverage)]);\r","        end\r","        \r","    end\r","    \r","end"],"CoverageData":{"CoveredLineNumbers":[8,9,11,13,14,15,16,17,28,29,30,31,32,33,34,35,36,40,43,49,50,51,52,53,54,55,56,57,61,64,70,71,72,73,74,75,76,77,78,82,85],"UnhitLineNumbers":[],"HitCount":[0,0,0,0,0,0,0,3,3,0,3,0,3,18,18,18,18,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,6,6,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,6,6,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,6,6,0,0,0,1,0,0,1,0,0,0,0,0]}}