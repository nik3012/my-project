var sourceData171 = {"FileContents":["function model_results = bmmo_run_submodels(ml, options)\r","% function model_results = bmmo_run_submodels(ml, options)\r","%\r","% Run each sub-model in the sequence specified in options.model_sequence,\r","% storing the results in model_results\r","%\r","% Input:\r","%       ml:                 ml structure after processing\r","%       options:            bmmo options structure as defined in\r","%                           bmmo_default_options_structure\r","%\r","% Output:\r","%       model_results:      structure containing submodel residuals and\r","%                           calibrations, with the following fields\r","%       ml_outlier_removed: ml structure with outliers removed\r","%       outlier_stats:      statistics on removed outliers\r","%       interfield_residual:residual of Interfield submodels (WH, MI, KA, BAO)\r","%       WH:                 structure containing the following WH data:\r","%       Calib_WH:           IR2EUV ratio, delta\r","%       ml_7x7:             Input structure sampled to 7x7 fields\r","%       FPS:                Raw FPS for WH combined model\r","%       fp:                 Fitted WH fingerprint, per chuck\r","%       fp_per_chuck:       Full WH fingerprint per chuck\r","%       fitted_fps:         Fitted FPS from the WH combined model, per chuck\r","%       res_7x7:            Residual after removing WH fingerprint, per chuck\r","%       lambda:             WH lambda value\r","%       residual:           Residual after removing full WH fingerprint                 \r","%       SUSD:               structure containing the following SUSD data:\r","%       Calib_SUSD:         SUSD calibrations\r","%       fp:                 Raw SUSD fingerprint for combined model\r","%       fitted_fp:          fitted SUSD fingerprint\r","%       MI:                 structure containing the following MI data:\r","%       Calib_MI:           Mirror Map corrections\r","%       res:                residual after removing mirror model\r","%       KA:                 structure containing the following KA data:\r","%       Calib_KA:           KA grid corrections\r","%       res:                residual after removing KA grid\r","%       INTRAF:             structure containing the following intrafield data:\r","%       Calib_Kfactors:     intrafield 20par coefficients\r","%       Calib_intra:        intrafield calibration\r","%       residual:           intrafield residual\r","%       par18:              intrafield 18par coefficients\r","%       BAO:                structure containing the following interfield data:\r","%       correction:         BAO corrections\r","\r","mli = ml;\r","sbc_prev = struct;\r","\r","% If specified, undo previous correction before modelling\r","if options.undo_before_modelling > 0\r","    [mli, sbc_prev] = bmmo_undo_sbc_correction(mli, options);\r","end\r","\r","if options.bl3_model\r","    if isfield(options, 'cet_residual') && ~isempty(options.cet_residual)\r","       mli = ovl_add(mli, options.cet_residual);\r","    else\r","       % For offline convergence testing\r","       [~, ml_KA_act_NCE] = bmmo_KA_SBC_fingerprint(mli, options.previous_correction.KA.grid_2de, options);\r","       mli = ovl_add(mli, ml_KA_act_NCE);\r","    end\r","end\r","\r","% Perform outlier removal\r","if options.do_outlier_removal\r","   [mli, outlier_stats] = bmmo_outlier_removal(mli, options);\r","   % backwards compatibility\r","   if options.WH.use_raw\r","        options.WH.raw = bmmo_outlier_removal(options.WH.raw, options);\r","   end\r","else\r","    outlier_stats = bmmo_default_outlier_stats(mli);\r","end\r","\r","% Initialise the model results that will be needed\r","model_results = bmmo_default_model_result(mli, options);\r","model_results.outlier_stats = outlier_stats;\r","model_results.sbc_prev = sbc_prev;\r","\r","% Execute all submodels in options.submodel_sequence, in order\r","for isub = 1:length(options.submodel_sequence)\r","    model_results = feval(options.submodels.(options.submodel_sequence{isub}).fnhandle, model_results, options);\r","end\r","\r","if isfield(model_results.BAO, 'ff_6par')\r","    for chuck_id = options.chuck_usage.chuck_id_used\r","        model_results.BAO.correction(chuck_id) = bmmo_add_BAOs(...\r","           model_results.BAO.correction(chuck_id), ...\r","           model_results.BAO.ff_6par(chuck_id)); \r","    end\r","end"],"CoverageData":{"CoveredLineNumbers":[46,47,50,54,65,66,68,76,77,78,81,82,85,86,87,88,89],"UnhitLineNumbers":[51,55,56,57,59,60,69,71,72],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,0,0,120,0,0,0,120,0,0,0,0,0,0,0,0,0,0,120,120,0,120,0,0,0,0,0,0,0,120,120,120,0,0,120,548,0,0,120,118,230,230,230,0,0]}}