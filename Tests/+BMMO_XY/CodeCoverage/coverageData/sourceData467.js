var sourceData467 = {"FileContents":["classdef bmmo_RerunTsActuation < handle\r","    %% bmmo_RerunTsActuation  BMMO NXE & BL3 TS actuation based Re-run model.\r","    %\r","    % bmmo_RerunTsActuation Properties:\r","    % bmmoInputs           - BMMO/BL3 inputs as parsed by bmmo_read_lcp_zip\r","    % jobConfig            - BMMO/BL3 OTAS/LIS job configuration as given\r","    %                        in bmmoInputs.info.configuration_data\r","    % tsActuationConfig    - bmmo_Configuration object\r","    %                       (eg:bl3_3600D_configuration)\r","    % recoveryOnFirstInput - When set to true,de-corrects first input &\r","    %                        recorrects with zero SBC correction\r","    % recorrect            - bmmo_RecorrectTsActuation object\r","    % timeFilter           - Option to enable or disable time filter.\r","    %                        Acceptable values include the following:\r","    %                        {'DEFAULT', 'DISABLED' 'ENABLED'}.By default the\r","    %                        value 'DEFAULT' is set which uses the\r","    %                        time filter config present in bmmoInputs. Time filter\r","    %                        values can be set in property jobConfig.filter. Please\r","    %                        note if property recoveryOnFirstInput is set to\r","    %                        true, then the first input will always have disabled\r","    %                        time filter.\r","    % rerunOutput          - Re-run outputs containing recorrected input,\r","    %                        SBC correction, KPIs, WDMs, InvalidatedData\r","    %                        and other meta data\r","    \r","    \r","    properties (SetAccess = private)\r","        bmmoInputs struct\r","        recorrect bmmo_RecorrectTsActuation\r","        rerunOutput struct\r","        recorrectionFpsPerChuck\r","    end\r","    \r","    properties (SetObservable)\r","        jobConfig struct\r","        tsActuationConfig function_handle\r","        timeFilter {mustBeValidFilter} = 'DEFAULT'\r","    end\r","    \r","    properties\r","        recoveryOnFirstInput(1,1) logical\r","    end\r","    \r","    properties (Hidden)\r","        lisWdm\r","    end\r","    properties (Dependent, Hidden)\r","        zeroSbc\r","    end\r","    \r","    properties (Constant, Hidden)\r","        validTimeFilter = {'DEFAULT', 'DISABLED' 'ENABLED'}\r","    end\r","    \r","    methods\r","        function obj = bmmo_RerunTsActuation(bmmoInputs, jobConfig,...\r","                tsActuationConfig, recoveryOnFirstInput)\r","            % bmmo_RerunTsActuation constructs object\r","            %\r","            % Usage\r","            %\r","            %   obj = bmmo_RerunTsActuation(bmmoInputs)\r","            %       Constructs the object and estimates jobConfig and\r","            %       tsActuationConfig using the first input of bmmoInputs.\r","            %        The other inputs can also be set at a later time\r","            %\r","            %   obj = bmmo_RerunTsActuation(bmmoInputs, jobConfig)\r","            %       Constructs the object using bmmoInputs and jobConfig.\r","            %       tsActuationConfig is estimated using the first input within\r","            %       the bmmoInputs struct\r","            %\r","            %   obj = bmmo_RerunTsActuation(bmmoInputs, jobConfig,...\r","            %   tsActuationConfig)\r","            %       Constructs the object using bmmoInputs,jobConfig and\r","            %       tsActuationConfig. recoveryOnFirstInput is set to false by\r","            %       default when not provided as an input\r","            %\r","            %   obj = bmmo_RerunTsActuation(bmmoInputs, jobConfig,...\r","            %   tsActuationConfig, recoveryOnFirstInput)\r","            %       Constructs the objedct with all inputs. The rerunOutput\r","            %       can then be immediately generated from the object.\r","            %\r","            % Inputs\r","            %\r","            % bmmoInputs          - BMMO/BL3 inputs as parsed by bmmo_read_lcp_zip\r","            % jobConfig           - BMMO/BL3 OTAS/LIS job configuration as given\r","            %                       in bmmoInputs.info.configuration_data\r","            % tsActuationConfig   - bmmo_Configuration object\r","            %                      (eg:bl3_3600D_configuration)\r","            % recoveryOnFirstInput - de-corrects first input &\r","            %                        re-corrects with zero SBC correction\r","            % Outputs (relevant)\r","            % rerunOutput         - Re-run outputs containing recorrected input,\r","            %                       SBC correction, KPIs, WDMs, InvalidatedData\r","            %                       and other meta data\r","            \r","            obj.bmmoInputs = bmmoInputs;\r","            \r","            switch nargin\r","                case 4\r","                    obj.jobConfig = jobConfig;\r","                    obj.tsActuationConfig = tsActuationConfig;\r","                    obj.recoveryOnFirstInput = recoveryOnFirstInput;\r","                case 3\r","                    obj.jobConfig = jobConfig;\r","                    obj.tsActuationConfig = tsActuationConfig;\r","                    obj.recoveryOnFirstInput = false;\r","                case 2\r","                    obj.jobConfig = jobConfig;\r","                    getTsConfigFromFirstInput(obj)\r","                    obj.recoveryOnFirstInput = false;\r","                case 1\r","                    getJobConfigFromFirstInput(obj)\r","                    getTsConfigFromFirstInput(obj)\r","                    obj.recoveryOnFirstInput = false;\r","                otherwise\r","            end\r","            \r","            defineRecorrectobj(obj)\r","            addlistener(obj,{'tsActuationConfig'},'PostSet',@obj.handleRecorrectChange);\r","        end\r","        \r","        \r","        function run(obj)\r","            executeRerunOnFirstInput(obj)\r","            executeRerunOnRemainingInputs(obj)\r","            generateInterfieldTsResidual(obj)\r","            generateRawIntrafieldFingerprint(obj)\r","        end\r","        \r","        \r","        function executeRerunOnFirstInput(obj)\r","            \r","            iterNum = 1;\r","            obj.recorrect.bmmoInput = obj.bmmoInputs(iterNum);\r","            switch obj.recoveryOnFirstInput\r","                case true\r","                    obj.recorrect.recorrectionSbc = obj.zeroSbc;\r","                    obj.recorrect.run\r","                    obj.rerunOutput(iterNum).bmmoInputsRecorrected = ...\r","                        obj.recorrect.bmmoInputRecorrected;\r","                    updateRerunInputConfiguration(obj, iterNum)\r","                    obj.rerunOutput(iterNum).bmmoInputsRecorrected.info.report_data.time_filtering_enabled = 0;\r","                case false\r","                    obj.recorrect.recorrectionSbc = ...\r","                        obj.recorrect.bmmoInput.info.previous_correction;\r","                    obj.recorrect.run\r","                    obj.rerunOutput(iterNum).bmmoInputsRecorrected = ...\r","                        obj.recorrect.bmmoInputRecorrected;\r","                    updateRerunInputConfiguration(obj, iterNum)\r","            end\r","            getInterfieldRecorrectionFps(obj, iterNum)\r","            obj.rerunOutput(iterNum).chuckUsage = obj.recorrect.recorrectOptions.chuck_usage;\r","            obj.rerunOutput(iterNum).nLayers = obj.recorrect.recorrectOptions.no_layer_to_use;\r","            obj.rerunOutput(iterNum).wdms.uncontrolledInput = obj.recorrect.decorrectedMl;\r","            runDriftControlModel(obj, iterNum)\r","            getInterfieldModelResidual(obj,iterNum)\r","        end\r","        \r","        \r","        function executeRerunOnRemainingInputs(obj)\r","            \r","            for iterNum = 2:length(obj.bmmoInputs)\r","                obj.recorrect.bmmoInput = obj.bmmoInputs(iterNum);\r","                obj.recorrect.recorrectionSbc = obj.rerunOutput(iterNum-1).sbcs;\r","                obj.recorrect.run\r","                obj.rerunOutput(iterNum).bmmoInputsRecorrected = ...\r","                    obj.recorrect.bmmoInputRecorrected;\r","                updateRerunInputConfiguration(obj, iterNum)\r","                getInterfieldRecorrectionFps(obj, iterNum)\r","                obj.rerunOutput(iterNum).chuckUsage = obj.recorrect.recorrectOptions.chuck_usage;\r","                obj.rerunOutput(iterNum).nLayers = obj.recorrect.recorrectOptions.no_layer_to_use;\r","                obj.rerunOutput(iterNum).wdms.uncontrolledInput = obj.recorrect.decorrectedMl;\r","                runDriftControlModel(obj, iterNum)\r","                getInterfieldModelResidual(obj,iterNum)\r","            end\r","        end\r","        \r","        \r","        function updateRerunInputConfiguration(obj, iterNum)\r","            obj.rerunOutput(iterNum).bmmoInputsRecorrected.info.configuration_data = obj.jobConfig;\r","            updateTimeFilterState(obj, iterNum)\r","        end\r","        \r","        \r","        function getInterfieldRecorrectionFps(obj, iterNum) \r","            recorrectionFpsInterfPerWafer = ...\r","                ovl_sub(obj.recorrect.recorrectionFps.TotalSBCcorrection,...\r","                obj.recorrect.recorrectionFps.INTRAF); \r","            recorrectionFpsInterfPerChuck = bmmo_average_chuck(recorrectionFpsInterfPerWafer, ...\r","                obj.recorrect.recorrectOptions);\r","            obj.recorrectionFpsPerChuck(iterNum).interf = ovl_get_wafers(recorrectionFpsInterfPerChuck(1), []);\r","            for ichk = 1:length(recorrectionFpsInterfPerChuck)\r","                obj.recorrectionFpsPerChuck(iterNum).interf = ovl_combine_wafers(...\r","                    obj.recorrectionFpsPerChuck(iterNum).interf, recorrectionFpsInterfPerChuck(ichk));\r","            end\r","        end\r","        \r","        \r","        function runDriftControlModel(obj, iterNum)\r","            [out, wdm] = bmmo_nxe_drift_control_model...\r","                (obj.rerunOutput(iterNum).bmmoInputsRecorrected);\r","            obj.rerunOutput(iterNum).kpis = out.report.KPI;\r","            obj.rerunOutput(iterNum).sbcs = rmfield(out.corr, 'Configurations');\r","            \r","            for index = 1:length(out.invalid.invalidated_data)\r","                for imark = 1:length(out.invalid.invalidated_data(index).mark)\r","                    obj.rerunOutput(iterNum).invalidatedData(index).x(imark,:) = ...\r","                        out.invalid.invalidated_data(index).mark(imark).x;\r","                    obj.rerunOutput(iterNum).invalidatedData(index).y(imark,:) = ...\r","                        out.invalid.invalidated_data(index).mark(imark).y;\r","                end\r","            end\r","            obj.lisWdm = wdm;\r","        end\r","        \r","        function getInterfieldModelResidual(obj,iterNum)\r","            totalSbcCorrection = ovl_get_wafers(obj.lisWdm.total_filtered.TotalSBCcorrection(1), []);\r","            for ichk = 1:length(obj.lisWdm.total_filtered.TotalSBCcorrection)\r","                totalSbcCorrection = ovl_combine_wafers(totalSbcCorrection,...\r","                    obj.lisWdm.total_filtered.TotalSBCcorrection(ichk));\r","            end\r","            optionStruct = obj.recorrect.recorrectOptions;\r","            totalSbcCorrectionsPerWafer = ovl_get_wafers(totalSbcCorrection, optionStruct.chuck_usage.chuck_id);\r","            ffp = obj.rerunOutput(iterNum).sbcs.ffp;\r","            intrafFpsPerWafer = bmmo_INTRAF_par_fingerprint(totalSbcCorrectionsPerWafer, ffp, optionStruct);\r","            interfieldModelFpsPerWafer = ovl_sub(totalSbcCorrectionsPerWafer, intrafFpsPerWafer);\r","            interfieldModelResidualWithIntraf = ...\r","                ovl_add(obj.rerunOutput(iterNum).wdms.uncontrolledInput, interfieldModelFpsPerWafer);\r","            intrafTotal = ovl_average_fields(ovl_average(ovl_get_fields(interfieldModelResidualWithIntraf, optionStruct.fid_intrafield)));\r","            obj.rerunOutput(iterNum).wdms.interfieldModelResidual = ovl_sub_field(interfieldModelResidualWithIntraf, intrafTotal);\r","        end\r","        \r","        \r","        function generateInterfieldTsResidual(obj)\r","            for iterNum = 1:length(obj.bmmoInputs)-1\r","                Fps(iterNum).tsInterfield = ovl_get_wafers(obj.recorrectionFpsPerChuck(iterNum+1).interf,...\r","                    obj.rerunOutput(iterNum).chuckUsage.chuck_id);\r","            end\r","            \r","            lastIter = length(obj.bmmoInputs);\r","            lastBmmoDecorrectedMl = obj.rerunOutput(lastIter).wdms.uncontrolledInput;\r","            lastOptionStruct = obj.recorrect.recorrectOptions;\r","            lastSbc = obj.rerunOutput(lastIter).sbcs;\r","            fpStruct = bmmo_apply_SBC_core(lastBmmoDecorrectedMl, lastSbc, 1, lastOptionStruct);    \r","            Fps(lastIter).tsInterfield = ovl_sub(fpStruct.TotalSBCcorrection, fpStruct.INTRAF);\r","            \r","            for iterNum = 1:length(obj.bmmoInputs)\r","                interfieldTsResidualWithIntraf = ...\r","                    ovl_add(obj.rerunOutput(iterNum).wdms.uncontrolledInput, Fps(iterNum).tsInterfield);\r","                intrafTotal = ovl_average_fields(ovl_average(ovl_get_fields(interfieldTsResidualWithIntraf, lastOptionStruct.fid_intrafield)));\r","                obj.rerunOutput(iterNum).wdms.interfieldTsResidual = ovl_sub_field(interfieldTsResidualWithIntraf, intrafTotal);\r","            end\r","        end\r","        \r","        \r","        function generateRawIntrafieldFingerprint(obj)\r","            for iterNum = 1:length(obj.bmmoInputs)\r","                obj.rerunOutput(iterNum).wdms.rawIntrafieldFp = ...\r","                    bmmo_ffp_to_ml_simple(obj.rerunOutput(iterNum).sbcs.ffp);\r","            end\r","        end\r","    end\r","    \r","    \r","    methods % listeners, setters & getters\r","        \r","        function handleRecorrectChange(obj,~, ~)\r","            defineRecorrectobj(obj)\r","        end\r","        \r","        \r","        function defineRecorrectobj(obj)\r","            obj.recorrect = bmmo_RecorrectTsActuation(obj.tsActuationConfig);\r","        end\r","        \r","        \r","        function updateTimeFilterState(obj,iterNum)\r","            switch obj.timeFilter\r","                case 'DEFAULT'\r","                    % do nothing\r","                case 'DISABLED'\r","                    obj.rerunOutput(iterNum).bmmoInputsRecorrected.info.report_data.time_filtering_enabled = 0;\r","                case 'ENABLED'% TODO: support adaptive filter case, disabled for now.\r","                    obj.rerunOutput(iterNum).bmmoInputsRecorrected.info.report_data.time_filtering_enabled = 1;\r","                    obj.rerunOutput(iterNum).bmmoInputsRecorrected.info.report_data.adaptive_time_filter_enabled = 0;\r","            end\r","        end\r","        \r","        \r","        function getTsConfigFromFirstInput(obj)\r","            config = bmmo_get_inline_sdm_configuration(obj.bmmoInputs(1));\r","            obj.tsActuationConfig = config.fnhandle;\r","        end\r","        \r","        \r","        function getJobConfigFromFirstInput(obj)\r","            obj.jobConfig = obj.bmmoInputs(1).info.configuration_data;\r","            if ~isfield(obj.jobConfig, 'bl3_model')\r","                obj.jobConfig.bl3_model = 0;\r","            end\r","        end\r","        \r","        \r","        function val = get.zeroSbc(obj)\r","            switch obj.jobConfig.bl3_model\r","                case true\r","                    out = bmmo_default_output_structure(bl3_default_options_structure);\r","                case false\r","                    out  = bmmo_default_output_structure(bmmo_default_options_structure);\r","            end\r","            val = out.corr;\r","        end\r","    end\r","end %classdef\r","\r","function mustBeValidFilter(timeFilter)\r","mustBeMember(timeFilter, bmmo_RerunTsActuation.validTimeFilter)\r","end % mustBeValidFilter\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,125,126,127,128,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,163,164,165,166,167,168,169,170,171,172,173,174,175,181,182,187,188,189,190,191,192,193,194,195,201,202,203,204,206,207,208,209,210,211,214,218,219,220,221,223,224,225,226,227,228,229,230,231,236,237,238,241,242,243,244,245,246,248,249,250,251,252,258,259,260,269,274,279,280,282,283,284,285,286,292,293,298,299,300,306,307,308,309,310,312,318],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}