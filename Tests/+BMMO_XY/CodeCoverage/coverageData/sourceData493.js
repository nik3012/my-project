var sourceData493 = {"FileContents":["function [expinfo, scan_direction] = bmmo_kt_expinfo_from_ler(ler)\r","% function [expinfo, scan_direction] = bmmo_kt_expinfo_from_ler(ler)\r","% <help_update_needed>\r","%\r","% <short description>\r","% input:\r","% output:\r","%\r","%\r","\r","\r","% read from exposure results of first wafer\r","exposed_fields = [ler.Results.WaferResultList(1).elt.ImageResultList(1).elt.ExposureResultList.elt];\r","exp_pos = [exposed_fields.FieldPosition];\r","expids = {exposed_fields.ExposureId};\r","\r","exposure_image_list = ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList;\r","\r","% Check if there is just one exposure image\r","if length(exposure_image_list) == 1\r","    if ~strcmp(exposure_image_list.elt.ImageId, 'GEN_01')\r","        warning('Exposure image ID in ADELler is non-standard: %s', exposure_image_list.elt.ImageId)\r","    end\r","    image_index = 1;\r","else\r","    % If there are multiple images, store their ImageID's in a vector and\r","    % check for GEN_01\r","    for index = 1:length(exposure_image_list)\r","        image_IDs{index} = exposure_image_list(index).elt.ImageId;\r","        if strcmp(image_IDs{index}, 'GEN_01')\r","            image_index = index;\r","        end\r","    end\r","    % If none of the image ID's match with GEN_01, default to first one and\r","    % display a warning.\r","    if ~image_index\r","        image_index = 1;\r","        warning('BMMO image ID: GEN_01 not found from the image ID list: \\n%s \\nChoosing first image ID by default: %s', cell2str(image_IDs), image_IDs{image_index})\r","    end\r","end\r","\r","% read settings to get scan direction and map to exposure results\r","settings = [ler.Input.WaferSettings.WaferGenericSettings.ImageSettings.ImageSpecificSettingsList(image_index).elt.ExposureSettings.ExposureSpecificSettingsList.elt];\r","setids = {settings.ExposureId};\r","scandirs = {settings.ExposureScanDirection};\r","\r","% We've read cell arrays of strings. Convert to double.\r","xc_exp = {exp_pos.X}';\r","yc_exp = {exp_pos.Y}';\r","xc = 1e-3 * str2double(xc_exp);\r","yc = 1e-3 * str2double(yc_exp);\r","\r","% Map result exposure ID to settings exposure ID\r","expid = str2double(expids);\r","setid = str2double(setids);\r","[lid, loc] = ismember(expid, setid);\r","map_setid_to_expid = loc(lid);\r","\r","% Make sure all exposed results are mapped\r","assert(length(expid) == length(setid(map_setid_to_expid)), 'not all exposure results can be mapped to exposure settings');\r","\r","% Get scan direction in order of result exposures\r","scanup =  double(strcmp(scandirs, 'Upwards'));\r","scandown = -1 * double(strcmp(scandirs, 'Downwards'));\r","scan_direction = scanup + scandown;\r","scan_direction = scan_direction(map_setid_to_expid)';\r","\r","expinfo.xc = xc;\r","expinfo.yc = yc;\r",""],"CoverageData":{"CoveredLineNumbers":[13,14,15,17,20,21,24,25,28,29,30,31,36,43,44,45,48,49,50,51,54,55,56,57,60,63,64,65,66,68,69],"UnhitLineNumbers":[22,37,38],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,0,9,0,0,9,8,0,0,8,1,0,0,1,2,2,1,0,0,0,0,1,0,0,0,0,0,0,9,9,9,0,0,9,9,9,9,0,0,9,9,9,9,0,0,9,0,0,9,9,9,9,0,9,9,0]}}