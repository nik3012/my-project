var sourceData444 = {"FileContents":["function [mlo, kt_struct] = bmmo_get_meas_data(wafers_out, expinfo, phase, mark_type)\r","% function mlo = bmmo_get_meas_data(wafers_out, expinfo, phase)\r","%\r","% Get an ml structure (array) from KT_wafers_out, based on a template\r","% constructed from expinfo\r","%\r","% Input: wafers_out: full path to a KT_wafers_out file\r","%        expinfo: structure containing xc and yc vectors\r","%\r","% Output: mlo: ml structure array\r","%\r","% 20160331 SBPR Creation\r","\r","if nargin < 3\r","    phase = 1;\r","end\r","\r","if nargin < 4\r","    mark_type = 'XPA';\r","end\r","\r","% constants for bmmo_KT_2_ml\r","USE_LAYOUT = 1;\r","\r","if phase == 1\r","    X_SHIFT = 0.8405e-3;\r","    Y_SHIFT = -0.8695e-3;\r","\r","    X_SHIFT_L2 = 0.9605e-3;\r","    Y_SHIFT_L2 = -0.1895e-3;\r","\r","else\r","    X_SHIFT = 0;\r","    Y_SHIFT = 0;\r","\r","    X_SHIFT_L2 = 0;\r","    Y_SHIFT_L2 = 0;\r","end\r","\r","switch mark_type\r","    case 'XPA'\r","        layoutname = '13X19';\r","        xf_shift = [0 -260e-6];\r","        yf_shift = [0 -40e-6];\r","    case 'BF3u2V'\r","        layoutname = 'BF-FOXY3-DYNA-13X19';\r","        xf_shift = [0 -46e-6];\r","        yf_shift = [0 4e-5];\r","%         xf_shift = [0 0];\r","%         yf_shift = [0 0];\r","    otherwise \r","        error('Unsupported mark type %s', mark_type);\r","end\r","\r","% construct a template full-field ml structure based on the input\r","ml_exp = bmmo_kt_ml_from_expinfo(expinfo, layoutname);\r","\r","% apply inverted shifts and recombine\r","ml_main = ovl_get_fields(ml_exp, 1:87);\r","ml_edge = ovl_get_fields(ml_exp, 88:ml_exp.nfield);\r","\r","ml_main = bmmo_shift_fields(ml_main, -X_SHIFT, -Y_SHIFT);\r","ml_edge = bmmo_shift_fields(ml_edge, -X_SHIFT_L2, -Y_SHIFT_L2);\r","\r","ml_exp = ovl_combine_fields(ml_main, ml_edge);\r","\r","% map wafers_out to this structure\r","\r","[mlo, kt_struct] = bmmo_KT_2_ml(wafers_out, USE_LAYOUT, ml_exp, 'EXPOSED!', mark_type);\r","\r","% apply shifts to output and recombine\r","ml_main = ovl_get_fields(mlo, 1:87);\r","ml_edge = ovl_get_fields(mlo, 88:ml_exp.nfield);\r","\r","ml_main = bmmo_shift_fields(ml_main, X_SHIFT, Y_SHIFT);\r","ml_edge = bmmo_shift_fields(ml_edge, X_SHIFT_L2, Y_SHIFT_L2);\r","\r","mlo = ovl_combine_fields(ml_main, ml_edge);\r","\r","% apply ys readout shift \r","mlo = bmmo_shift_fields(mlo, xf_shift, yf_shift);\r","\r","disp('ensuring field centres from ADELler are found in reconstructed ml');\r","xc_yc = [mlo.wd.xc, mlo.wd.yc];\r","u_xc_yc = unique(xc_yc, 'rows');\r","e_xc_yc = [expinfo(1).xc expinfo(1).yc];\r","[~, sortorder] = sort(e_xc_yc(:,2));\r","e_xc_yc = e_xc_yc(sortorder, :);\r","[~, sortorder] = sort(e_xc_yc(:,1));\r","e_xc_yc = e_xc_yc(sortorder, :);\r","\r","assert(max(max(abs(u_xc_yc - e_xc_yc))) < 1e-12);\r","\r","disp('verifying all fields have measurement data');\r","for iw = 1:mlo.nwafer\r","   for ifield = 1:mlo.nfield\r","        ml_field = ovl_get_fields(ovl_get_wafers(mlo, iw),ifield);\r","        if(all(isnan(ml_field.layer.wr.dx)) || all(isnan(ml_field.layer.wr.dy)))\r","            error('field %d of wafer %d is all NaN', ifield, iw);\r","        end\r","   end\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[14,15,18,19,23,25,26,27,29,30,32,33,34,36,37,40,41,42,43,44,45,46,47,48,51,52,56,59,60,62,63,65,69,72,73,75,76,78,81,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}