var sourceData562 = {"FileContents":["function [mlo, bar_struct] = bmmo_input_from_adels(adelmet, adeller, adelsbcrep, adelwhc, adelrec, wecdir, filter, bar_struct, mapped_wids, exposure_wids, adelmcl)\r","% function mlo = bmmo_input_from_adels(adelmet, adeller, adelsbcrep, adelwhc, adelrec, wecdir, filter, bar_struct)\r","%\r","% Parse ADEL files from LCP/VCP job report to recreate LCP/VCP Matlab input to\r","% BMMO-NXE model\r","%\r","% Input\r","%   adelmet: ADELmetrology path\r","%   adeller: ADELler path\r","%   adelsbcrep: ADELsbcOverlayDriftControlNxeRep path\r","%   adelwhc: ADELwaferHeatingCorrectionReport path\r","%   adelrec: ADELreticleErrorCorrection path\r","%   adelmcl: ADELmultiCycleLotControlrep path\r","%   wecdir: Directory containing WEC files\r","%   filter: flag to set time filtering\r","%\r","%\r","% Optional Input:\r","%   bar_struct: progress bar structure\r","%   mapped_wids: WIDs mapped in LCP/VCP job report. If empty or missing, the\r","%                WIDs from ADELmetrology will be used\r","%   exposure_wids: Exposure context WIDs from LCP/VCP Job report\r","%   adelmcl: ADELmultiCycleLotControlrep path\r","\r","% Output:\r","%   mlo: BMMO-NXE input structure\r","%   bar_struct: progress bar structure or []\r","%\r","% 20170131 SBPR Updated to add progress bar\r","% 20190725 SELR Keep readout NaNs in input_struct(Constistent with LCP/VCP)\r","% 20200807 KZAK Added readout of ADELexposureTrajectories (CET NCE)\r","% 2020918  ANBZ Updated readout mapping based on exposure order using adeller\r","\r","%empty all variables if not given\r","if nargin < 8\r","    bar_struct    = [];\r","end\r","if nargin < 9\r","    mapped_wids   = [];\r","end\r","if nargin < 10\r","    exposure_wids = [];\r","end\r","if nargin < 11\r","    adelmcl       = [];\r","end\r","\r","% Define no. of marks for 2L and no. fields for 1L\r","N_SMF_L2 = 7672;\r","N_F_L1   = 89;\r","\r","% parse Adelmetrology\r","bar_struct = bmmo_log_progress('Reading ADELmetrology', bar_struct);\r","ml_all     = bmmo_process_adelmetrology(adelmet);\r","\r","% RINT target\r","id     = strcmp({ml_all.targetlabel}, 'LS_OV_RINT');\r","ml_raw = ml_all(id);\r","\r","% determine WIDs from WID_UP\r","bar_struct = bmmo_log_progress('Reading WIDs', bar_struct);\r","wid_id     =  strcmp({ml_all.targetlabel}, 'WID_UP');\r","%wids = ovl_get_wid(ml_all(wid_id));\r","[wids, aux, hash] = bmmo_get_wid(ml_all(wid_id));\r","disp(wids);\r","\r","% map the WIDs from the LCP report to ADELmetrology\r","disp('Mapping WIDs from Job report to ADELmetrology');\r","if ~isempty(mapped_wids)\r","    widmapping = sub_get_wid_mapping(wids, mapped_wids);\r","    wids       = mapped_wids;\r","    %disp(widmapping);\r","    hash       = hash(widmapping);\r","    %disp(hash);\r","else\r","    widmapping = 1:ml_raw.nwafer;\r","end\r","ml_raw = ovl_get_wafers(ml_raw, widmapping);\r","\r","% Apply WEC\r","bar_struct = bmmo_log_progress('Applying WEC', bar_struct);\r","ml_raw     = bmmo_apply_wec(ml_raw, wecdir, wids);\r","\r","% get an ml structure from adeller and map the layouts\r","bar_struct = bmmo_log_progress('Reading expinfo', bar_struct);\r","[ml_raw.expinfo, mark_type, adeller_wids] = bmmo_expinfo_from_adeller(adeller);\r","bar_struct = bmmo_log_progress(['Mark type: ',mark_type], bar_struct);\r","\r","% map the readout wafers to the exposure order\r","if ~isempty(adelmcl)\r","    bar_struct = bmmo_log_progress('Reading MCL report', bar_struct);\r","    [~, exposure_hash_list] = bmmo_map_wid_hash(adelmcl, hash);\r","    disp('Applying exposure wafer sort order based on etched WID');\r","    [~, wafer_sort_order, sortid] = intersect(exposure_hash_list, hash, 'stable');\r","    disp(sortid');\r","    ml_raw = ovl_get_wafers(ml_raw, sortid); % Also need to map chuck IDs here!\r","    \r","    % map the readout wafer to the exposure wafer using adeller, if adelmcl is not available\r","elseif ~isempty(exposure_wids)\r","    [~, wafer_sort_order, sortid] = intersect(adeller_wids, exposure_wids, 'stable');\r","    disp('Applying exposure wafer sort order using customer manual mapping and ADELler');\r","    disp(sortid');\r","    ml_raw = ovl_get_wafers(ml_raw, sortid);\r","    \r","    % in case of no adelmcl and exposure_wids\r","else\r","    warning('Assuming same readout and expose order')\r","    wafer_sort_order = 1:ml_raw.nwafer;\r","end\r","\r","% Turn off second layer for case: 2L exposure & 1L readout\r","if ml_raw.nfield < N_SMF_L2 && length(ml_raw.expinfo.xc) > N_F_L1\r","    ml_raw.expinfo = bmmo_clip_expinfo_to_l1(ml_raw.expinfo);\r","end\r","\r","options = bmmo_default_options_structure;\r","options = bmmo_get_xy_shift(ml_raw, options);\r","ml_tmp  = bmmo_field_reconstruction(ml_raw, options);\r","\r","% Fill in fields of info (such as kfactors, previous corr) and expinfo\r","bar_struct = bmmo_log_progress('Reading info', bar_struct);\r","ml_tmp = bmmo_kt_preprocess_input(ml_tmp, adeller, adelwhc, adelsbcrep, filter, wafer_sort_order);\r","\r","ml_tmp = bmmo_shift_fields(ml_tmp, options.x_shift, options.y_shift);\r","\r","% Apply REC\r","bar_struct = bmmo_log_progress('Applying REC', bar_struct);\r","ml_rec_applied = bmmo_apply_rec(ml_tmp, adelrec);\r","\r","mlo = bmmo_map_to_smf(ml_rec_applied, ml_raw);\r","mlo = rmfield(mlo, 'expinfo');\r","mlo = bmmo_add_missing_fields(mlo, ml_tmp);\r","\r","for iwafer = 1:mlo.nwafer\r","    id_uni = find((isnan(mlo.layer.wr(iwafer).dx) & ~isnan(mlo.layer.wr(iwafer).dy))|(~isnan(mlo.layer.wr(iwafer).dx) & isnan(mlo.layer.wr(iwafer).dy)));\r","    mlo.layer.wr(iwafer).dx(id_uni) = NaN;\r","    mlo.layer.wr(iwafer).dy(id_uni) = NaN;\r","end\r","\r","\r","end\r","\r","    \r","function widmapping = sub_get_wid_mapping(allwids, mapped_wids)\r","\r","widmapping = zeros(size(mapped_wids));\r","% set the length of string to be same as in ADELmetrology\r","n = length(allwids{1});\r","for ii = 1:length(mapped_wids)\r","    mapped_ids = mapped_wids{ii}(1:n);\r","    widmapping(ii) = find(strcmp(mapped_ids, allwids));\r","end\r","\r","end\r","\r",""],"CoverageData":{"CoveredLineNumbers":[35,38,41,44,49,50,53,54,57,58,61,62,64,65,68,69,70,71,73,78,81,82,85,86,87,90,91,92,93,94,95,96,99,100,101,102,103,112,113,116,117,118,121,122,124,127,128,130,131,132,134,135,136,137,146,148,149,150,151],"UnhitLineNumbers":[36,39,42,45,75,76,106,107,108],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,4,0,0,4,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,4,4,0,0,4,4,4,4,0,4,0,0,0,0,4,0,0,4,4,0,0,4,4,4,0,0,4,2,2,2,2,2,2,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,4,2,0,0,4,4,4,0,0,4,4,0,4,0,0,4,4,0,4,4,4,0,4,14,14,14,0,0,0,0,0,0,0,0,4,0,4,4,14,14,0,0,0,0,0]}}