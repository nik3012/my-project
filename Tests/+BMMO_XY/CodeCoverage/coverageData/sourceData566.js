var sourceData566 = {"FileContents":["function ml_all = bmmo_parse_ADELwaferdatamap(adelwdm)\r","% function ml_all = bmmo_parse_ADELwaferdatamap(adel_wdm)\r","%\r","% Load all the waferdata maps from an ADELwaferdatamap xml file into an ml\r","% structure\r","%\r","% If the function is run without any input, a dialog box is opened to choose the\r","% options\r","%\r","% Input:    adelwdm: full path of ADEL_waferdatamap file\r","%\r","% Output:   ml_all:  matlab struct containing all the different waferdatamaps\r","%                    as substructures in the ml format\r","%\r","% 20190726 SELR creation based on code from JIMI\r","\r","data = xml_load(adelwdm);\r","\r","WL_data = data.Body.WaferLayoutDefinitionList.elt.FieldList;\r","for ii=1:length(WL_data)\r","    f_id = str2double(WL_data(ii).elt.Id);\r","    xc_F(f_id) = str2double(WL_data(f_id).elt.Position.X)*1e-3;\r","    yc_F(f_id) = str2double(WL_data(f_id).elt.Position.Y)*1e-3;\r","end\r","\r","ml_all=[];\r","ml_all.mid = data.Header.MachineID;\r","ml_all.jid = data.Body.JobId;\r","\r","Allmaps= data.Body.WaferDataSetList;\r","for i=1:length(Allmaps)\r","    MapName = Allmaps(i).elt.Definition.Name;\r","    for j = 1:length(Allmaps(i).elt.WaferDataList)\r","        if isfield(Allmaps(i).elt.WaferDataList(j).elt, 'WaferId')\r","            Chk = str2double(Allmaps(i).elt.WaferDataList(j).elt.WaferId(end));\r","        elseif isfield(Allmaps(i).elt.WaferDataList(j).elt, 'ChuckId')\r","            Chk = str2double(Allmaps(i).elt.WaferDataList(j).elt.ChuckId(end));\r","        else\r","            Chk = 1;\r","        end\r","        map = data.Body.WaferDataSetList(i).elt.WaferDataList(j).elt.DataValueList;\r","        mlo=sub_get_ml(map, xc_F, yc_F);\r","%         invalid = arrayfun(@(x) isfield(x.elt.Overlay.X, 'InvalidationReasonId'), map);\r","%         invalidation_reason_id = arrayfun(@(x) str2double(x.elt.Overlay.X.InvalidationReasonId), map(invalid));\r","        ml_all.(MapName)(Chk) = mlo;\r","%         if sum(invalid) > 0\r","%             wc_invalid = [invalidation_reason_id' mlo.wd.xw(invalid), mlo.wd.yw(invalid)];\r","%             ml_all.(MapName)(Chk).invalid = wc_invalid;\r","%         end\r","    end\r","end\r","\r","\r","function mlo = sub_get_ml(data, xc_F, yc_F)\r","map=data;\r","nwafer=1;\r","for kk=1:length(map)\r","    f_id = str2double(map(kk).elt.IntrafieldPosition.FieldId);\r","    xf(kk) = str2double(map(kk).elt.IntrafieldPosition.Position.X)*1e-3;\r","    yf(kk) = str2double(map(kk).elt.IntrafieldPosition.Position.Y)*1e-3;\r","    dx(kk) = str2double(map(kk).elt.Overlay.X.Value) * 1e-9 ;\r","    dy(kk) = str2double(map(kk).elt.Overlay.Y.Value) * 1e-9 ;\r","    xc(kk) = xc_F(f_id);\r","    yc(kk) = yc_F(f_id);\r","end\r","numtargets=1;\r","mlo = repmat(struct('nwafer', nwafer, 'layer', [], 'wd', [], 'nmark', 1, 'nfield', 0, 'nlayer', 1, 'tlgname', ''), 1, numtargets);\r","\r","mlo.wd.xc = xc';\r","mlo.wd.yc = yc';\r","mlo.wd.xf = xf';\r","mlo.wd.yf = yf';\r","mlo.wd.xw = mlo.wd.xc + mlo.wd.xf;\r","mlo.wd.yw = mlo.wd.yc + mlo.wd.yf;\r","\r","mlo.nfield = length(mlo.wd.xc);\r","\r","mlo.layer.wr.dx = dx';\r","mlo.layer.wr.dy = dy';"],"CoverageData":{"CoveredLineNumbers":[],"UnhitLineNumbers":[17,19,20,21,22,23,26,27,28,30,31,32,33,34,35,36,37,38,39,41,42,45,55,56,57,58,59,60,61,62,63,64,66,67,69,70,71,72,73,74,76,78,79],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}