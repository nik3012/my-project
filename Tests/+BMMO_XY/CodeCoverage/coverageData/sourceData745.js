var sourceData745 = {"FileContents":["function mlo = bmmo_generate_MI(template_mli, options)\r","% function mlo = bmmo_generate_MI(template_mli, options)\r","%\r","% Given an ml input and a MI map in parmc format,\r","% generate a mirror fingerprint\r","%\r","% Input: MI_map: mirror map\r","%        mli: input ml structure\r","%        options: Default options structure\r","%\r","% Output: mlo: single-layer, single-wafer mirror fingerprint ml structure\r","%\r","% 20200520 SELR Creation, refactored from bmmo_simulate_random_input\r","\r","map_length = options.map_table_length;\r","options_xtalk.pos_xmirr = [0:map_length-1]*options.map_param.pitch + options.map_param.start_position;\r","options_xtalk.pos_ymirr = [0:map_length-1]*options.map_param.pitch + options.map_param.start_position;\r","\r","options_xtalk.M_xmirr = bmmo_base_spline(options_xtalk.pos_xmirr, options.ytx_spline_params.x_start, options.ytx_spline_params.x_end, options.ytx_spline_params.nr_segments, options);\r","options_xtalk.M_ymirr = bmmo_base_spline(options_xtalk.pos_ymirr, options.xty_spline_params.x_start, options.xty_spline_params.x_end, options.xty_spline_params.nr_segments, options);\r","\r","\r","\r","MIX_rand{1} = randn(1, options.ytx_spline_params.nr_segments+1);\r","    MIX_rand{2} = randn(1, options.ytx_spline_params.nr_segments+1);\r","    MIY_rand{1} = randn(1, options.xty_spline_params.nr_segments+1);\r","    MIY_rand{2} = randn(1, options.xty_spline_params.nr_segments+1);\r","\r","    for iw=1:6\r","        MI_par.wafer{iw}.x_mirr = MIX_rand{2-mod(iw,2)}*1e-8;\r","        MI_par.wafer{iw}.y_mirr = MIY_rand{2-mod(iw,2)}*1e-8;\r","    end\r","    \r","    \r","pos_xmirr = options_xtalk.pos_xmirr;\r","pos_ymirr = options_xtalk.pos_ymirr;\r","M_xmirr   = options_xtalk.M_xmirr;\r","M_ymirr   = options_xtalk.M_ymirr;\r","\r","for iw = 1:length(MI_par.wafer) \r","    meas_xmirr_dx{iw} = full(M_xmirr*MI_par.wafer{iw}.x_mirr');\r","    MI_map{iw}.x_mirr.y = pos_xmirr;\r","    MI_map{iw}.x_mirr.dx = meas_xmirr_dx{iw};\r","    \r","    meas_ymirr_dy{iw} = full(M_ymirr*MI_par.wafer{iw}.y_mirr');\r","    MI_map{iw}.y_mirr.x = pos_ymirr;\r","    MI_map{iw}.y_mirr.dy = meas_ymirr_dy{iw};\r","end\r","\r","mlo = template_mli;\r","ml_curved_slit = bmmo_apply_curved_slit_correction(mlo, options, -1);\r","\r","for iw = 1:mlo.nwafer\r","    mlo.layer.wr(iw).dx = interp1(MI_map{iw}.x_mirr.y, MI_map{iw}.x_mirr.dx, ml_curved_slit.wd.yw);\r","    mlo.layer.wr(iw).dy = interp1(MI_map{iw}.y_mirr.x, MI_map{iw}.y_mirr.dy, mlo.wd.xc);\r","end\r","\r","mlo = setting_nans_bmmo_layout(template_mli, mlo);\r","\r","mark_layout = bmmo_get_mark_layout(options.reduced_reticle_layout, options);\r","if options.no_layer_to_use == 2\r","    [~, bao] = ovl_model(ovl_get_layout(ovl_get_fields(mlo,[1:87, 125 ,136]), mark_layout), 'perwafer');\r","else\r","    [~, bao] = ovl_model(ovl_get_layout(mlo, mark_layout), 'perwafer');\r","end\r","    \r","mlo = ovl_model(mlo, 'apply',bao, -1);\r","\r","\r","function mlo = setting_nans_bmmo_layout(ml_bmmo_template, ml_bmmo_full )\r","mlo = ml_bmmo_full;\r","\r","for iwaf = 1:ml_bmmo_full.nwafer\r","    mlo.layer.wr(iwaf).dx(isnan(ml_bmmo_template.layer.wr(iwaf).dx))=NaN;\r","    mlo.layer.wr(iwaf).dy(isnan(ml_bmmo_template.layer.wr(iwaf).dy))=NaN;\r","end"],"CoverageData":{"CoveredLineNumbers":[15,16,17,19,20,24,25,26,27,29,30,31,35,36,37,38,40,41,42,43,45,46,47,50,51,53,54,55,58,60,61,62,67,71,73,74,75],"UnhitLineNumbers":[63,64],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,6,6,0,0,0,1,1,1,1,0,1,6,6,6,0,6,6,6,0,0,1,1,0,1,6,6,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,6,6,0]}}