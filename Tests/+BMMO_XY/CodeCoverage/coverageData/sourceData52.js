var sourceData52 = {"FileContents":["function [fps, C] = bmmo_construct_FPS(mli, options, model)\r","% function [fps, C] = bmmo_construct_FPS(mli, options, model)\r","%\r","% This function generates the sub-model fingerprints as per the specified\r","% model configuration\r","%\r","% Input:\r","%  mli: Input tlg, contains WH fingerprints during exposure in mli.info\r","%  options: BMMO/BL3 option structure\r","%  model: Combined model type, 'OR', 'SUSD_1L', 'MI', 'MIKA', 'WH', WH_SUSD \r","%\r","% Output:\r","%  fps: Generated fingerprints (cell array of ml structures)\r","%    fps{1} : WHFP on chuck(1)\r","%    fps{2} : WHFP on chuck(2)\r","%    Remaining are fingerprints specified in options.combined_model_contents\r","%  C: Constraint matrix\r","%\r","% For details of the model and definitions of in/out interfaces, refer to\r","% D000810611 EDS BMMO NXE drift control model\r","\r","% get all-zero single layer ml struct as basis\r","ml = ovl_get_layers(ovl_get_wafers(mli(options.chuck_usage.chuck_id_used(1)),1),1);\r","ml_zero = ovl_create_dummy(ml);\r","\r","% Loop over the combined model contents\r","fp_types_length = length(options.combined_model_contents.(model));\r","for ifp = 1:fp_types_length\r","    % get the function handle from the model name\r","    cm_fn = options.cm.(model).(options.combined_model_contents.(model){ifp}).fnhandle;\r","    fps_temp = feval(cm_fn, ml_zero, options);\r","    % execute the model\r","    fps_tempsz = size(fps_temp,1);\r","    fps(1).(options.combined_model_contents.(model){ifp})= sub_fps_to_mat(fps_temp(1,:));\r","    \r","    if fps_tempsz == 2\r","        fps(2).(options.combined_model_contents.(model){ifp})= sub_fps_to_mat(fps_temp(2,:));\r","    end\r","    \r","end\r","\r","% Add constraints\r","C = [];\r","if isfield(options.cm.(model), 'constrained')\r","    cn = fieldnames(options.cm.(model).constrained);\r","    for i = 1:length(cn)\r","        con = options.cm.(model).constrained.(cn{i});\r","        C.(cn{i}) = [];\r","        for j = 1:length(con)\r","            to_constrain = fps.(cn{i});\r","            constraints = fps.(con{j});\r","            constr_mat = constraints' * to_constrain;\r","            constr_mat(isnan(constr_mat)) = 0;\r","            C.(cn{i}) = [C.(cn{i}); constr_mat];\r","        end\r","    end\r","end\r","\r","\r","function mat = sub_fps_to_mat(fps)\r","\r","mat = [];\r","for i = 1:length(fps)\r","    col = [fps{i}.layer.wr.dx; fps{i}.layer.wr.dy];\r","    mat = [mat col];\r","end\r",""],"CoverageData":{"CoveredLineNumbers":[23,24,27,28,30,31,33,34,36,37,43,44,62,63,64,65],"UnhitLineNumbers":[45,46,47,48,49,50,51,52,53,54],"HitCount":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,437,437,0,0,437,437,0,1557,1557,0,1557,1557,0,1557,795,0,0,0,0,0,437,437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2352,2352,21906,21906,0,0]}}